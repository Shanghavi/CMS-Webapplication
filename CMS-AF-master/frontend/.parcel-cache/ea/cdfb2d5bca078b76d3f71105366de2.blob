// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this,
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"1j6wU":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {
};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"592mh"}],"592mh":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"2rNh6"}],"2rNh6":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {
                },
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"1pEn3":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "6c6d401bcb92263055c9932278d3e8ff"; // @flow
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets/*: {|[string]: boolean|} */ , acceptedAssets/*: {|[string]: boolean|} */ , assetsToAccept/*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
    // $FlowFixMe
    ws.onmessage = function(event/*: {data: string, ...} */ ) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH
            );
            // Handle HMR Update
            var handled = false;
            assets.forEach((asset)=>{
                var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
                if (didAccept) handled = true;
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
            }
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function(e) {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
        errorHTML += `\n      <div>\n        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>\n          ${stack}\n        </pre>\n        <div>\n          ${diagnostic.hints.map((hint)=>'<div>' + hint + '</div>'
        ).join('')}\n        </div>\n      </div>\n    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    link.getAttribute('href').split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle/*: ParcelRequire */ , asset/*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle/*: ParcelRequire */ , id/*: string */ , depsByBundle/*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle/*: ParcelRequire */ , id/*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"17RhE":[function(require,module,exports) {
var helpers = require("./node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _app = require("./App");
var _appDefault = parcelHelpers.interopDefault(_app);
var _reactRouterDom = require("react-router-dom");
var _bootstrapMinCss = require("bootstrap/dist/css/bootstrap.min.css");
_reactDomDefault.default.render(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.BrowserRouter, {
    __source: {
        fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\index.jsx",
        lineNumber: 7
    },
    __self: undefined
}, /*#__PURE__*/ _reactDefault.default.createElement(_reactDefault.default.StrictMode, {
    __source: {
        fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\index.jsx",
        lineNumber: 7
    },
    __self: undefined
}, /*#__PURE__*/ _reactDefault.default.createElement(_appDefault.default, {
    __source: {
        fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\index.jsx",
        lineNumber: 7
    },
    __self: undefined
}), " ")), document.getElementById('app'));

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","react-dom":"2sg1U","./App":"28u9I","react-router-dom":"1PMSK","bootstrap/dist/css/bootstrap.min.css":"1pxxd","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","./node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"3b2NM":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"ixJ97"}],"ixJ97":[function(require,module,exports) {
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error1) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error1;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component1) {
        var prototype = Component1.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"object-assign":"3eM6x"}],"3eM6x":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"2sg1U":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"6fSaM"}],"6fSaM":[function(require,module,exports) {
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
         // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) return expected;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case Block:
                return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function getIsRendering() {
        return isRendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration code path too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix1, key) {
        return prefix1 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix1) {
            isUnitlessNumber[prefixKey(prefix1, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies1 = eventRegistry.registrationNameDependencies, possibleRegistrationNames1 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies1.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames1.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames1[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var IS_REPLAYED = 16;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {
        }; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error1) {
            this.onError(error1);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error1; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error1 = event.error;
                didSetError = true;
                if (error1 === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error1 != null && typeof error1 === 'object') try {
                        error1._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error1 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error1 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error1);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error1) {
            hasError = true;
            caughtError = error1;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error1 = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error1;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error3 = caughtError;
            hasError = false;
            caughtError = null;
            return error3;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ 6;
    var Deletion = /*                     */ 8;
    var ContentReset = /*                 */ 16;
    var Callback = /*                     */ 32;
    var DidCapture = /*                   */ 64;
    var Ref = /*                          */ 128;
    var Snapshot = /*                     */ 256;
    var Passive = /*                      */ 512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /*     */ 8192;
    var Hydrating = /*                    */ 1024;
    var HydratingAndUpdate = /*           */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*          */ 932; // Union of all host effects
    var HostEffectMask = /*               */ 2047; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 2048;
    var ShouldCapture = /*                */ 4096;
    var ForceUpdateForLegacySuspense = /* */ 16384; // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current1 = fiber.alternate;
                if (current1 !== null) suspenseState = current1.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while(node !== null){
            if (node === parentFiber || node === parentFiberAlternate) return true;
            node = node.return;
        }
        return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                                attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while(targetContainers.length > 0){
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                } // This target container was successfully dispatched. Try the next.
                targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes1 = {
        };
        prefixes1[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes1['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes1['Moz' + styleProp] = 'moz' + eventName;
        return prefixes1;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        'cancel',
        'cancel',
        'click',
        'click',
        'close',
        'close',
        'contextmenu',
        'contextMenu',
        'copy',
        'copy',
        'cut',
        'cut',
        'auxclick',
        'auxClick',
        'dblclick',
        'doubleClick',
        'dragend',
        'dragEnd',
        'dragstart',
        'dragStart',
        'drop',
        'drop',
        'focusin',
        'focus',
        'focusout',
        'blur',
        'input',
        'input',
        'invalid',
        'invalid',
        'keydown',
        'keyDown',
        'keypress',
        'keyPress',
        'keyup',
        'keyUp',
        'mousedown',
        'mouseDown',
        'mouseup',
        'mouseUp',
        'paste',
        'paste',
        'pause',
        'pause',
        'play',
        'play',
        'pointercancel',
        'pointerCancel',
        'pointerdown',
        'pointerDown',
        'pointerup',
        'pointerUp',
        'ratechange',
        'rateChange',
        'reset',
        'reset',
        'seeked',
        'seeked',
        'submit',
        'submit',
        'touchcancel',
        'touchCancel',
        'touchend',
        'touchEnd',
        'touchstart',
        'touchStart',
        'volumechange',
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate'
    ];
    var userBlockingPairsForSimpleEventPlugin = [
        'drag',
        'drag',
        'dragenter',
        'dragEnter',
        'dragexit',
        'dragExit',
        'dragleave',
        'dragLeave',
        'dragover',
        'dragOver',
        'mousemove',
        'mouseMove',
        'mouseout',
        'mouseOut',
        'mouseover',
        'mouseOver',
        'pointermove',
        'pointerMove',
        'pointerout',
        'pointerOut',
        'pointerover',
        'pointerOver',
        'scroll',
        'scroll',
        'toggle',
        'toggle',
        'touchmove',
        'touchMove',
        'wheel',
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */ function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [
                topEvent
            ]);
        }
    }
    function setEventPriorities(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    }
    function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var SyncBatchedLane = /*                 */ 2;
    var InputDiscreteHydrationLane = /*      */ 4;
    var InputDiscreteLanes = /*                    */ 24;
    var InputContinuousHydrationLane = /*           */ 32;
    var InputContinuousLanes = /*                  */ 192;
    var DefaultHydrationLane = /*            */ 256;
    var DefaultLanes = /*                   */ 3584;
    var TransitionHydrationLane = /*                */ 4096;
    var TransitionLanes = /*                       */ 4186112;
    var RetryLanes = /*                            */ 62914560;
    var SomeRetryLane = /*                  */ 33554432;
    var SelectiveHydrationLane = /*          */ 67108864;
    var NonIdleLanes = /*                                 */ 134217727;
    var IdleHydrationLane = /*               */ 134217728;
    var IdleLanes = /*                             */ 805306368;
    var OffscreenLane = /*                   */ 1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {
    } // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
        }
        error('Should have found matching lanes. This is a bug in React.');
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch(schedulerPriorityLevel){
            case ImmediatePriority:
                return SyncLanePriority;
            case UserBlockingPriority:
                return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                return DefaultLanePriority;
            case IdlePriority:
                return IdleLanePriority;
            default:
                return NoLanePriority;
        }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
        switch(lanePriority){
            case SyncLanePriority:
            case SyncBatchedLanePriority:
                return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
                return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
                return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
                return IdlePriority;
            case NoLanePriority:
                return NoPriority;
            default:
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Check if any work has expired.
        if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                    if (nonIdlePingedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                }
            } else {
                // The only remaining work is Idle.
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                }
            }
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If there are higher priority lanes, we'll include them even if they
        // are suspended.
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) return wipLanes;
            else return_highestLanePriority = nextLanePriority;
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) // User interactions should expire slightly more quickly.
        //
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        //
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        //
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
        else if (priority >= TransitionPriority) return currentTime + 5000;
        else // Anything idle priority or lower should never expire.
        return NoTimestamp;
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function returnNextLanesPriority() {
        return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    } // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
        switch(lanePriority){
            case NoLanePriority:
                break;
            case SyncLanePriority:
                return SyncLane;
            case SyncBatchedLanePriority:
                return SyncBatchedLane;
            case InputDiscreteLanePriority:
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
                return _lane;
            case InputContinuousLanePriority:
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
                return _lane2;
            case DefaultLanePriority:
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                    // If all the default lanes are already being worked on, look for a
                    // lane in the transition range.
                    _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                    if (_lane3 === NoLane) // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                }
                return _lane3;
            case TransitionPriority:
            case RetryLanePriority:
                break;
            case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) lane = pickArbitraryLane(IdleLanes);
                return lane;
        }
        throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes);
        }
        return lane;
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) lane = pickArbitraryLane(RetryLanes);
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set1, subset) {
        return (set1 & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set1, subset) {
        return set1 & ~subset;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.
        var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
        if (lanes === 0) return 32;
        return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
            case ContinuousEvent:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        var allowReplay = true;
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
                // This this to be replayed later once the target is available.
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) return;
             // We need to clear only if we didn't queue because
            // queueing is accummulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.
        return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {
            },
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({
    }, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = _assign({
    }, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = _assign({
    }, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = _assign({
    }, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = _assign({
    }, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = _assign({
    }, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = _assign({
    }, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = _assign({
    }, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = _assign({
    }, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = _assign({
    }, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = _assign({
    }, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = _assign({
    }, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root1, offset) {
        var node = getLeafNode(root1);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && (++indexWithinAnchor) === anchorOffset) start = length;
                if (parentNode === focusNode && (++indexWithinFocus) === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (rootContainerElement[listeningMarker]) // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement, null);
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var target = rootContainerElement; // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.
        if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) target = rootContainerElement.ownerDocument;
         // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') return;
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.
        if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString();
            else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root1 = rootContainerInstance.documentElement;
                namespace = root1 ? root1.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style1 = instance.style;
        if (typeof style1.setProperty === 'function') style1.setProperty('display', 'none', 'important');
        else style1.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36);
        return {
            toString: function() {
                warnOnAccessInDEV();
                return id;
            },
            valueOf: function() {
                warnOnAccessInDEV();
                return id;
            }
        };
    }
    function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
        };
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has1 = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has1(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root1, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root1, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root1, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root1.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) injectedHook.onCommitFiberRoot(rendererID, root1, priorityLevel, didError);
            else injectedHook.onCommitFiberRoot(rendererID, root1, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
                return NormalPriority$1;
            case Scheduler_LowPriority:
                return LowPriority$1;
            case Scheduler_IdlePriority:
                return IdlePriority$1;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
                return Scheduler_NormalPriority;
            case LowPriority$1:
                return Scheduler_LowPriority;
            case IdlePriority$1:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options1) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options1);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                    for(; i < _queue.length; i++){
                        var callback = _queue[i];
                        do callback = callback(_isSync2);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error4) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error4;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set1) {
        var array = [];
        set1.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current2 = workInProgress.alternate;
        if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current2 = workInProgress.alternate;
            if (current2 !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {
    };
    var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            } finally{
                reenableLogs();
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    reenableLogs();
                }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                new ctor(props, context); // eslint-disable-line no-new
            } finally{
                reenableLogs();
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current3, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current3, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error("Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current3, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current3 !== null && current3.ref !== null && typeof current3.ref === 'function' && current3.ref._stringRef === stringRef) return current3.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current3 = newFiber.alternate;
            if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current3, textContent, lanes) {
            if (current3 === null || current3.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current3, element, lanes) {
            if (current3 !== null) {
                if (current3.elementType === element.type || isCompatibleFamilyForHotReloading(current3, element)) {
                    // Move based on index
                    var existing = useFiber(current3, element.props);
                    existing.ref = coerceRef(returnFiber, current3, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current3, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current3, portal, lanes) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current3, fragment, lanes, key) {
            if (current3 === null || current3.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current3, workInProgress) {
        if (!(current3 === null || workInProgress.child === current3.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*  */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    function getIsHydrating() {
        return isHydrating;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {
    };
    function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
        return mutableSource._workInProgressVersionPrimary;
    }
    function setWorkInProgressVersion(mutableSource, version) {
        mutableSource._workInProgressVersionPrimary = version;
        workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
        if (mutableSource._currentPrimaryRenderer == null) mutableSource._currentPrimaryRenderer = rendererSigil$1;
        else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
    } // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    didWarnAboutUseOpaqueIdentifier = {
    };
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current3, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current3 !== null && current3.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current3, workInProgress, lanes) {
        workInProgress.updateQueue = current3.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current3.lanes = removeLanes(current3.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) nextCurrentHook = current3.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current4 = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current4.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current4.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current4.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current4.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function readFromUnsubcribedMutableSource(root1, source, getSnapshot) {
        warnAboutMultipleRenderersDEV(source);
        var getVersion = source._getVersion;
        var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?
        var isSafeToReadFromSource = false; // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
        else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root1.mutableReadLanes);
            if (isSafeToReadFromSource) // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version);
        }
        if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            if (typeof snapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            return snapshot;
        } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root1 = getWorkInProgressRoot();
        if (!(root1 !== null)) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const
        var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root1, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
        }; // Sync the values needed by our subscription handler after each commit.
        dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.
            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                if (typeof maybeNewSnapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } // If the source mutated between render and now,
                // there may be state updates already scheduled from the old source.
                // Entangle the updates so that they render in the same batch.
                markRootEntangled(root1, root1.mutableReadLanes);
            }
        }, [
            getSnapshot,
            source,
            subscribe
        ]); // If we got a new source or subscribe function, re-subscribe in a passive effect.
        dispatcher.useEffect(function() {
            var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } catch (error4) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function() {
                        throw error4;
                    });
                }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            if (typeof unsubscribe !== 'function') error('Mutable source subscribe function must return an unsubscribe function.');
            return unsubscribe;
        }, [
            source,
            subscribe
        ]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root1, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
            refs: {
                getSnapshot: getSnapshot,
                setSnapshot: null
            },
            source: source,
            subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        });
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
        // never changes.
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [
            start,
            isPending
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
        }
    }
    function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
                if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                    setId(makeId());
                }, undefined, null);
            }
            return id;
        } else {
            var _id = makeId();
            mountState(_id);
            return _id;
        }
    }
    function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
    }
    function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        }; // Append the update to the end of the list.
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error4) {
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current4, workInProgress, nextChildren, renderLanes1) {
        if (current4 === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, nextChildren, renderLanes1);
    }
    function forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, null, renderLanes1); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
    }
    function updateForwardRef(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (current4 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current4, workInProgress, resolvedType, nextProps, updateLanes, renderLanes1);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes1);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
        var currentChild = current4.child; // This is always exactly one child
        if (!includesSomeLane(updateLanes, renderLanes1)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current4.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
            }
        }
        if (current4 !== null) {
            var prevProps = current4.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current4.ref === workInProgress.ref && workInProgress.type === current4.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes1, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current4.lanes;
                    return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1);
    }
    function updateOffscreenComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current4 !== null ? current4.memoizedState : null;
        if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Figure out what we should do in Blocking mode.
                var nextState = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes1);
            } else if (!includesSomeLane(renderLanes1, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes1);
                } else nextBaseLanes = renderLanes1;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                markSpawnedWork(OffscreenLane);
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes
                };
                workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes1;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes1); // Since we're not hidden anymore, reset the state
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes1;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMode(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateProfiler(current4, workInProgress, renderLanes1) {
        workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function markRef(current4, workInProgress) {
        var ref = workInProgress.ref;
        if (current4 === null && ref !== null || current4 !== null && current4.ref !== ref) // Schedule a Ref effect
        workInProgress.flags |= Ref;
    }
    function updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateClassComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current4 !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current4.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
            shouldUpdate = true;
        } else if (current4 === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        else shouldUpdate = updateClassInstance(current4, workInProgress, Component, nextProps, renderLanes1);
        var nextUnitOfWork = finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current4, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    instance.render();
                } finally{
                    reenableLogs();
                }
            }
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current4 !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root1 = workInProgress.stateNode;
        if (root1.pendingContext) pushTopLevelContextObject(workInProgress, root1.pendingContext, root1.pendingContext !== root1.context);
        else if (root1.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root1.context, false);
        pushHostContainer(workInProgress, root1.containerInfo);
    }
    function updateHostRoot(current4, workInProgress, renderLanes1) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current4 !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current4, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes1);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var root1 = workInProgress.stateNode;
        if (root1.hydrate && enterHydrationState(workInProgress)) {
            var mutableSourceEagerHydrationData = root1.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) for(var i = 0; i < mutableSourceEagerHydrationData.length; i += 2){
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version);
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current4, workInProgress, renderLanes1) {
        pushHostContext(workInProgress);
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current4 !== null ? current4.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current4, workInProgress);
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateHostText(current4, workInProgress) {
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes1) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes1);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes1) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes1) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes1);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes1);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
                } finally{
                    reenableLogs();
                }
            }
            reconcileChildren(null, workInProgress, value, renderLanes1);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes1) {
        return {
            baseLanes: renderLanes1
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes1) {
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes1)
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current4, workInProgress, renderLanes1) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current4 !== null) {
            var suspenseState = current4.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current4, renderLanes1) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current4.childLanes, renderLanes1);
    }
    function updateSuspenseComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current4)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current4 === null || current4.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current4 === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                // This is a CPU-bound tree. Skip this tree and show a placeholder to
                // unblock the surrounding content. Then immediately retry after the
                // initial commit.
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var _primaryChildFragment = workInProgress.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                // get it started back up to attempt the next item. While in terms of
                // priority this work has the same priority as this current render, it's
                // not part of the same transition once the transition has committed. If
                // it's sync, we still want to yield so that it can be painted.
                // Conceptually, this is really the same as pinging. We can use any
                // RetryLane even if it's the one currently rendering since we're leaving
                // it behind on this node.
                workInProgress.lanes = SomeRetryLane;
                markSpawnedWork(SomeRetryLane);
                return _fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes1);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current4.memoizedState;
            if (prevState !== null) {
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes1);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current4.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes1);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren3, renderLanes1);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes1);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current4.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes1);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren5, renderLanes1);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes1, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current4, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current4, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current4, workInProgress, primaryChildren, renderLanes1) {
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & BlockingMode) === NoMode) primaryChildFragment.lanes = renderLanes1;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current4, workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & BlockingMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
                workInProgress.firstEffect = primaryChildFragment.firstEffect;
                workInProgress.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
            } else // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null;
        } else primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes1) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes1);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes1);
        scheduleWorkOnParentPath(fiber.return, renderLanes1);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes1) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderLanes1);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes1);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index1) {
        var isArray1 = Array.isArray(childSlot);
        var isIterable = !isArray1 && typeof getIteratorFn(childSlot) === 'function';
        if (isArray1 || isIterable) {
            var type = isArray1 ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index1, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current4 !== null && (current4.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes1);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current4, workInProgress, renderLanes1) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current4 === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current4, workInProgress, renderLanes1) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderLanes1);
        }
        var newChildren = newProps.children;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current4, workInProgress, renderLanes1) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes1);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1) {
        if (current4 !== null) // Reuse previous dependencies
        workInProgress.dependencies = current4.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes1, workInProgress.childLanes)) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current4, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current4, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current4.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current4;
            returnFiber.lastEffect = current4;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current4;
        current4.nextEffect = null;
        current4.flags = Deletion;
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current4, workInProgress, renderLanes1) {
        var updateLanes = workInProgress.lanes;
        if (workInProgress._debugNeedsRemount && current4 !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current4, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current4 !== null) {
            var oldProps = current4.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current4.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (!includesSomeLane(renderLanes1, updateLanes)) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (hasChildWork) workInProgress.flags |= Update;
                         // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,
                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildLanes = primaryChildFragment.childLanes;
                            if (includesSomeLane(renderLanes1, primaryChildLanes)) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current4, workInProgress, renderLanes1);
                            else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current4.flags & DidCapture) !== NoFlags;
                        var _hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                            renderState.lastEffect = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current4, workInProgress, renderLanes1);
                }
                return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
            else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current4, workInProgress, workInProgress.type, renderLanes1);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current4, workInProgress, elementType, updateLanes, renderLanes1);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current4, workInProgress, _Component, resolvedProps, renderLanes1);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current4, workInProgress, _Component2, _resolvedProps, renderLanes1);
            case HostRoot:
                return updateHostRoot(current4, workInProgress, renderLanes1);
            case HostComponent:
                return updateHostComponent(current4, workInProgress, renderLanes1);
            case HostText:
                return updateHostText(current4, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current4, workInProgress, renderLanes1);
            case HostPortal:
                return updatePortalComponent(current4, workInProgress, renderLanes1);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current4, workInProgress, type, _resolvedProps2, renderLanes1);
            case Fragment:
                return updateFragment(current4, workInProgress, renderLanes1);
            case Mode:
                return updateMode(current4, workInProgress, renderLanes1);
            case Profiler:
                return updateProfiler(current4, workInProgress, renderLanes1);
            case ContextProvider:
                return updateContextProvider(current4, workInProgress, renderLanes1);
            case ContextConsumer:
                return updateContextConsumer(current4, workInProgress, renderLanes1);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current4, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes1);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current4, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes1);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current4, workInProgress, _Component3, _resolvedProps4, renderLanes1);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current4, workInProgress, renderLanes1);
            case LegacyHiddenComponent:
                return updateLegacyHiddenComponent(current4, workInProgress, renderLanes1);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(workInProgress) {
    };
    updateHostComponent$1 = function(current4, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current4.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current4, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current4, workInProgress, renderLanes1) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current4 === null || current4.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (!fiberRoot.hydrate) // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current4 !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current4, workInProgress, type, newProps, rootContainerInstance);
                    if (current4.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current4 && workInProgress.stateNode != null) {
                    var oldText = current4.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current4, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes1; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current4 === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current4.memoizedState;
                    prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current4 === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                if (current4 === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current4 === null || (current4.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderLanes1); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating()) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes1 !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                if (current4 !== null) {
                    var _nextState = workInProgress.memoizedState;
                    var _prevState = current4.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    var nextIsHidden = _nextState !== null;
                    if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') workInProgress.flags |= Update;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderLanes1) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if (!((_flags & DidCapture) === NoFlags)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error4 = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error4 != null && error4._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error4); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error4 = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error4);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logCapturedError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root1, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root1.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root1.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root1, wakeable, lanes);
            wakeable.then(ping, ping);
        }
    }
    function throwException(root1, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(wakeable);
                        _workInProgress.updateQueue = updateQueue;
                    } else wakeables.add(wakeable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.flags |= DidCapture;
                        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(NoTimestamp, SyncLane);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root1, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function(current4, instance) {
        instance.props = current4.memoizedProps;
        instance.state = current4.memoizedState;
        instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current4, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current4, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current4, unmountError);
        }
    }
    function safelyDetachRef(current4) {
        var ref = current4.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current4, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current4, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error4 = clearCaughtError();
            captureCommitPhaseError(current4, error4);
        }
    }
    function commitBeforeMutationLifeCycles(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.flags & Snapshot) {
                    if (current4 !== null) {
                        var prevProps = current4.memoizedProps;
                        var prevState = current4.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                }
                return;
            case HostRoot:
                if (finishedWork.flags & Snapshot) {
                    var root1 = finishedWork.stateNode;
                    clearContainer(root1.containerInfo);
                }
                return;
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
            }while (effect !== firstEffect)
        }
    }
    function commitLifeCycles(finishedRoot, current4, finishedWork, committedLanes) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                schedulePassiveEffects(finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (current4 === null) {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current4.memoizedProps : resolveDefaultProps(finishedWork.type, current4.memoizedProps);
                        var prevState = current4.memoizedState; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current4 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime1 = getCommitTime();
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current4 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime1, finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current4) {
        var currentRef = current4.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current4, renderPriorityLevel) {
        onCommitUnmount(current4);
        switch(current4.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current4.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                            if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) enqueuePendingPassiveHookEffectUnmount(current4, effect);
                                else safelyCallDestroy(current4, destroy);
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current4);
                var instance = current4.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current4, instance);
                return;
            case HostComponent:
                safelyDetachRef(current4);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current4);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root2;
        while(true){
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root2) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root2) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        fiber._debugOwner = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current4, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current4; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current4) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current4) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current4, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current4);
        var alternate = current4.alternate;
        detachFiberMutation(current4);
        if (alternate !== null) detachFiberMutation(alternate);
    }
    function commitWork(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current4 !== null ? current4.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current4 !== null ? current4.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
            markCommitTimeOfFallback();
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current4 = finishedWork.alternate;
            if (current4 !== null) {
                var prevState = current4.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    if (wakeable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current5, finishedWork) {
        if (current5 !== null) {
            var oldState = current5.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
            }
        }
        return false;
    }
    function commitResetTextContent(current5) {
        resetTextContent(current5.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor$1('selector.role');
        TEST_NAME_TYPE = symbolFor$1('selector.test_id');
        TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RetryAfterError = /*       */ 64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.
        var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // See `requestUpdateLane` for explanation of `currentEventWipLanes`
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
        } // Mark that the root has a pending update.
        markRootUpdated(root2, lane, eventTime);
        if (root2 === workInProgressRoot) {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root2, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root2);
            } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Set([
                    root2
                ]);
                else rootsWithPendingDiscreteUpdates.add(root2);
            } // Schedule other updates after in case the callback is sync.
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.
        mostRecentlyUpdatedRoot = root2;
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
        } else return null;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root3, currentTime) {
        var existingCallbackNode = root3.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root3, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root3.callbackNode = null;
                root3.callbackPriority = NoLanePriority;
            }
            return;
        } // Check if there's an existing task. We may be able to reuse it.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) // The priority hasn't changed. We can reuse the existing task. Exit.
            return;
             // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.
            cancelCallback(existingCallbackNode);
        } // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        else if (newCallbackPriority === SyncBatchedLanePriority) newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
        else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
        }
        root3.callbackPriority = newCallbackPriority;
        root3.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root3) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root3.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root3.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
        var exitStatus = renderRootConcurrent(root3, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // So we'll throw out the current work and restart.
        prepareFreshStack(root3, NoLanes);
        else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.
                if (root3.hydrate) {
                    root3.hydrate = false;
                    clearContainer(root3.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.
                lanes = getLanesToRetrySynchronouslyOnError(root3);
                if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
        }
        ensureRootIsScheduled(root3, now());
        if (root3.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root3);
        return null;
    }
    function finishConcurrentRender(root3, exitStatus, lanes) {
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root3);
                break;
            case RootSuspended:
                markRootSuspended$1(root3, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root3, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root3.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root3, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root3);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root3);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root3);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    }
    function markRootSuspended$1(root3, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root3, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root3) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // Note that this only happens when part of the tree is rendered
                // concurrently. If the whole tree is rendered synchronously, then there
                // are no interleaved events.
                lanes = getNextLanes(root3, lanes);
                exitStatus = renderRootSync(root3, lanes);
            }
        } else {
            lanes = getNextLanes(root3, NoLanes);
            exitStatus = renderRootSync(root3, lanes);
        }
        if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.
            if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root3.current.alternate;
        root3.finishedWork = finishedWork;
        root3.finishedLanes = lanes;
        commitRoot(root3); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root3, now());
        return null;
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root3) {
                markDiscreteUpdatesExpired(root3);
                ensureRootIsScheduled(root3, now());
            });
        } // Now flush the immediate queue.
        flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            return fn(a);
        }
        executionContext |= BatchedContext;
        try {
            if (fn) return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            else return undefined;
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root3, lanes) {
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        var timeoutHandle = root3.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root3.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root3;
        workInProgress = createWorkInProgress(root3.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root3, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root3) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root3.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) return RootIncomplete;
        else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current5 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current5 = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current5, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current5, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = completedWork.firstEffect;
                    if (completedWork.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                        returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (flags > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork;
                        else returnFiber.firstEffect = completedWork;
                        returnFiber.lastEffect = completedWork;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
    }
    function resetChildLanes(completedWork) {
        if (// to switch statement in `completeWork`.
        (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildLanes = NoLanes; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
            }
        }
        completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root3) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root3, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root3.finishedWork;
        var lanes = root3.finishedLanes;
        if (finishedWork === null) return null;
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        if (!(finishedWork !== root3.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root3.callbackNode = null; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root3, remainingLanes); // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.
        if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) rootsWithPendingDiscreteUpdates.delete(root3);
        }
        if (root3 === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // Get the list of effects.
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error5 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error5);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null) // We no longer need to track the active instance fiber
            focusedInstanceHandle = null;
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            resetAfterCommit(root3.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root3.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root3.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) detachFiberAfterEffects(nextEffect);
                nextEffect = nextNextEffect;
            }
        } // Read this again, since an effect might have updated it
        remainingLanes = root3.pendingLanes; // Check if there's remaining work on this root
        if (remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
            }
            schedulePendingInteractions(root3, remainingLanes);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root3, lanes);
        if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root3 === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root3, now());
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var current6 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
                } else // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current6, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current6, nextEffect);
                resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root3, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) commitResetTextContent(nextEffect);
            if (flags & Ref) {
                var current7 = nextEffect.alternate;
                if (current7 !== null) commitDetachRef(current7);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch(primaryFlags){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.flags &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.flags &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.flags &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.flags &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root3, nextEffect);
                    break;
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root3, committedLanes) {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
                var current8 = nextEffect.alternate;
                commitLifeCycles(root3, current8, nextEffect);
            }
            if (flags & Ref) commitAttachRef(nextEffect);
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
        return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.flags |= PassiveUnmountPendingDev;
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root3 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root3); // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for(var i = 0; i < unmountEffects.length; i += 2){
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.flags &= ~PassiveUnmountPendingDev;
            if (typeof destroy === 'function') {
                setCurrentFiber(fiber);
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    if (!(fiber !== null)) throw Error("Should be working on an effect.");
                    var error6 = clearCaughtError();
                    captureCommitPhaseError(fiber, error6);
                }
                resetCurrentFiber();
            }
        } // Second pass: Create new passive effects.
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for(var _i = 0; _i < mountEffects.length; _i += 2){
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            setCurrentFiber(_fiber);
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            if (hasCaughtError()) {
                if (!(_fiber !== null)) throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var effect = root3.current.firstEffect;
        while(effect !== null){
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC
            effect.nextEffect = null;
            if (effect.flags & Deletion) detachFiberAfterEffects(effect);
            effect = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root3, lanes);
        isFlushingPassiveEffects = false;
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error7) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error7;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error7) {
        var errorInfo = createCapturedValue(error7, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, SyncLane);
        }
    }
    function captureCommitPhaseError(sourceFiber, error7) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error7);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error7);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error7, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root3 !== null) {
                        markRootUpdated(root3, SyncLane, eventTime);
                        ensureRootIsScheduled(root3, eventTime);
                        schedulePendingInteractions(root3, SyncLane);
                    } else {
                        // This component has already been unmounted.
                        // We can't schedule any follow up work for the root because the fiber is already unmounted,
                        // but we can still call the log-only boundary so the error isn't swallowed.
                        //
                        // TODO This is only a temporary bandaid for the old reconciler fork.
                        // We can delete this special case once the new fork is merged.
                        if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) try {
                            instance.componentDidCatch(error7, errorInfo);
                        } catch (errorToIgnore) {
                        // This is kind of an edge case.
                        }
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root4, wakeable, pingedLanes) {
        var pingCache = root4.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root4, pingedLanes);
        if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root4, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root4, eventTime);
        schedulePendingInteractions(root4, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root4 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root4 !== null) {
            markRootUpdated(root4, retryLane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
            schedulePendingInteractions(root4, retryLane);
        }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        if (isFlushingPassiveEffects) ;
        else {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current9, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current9, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current9, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler");
            }
        }
    }
    function computeThreadID(root4, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root4.interactionThreadID;
    }
    function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            lane
        ];
        else spawnedWorkDuringRender.push(lane);
    }
    function scheduleInteractions(root4, lane, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root4.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lane);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root4, lane) {
        scheduleInteractions(root4, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root4, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root4.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root4.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lanes);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error7) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function() {
                        throw error7;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root4, committedLanes) {
        var remainingLanesAfterCommit = root4.pendingLanes;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root4.memoizedInteractions.size > 0) {
                // FIXME: More than one lane can finish in a single commit.
                var threadID = computeThreadID(root4, committedLanes);
                subscriber.onWorkStopped(root4.memoizedInteractions, threadID);
            }
        } catch (error7) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function() {
                throw error7;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root4.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error7) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority$1, function() {
                                throw error7;
                            });
                        }
                    });
                }
            });
        }
    } // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
    }
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root4, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root4, element) {
        if (root4.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root4, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root4, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current9, pendingProps) {
        var workInProgress1 = current9.alternate;
        if (workInProgress1 === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress1 = createFiber(current9.tag, pendingProps, current9.key, current9.mode);
            workInProgress1.elementType = current9.elementType;
            workInProgress1.type = current9.type;
            workInProgress1.stateNode = current9.stateNode;
            // DEV-only fields
            workInProgress1._debugID = current9._debugID;
            workInProgress1._debugSource = current9._debugSource;
            workInProgress1._debugOwner = current9._debugOwner;
            workInProgress1._debugHookTypes = current9._debugHookTypes;
            workInProgress1.alternate = current9;
            current9.alternate = workInProgress1;
        } else {
            workInProgress1.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress1.flags = NoFlags; // The effect list is no longer valid.
            workInProgress1.nextEffect = null;
            workInProgress1.firstEffect = null;
            workInProgress1.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress1.actualDuration = 0;
            workInProgress1.actualStartTime = -1;
        }
        workInProgress1.childLanes = current9.childLanes;
        workInProgress1.lanes = current9.lanes;
        workInProgress1.child = current9.child;
        workInProgress1.memoizedProps = current9.memoizedProps;
        workInProgress1.memoizedState = current9.memoizedState;
        workInProgress1.updateQueue = current9.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current9.dependencies;
        workInProgress1.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress1.sibling = current9.sibling;
        workInProgress1.index = current9.index;
        workInProgress1.ref = current9.ref;
        workInProgress1.selfBaseDuration = current9.selfBaseDuration;
        workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        workInProgress1._debugNeedsRemount = current9._debugNeedsRemount;
        switch(workInProgress1.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress1.type = resolveFunctionForHotReloading(current9.type);
                break;
            case ClassComponent:
                workInProgress1.type = resolveClassForHotReloading(current9.type);
                break;
            case ForwardRef:
                workInProgress1.type = resolveForwardRefForHotReloading(current9.type);
                break;
        }
        return workInProgress1;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress1, renderLanes1) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress1.flags &= Placement; // The effect list is no longer valid.
        workInProgress1.nextEffect = null;
        workInProgress1.firstEffect = null;
        workInProgress1.lastEffect = null;
        var current9 = workInProgress1.alternate;
        if (current9 === null) {
            // Reset to createFiber's initial values.
            workInProgress1.childLanes = NoLanes;
            workInProgress1.lanes = renderLanes1;
            workInProgress1.child = null;
            workInProgress1.memoizedProps = null;
            workInProgress1.memoizedState = null;
            workInProgress1.updateQueue = null;
            workInProgress1.dependencies = null;
            workInProgress1.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = 0;
            workInProgress1.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress1.childLanes = current9.childLanes;
            workInProgress1.lanes = current9.lanes;
            workInProgress1.child = current9.child;
            workInProgress1.memoizedProps = current9.memoizedProps;
            workInProgress1.memoizedState = current9.memoizedState;
            workInProgress1.updateQueue = current9.updateQueue; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current9.dependencies;
            workInProgress1.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = current9.selfBaseDuration;
            workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        }
        return workInProgress1;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error('Profiler must specify an "id" as a prop');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_OFFSCREEN_TYPE;
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.mutableSourceEagerHydrationData = null;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
        switch(tag){
            case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;
            case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root4 = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root4.current = uninitializedFiber;
        uninitializedFiber.stateNode = root4;
        initializeUpdateQueue(uninitializedFiber);
        return root4;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root4, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root4.mutableSourceEagerHydrationData == null) root4.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root4.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
        setCurrentUpdateLanePriority(priority);
        return fn();
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index1) {
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === path.length) {
            if (Array.isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index1 + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index1) {
        var oldKey = oldPath[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === oldPath.length) {
            var newKey = newPath[index1]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index1 + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index1, value) {
        if (index1 >= path.length) return value;
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index1 + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook1 = fiber.memoizedState;
        while(currentHook1 !== null && id > 0){
            currentHook1 = currentHook1.next;
            id--;
        }
        return currentHook1;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher1,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
        });
    }
    function ReactDOMRoot(container, options1) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options1);
    }
    function ReactDOMBlockingRoot(container, tag, options1) {
        this._internalRoot = createRootImpl(container, tag, options1);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root4 = this._internalRoot;
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root4.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root4.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root4, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root4 = this._internalRoot;
        var container = root4.containerInfo;
        updateContainer(null, root4, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options1) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options1 != null && options1.hydrate === true;
        var hydrationCallbacks = options1 != null && options1.hydrationOptions || null;
        var mutableSources = options1 != null && options1.hydrationOptions != null && options1.hydrationOptions.mutableSources || null;
        var root4 = createContainer(container, tag, hydrate);
        markContainerAsRoot(root4.current, container);
        var containerNodeType = container.nodeType;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root4, mutableSource);
        }
        return root4;
    }
    function createLegacyRoot(container, options1) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options1);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root4 = container._reactRootContainer;
        var fiberRoot;
        if (!root4) {
            // Initial mount
            root4 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"react":"3b2NM","object-assign":"3eM6x","scheduler":"5K4BD","scheduler/tracing":"6jIZo"}],"5K4BD":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"59Ipp"}],"59Ipp":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"6jIZo":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"2qFgQ"}],"2qFgQ":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}],"28u9I":[function(require,module,exports) {
var helpers = require("./node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _register = require("./Components/Shanghavi/register");
var _registerDefault = parcelHelpers.interopDefault(_register);
var _login = require("./Components/Shanghavi/login");
var _loginDefault = parcelHelpers.interopDefault(_login);
var _home = require("./Components/Shanghavi/home");
var _homeDefault = parcelHelpers.interopDefault(_home);
var _navbar = require("./Components/Shanghavi/Navbar");
var _navbarDefault = parcelHelpers.interopDefault(_navbar);
var _reactRouterDom = require("react-router-dom");
var _protected = require("./Components/Shanghavi/protected");
var _protectedDefault = parcelHelpers.interopDefault(_protected);
var _createTemplate = require("./Components/Shanghavi/CreateTemplate");
var _createTemplateDefault = parcelHelpers.interopDefault(_createTemplate);
var _viewTemplate = require("./Components/Shanghavi/ViewTemplate");
var _viewTemplateDefault = parcelHelpers.interopDefault(_viewTemplate);
var _reactToastify = require("react-toastify");
var _reactToastifyCss = require("react-toastify/dist/ReactToastify.css");
var _downloadPage = require("./Components/Shanghavi/DownloadPage");
var _downloadPageDefault = parcelHelpers.interopDefault(_downloadPage);
const App = ()=>{
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 17
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Switch, {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 19
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
        exact: true,
        path: "/",
        component: _viewTemplateDefault.default,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 20
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
        exact: true,
        path: "/register",
        component: _registerDefault.default,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 21
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
        exact: true,
        path: "/login",
        component: _loginDefault.default,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 22
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
        exact: true,
        path: "/home",
        component: _homeDefault.default,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 23
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
        exact: true,
        path: "/template",
        component: _createTemplateDefault.default,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 24
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
        exact: true,
        path: "/viewtemplate",
        component: _viewTemplateDefault.default,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 25
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
        exact: true,
        path: "/downloadtemplate",
        component: _downloadPageDefault.default,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 26
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement(_protectedDefault.default, {
        exact: true,
        path: "/Navbar",
        component: _navbarDefault.default,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 27
        },
        __self: undefined
    })), /*#__PURE__*/ _reactDefault.default.createElement(_reactToastify.ToastContainer, {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\App.jsx",
            lineNumber: 29
        },
        __self: undefined
    })));
};
_c = App;
exports.default = App;
var _c;
$RefreshReg$(_c, "App");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","./Components/Shanghavi/register":"11J0U","./Components/Shanghavi/login":"4Voyx","./Components/Shanghavi/home":"2IKEr","./Components/Shanghavi/Navbar":"57UFM","react-router-dom":"1PMSK","./Components/Shanghavi/protected":"iUPaQ","./Components/Shanghavi/CreateTemplate":"4miEf","react-toastify":"0AT5S","react-toastify/dist/ReactToastify.css":"2xfOi","./Components/Shanghavi/DownloadPage":"MUF1i","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","./node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f","./Components/Shanghavi/ViewTemplate":"2AMVw"}],"11J0U":[function(require,module,exports) {
var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _formik = require("formik");
var _yup = require("yup");
var _reactToastify = require("react-toastify");
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _s = $RefreshSig$();
const Register = (props)=>{
    _s();
    const formik = _formik.useFormik({
        initialValues: {
            name: '',
            email: '',
            password: '',
            confirmpassword: ''
        },
        validationSchema: _yup.object({
            name: _yup.string().strict().trim().required('This field is required'),
            email: _yup.string().email('Enter valid email address').strict().trim().required('This field is required'),
            password: _yup.string().strict().trim().min(5, "Minimum 5 characters required").max(10, "Maximum 10 characters only").required('This field is required'),
            confirmpassword: _yup.string().oneOf([
                _yup.ref('password'),
                null
            ], 'must be same').required('This field is required')
        }),
        onSubmit: (data)=>{
            console.log(data);
            _axiosDefault.default.post('http://localhost:5000/api/register', data).then((res)=>{
                alert("Registered successfuly");
                _reactToastify.toast.success("Registered sucessfully");
                props.history.push('./login');
            }).catch((err)=>{
                _reactToastify.toast.error(err.response.data);
            });
        }
    });
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "container mt-4",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 58
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "jumbotron",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 59
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("h4", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 61
        },
        __self: undefined
    }, "Register"), /*#__PURE__*/ _reactDefault.default.createElement("br", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 62
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement("form", {
        autoComplete: "off",
        onSubmit: formik.handleSubmit,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 63
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "form-group",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 64
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("label", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 65
        },
        __self: undefined
    }, "Name"), /*#__PURE__*/ _reactDefault.default.createElement("input", {
        name: "name",
        className: "form-control",
        type: "text",
        onChange: formik.handleChange,
        value: formik.values.name,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 66
        },
        __self: undefined
    }), formik.errors.name ? /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "text-danger",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 67
        },
        __self: undefined
    }, formik.errors.name) : null), /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "form-group",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 70
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("label", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 71
        },
        __self: undefined
    }, "Email"), /*#__PURE__*/ _reactDefault.default.createElement("input", {
        name: "email",
        className: "form-control",
        type: "text",
        onChange: formik.handleChange,
        value: formik.values.email,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 72
        },
        __self: undefined
    }), formik.errors.email ? /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "text-danger",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 73
        },
        __self: undefined
    }, formik.errors.email) : null), /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "form-group",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 76
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("label", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 77
        },
        __self: undefined
    }, "Password"), /*#__PURE__*/ _reactDefault.default.createElement("input", {
        name: "password",
        className: "form-control",
        type: "text",
        onChange: formik.handleChange,
        value: formik.values.password,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 78
        },
        __self: undefined
    }), formik.errors.password ? /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "text-danger",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 79
        },
        __self: undefined
    }, formik.errors.password) : null), /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "form-group",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 82
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("label", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 83
        },
        __self: undefined
    }, "Confirm Password"), /*#__PURE__*/ _reactDefault.default.createElement("input", {
        name: "confirmpassword",
        className: "form-control",
        type: "text",
        onChange: formik.handleChange,
        value: formik.values.confirmpassword,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 84
        },
        __self: undefined
    }), formik.errors.confirmpassword ? /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "text-danger",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 85
        },
        __self: undefined
    }, formik.errors.confirmpassword) : null), /*#__PURE__*/ _reactDefault.default.createElement("br", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 87
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "d-flex justify-content-between",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 89
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("button", {
        className: "btn btn-dark",
        type: "submit",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 90
        },
        __self: undefined
    }, " Submit"), /*#__PURE__*/ _reactDefault.default.createElement("a", {
        href: "#",
        onClick: ()=>{
            window.location.href = 'login';
        },
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\register.jsx",
            lineNumber: 92
        },
        __self: undefined
    }, "Login"))))));
};
_s(Register, "B/4rI4IXClQ7sG7psKj+pOuRe5Q=", false, function() {
    return [_formik.useFormik];
});
_c = Register;
exports.default = Register;
var _c;
$RefreshReg$(_c, "Register");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","formik":"67atH","yup":"0BxMn","react-toastify":"0AT5S","axios":"7rA65","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"67atH":[function(require,module,exports) {
'use strict';
module.exports = require('./formik.cjs.development.js');

},{"./formik.cjs.development.js":"1GrZZ"}],"1GrZZ":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var React = require('react');
var isEqual = _interopDefault(require('react-fast-compare'));
var deepmerge = _interopDefault(require('deepmerge'));
var isPlainObject = _interopDefault(require('lodash/isPlainObject'));
var clone = _interopDefault(require('lodash/clone'));
var toPath = _interopDefault(require('lodash/toPath'));
var invariant = _interopDefault(require('tiny-warning'));
var hoistNonReactStatics = _interopDefault(require('hoist-non-react-statics'));
var cloneDeep = _interopDefault(require('lodash/cloneDeep'));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
/** @private is the value an empty array? */ var isEmptyArray = function isEmptyArray1(value) {
    return Array.isArray(value) && value.length === 0;
};
/** @private is the given object a Function? */ var isFunction = function isFunction1(obj) {
    return typeof obj === 'function';
};
/** @private is the given object an Object? */ var isObject = function isObject1(obj) {
    return obj !== null && typeof obj === 'object';
};
/** @private is the given object an integer? */ var isInteger = function isInteger1(obj) {
    return String(Math.floor(Number(obj))) === obj;
};
/** @private is the given object a string? */ var isString = function isString1(obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
};
/** @private is the given object a NaN? */ // eslint-disable-next-line no-self-compare
var isNaN$1 = function isNaN1(obj) {
    return obj !== obj;
};
/** @private Does a React component have exactly 0 children? */ var isEmptyChildren = function isEmptyChildren1(children) {
    return React.Children.count(children) === 0;
};
/** @private is the given object/value a promise? */ var isPromise = function isPromise1(value) {
    return isObject(value) && isFunction(value.then);
};
/** @private is the given object/value a type of synthetic event? */ var isInputEvent = function isInputEvent1(value) {
    return value && isObject(value) && isObject(value.target);
};
/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?Document} doc Defaults to current document.
 * @return {Element | null}
 * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js
 */ function getActiveElement(doc) {
    doc = doc || (typeof document !== 'undefined' ? document : undefined);
    if (typeof doc === 'undefined') return null;
    try {
        return doc.activeElement || doc.body;
    } catch (e) {
        return doc.body;
    }
}
/**
 * Deeply get a value from an object via its path.
 */ function getIn(obj, key, def, p) {
    if (p === void 0) p = 0;
    var path = toPath(key);
    while(obj && p < path.length)obj = obj[path[p++]];
    return obj === undefined ? def : obj;
}
/**
 * Deeply set a value from in object via it's path. If the value at `path`
 * has changed, return a shallow copy of obj with `value` set at `path`.
 * If `value` has not changed, return the original `obj`.
 *
 * Existing objects / arrays along `path` are also shallow copied. Sibling
 * objects along path retain the same internal js reference. Since new
 * objects / arrays are only created along `path`, we can test if anything
 * changed in a nested structure by comparing the object's reference in
 * the old and new object, similar to how russian doll cache invalidation
 * works.
 *
 * In earlier versions of this function, which used cloneDeep, there were
 * issues whereby settings a nested value would mutate the parent
 * instead of creating a new object. `clone` avoids that bug making a
 * shallow copy of the objects along the update path
 * so no object is mutated in place.
 *
 * Before changing this function, please read through the following
 * discussions.
 *
 * @see https://github.com/developit/linkstate
 * @see https://github.com/jaredpalmer/formik/pull/123
 */ function setIn(obj, path, value) {
    var res = clone(obj); // this keeps inheritance when obj is a class
    var resVal = res;
    var i = 0;
    var pathArray = toPath(path);
    for(; i < pathArray.length - 1; i++){
        var currentPath = pathArray[i];
        var currentObj = getIn(obj, pathArray.slice(0, i + 1));
        if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) resVal = resVal[currentPath] = clone(currentObj);
        else {
            var nextPath = pathArray[i + 1];
            resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {
            };
        }
    } // Return original object if new value is the same as current
    if ((i === 0 ? obj : resVal)[pathArray[i]] === value) return obj;
    if (value === undefined) delete resVal[pathArray[i]];
    else resVal[pathArray[i]] = value;
     // If the path array has a single element, the loop did not run.
    // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.
    if (i === 0 && value === undefined) delete res[pathArray[i]];
    return res;
}
/**
 * Recursively a set the same value for all keys and arrays nested object, cloning
 * @param object
 * @param value
 * @param visited
 * @param response
 */ function setNestedObjectValues(object, value, visited, response) {
    if (visited === void 0) visited = new WeakMap();
    if (response === void 0) response = {
    };
    for(var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++){
        var k = _Object$keys[_i];
        var val = object[k];
        if (isObject(val)) {
            if (!visited.get(val)) {
                visited.set(val, true); // In order to keep array values consistent for both dot path  and
                // bracket syntax, we need to check if this is an array so that
                // this will output  { friends: [true] } and not { friends: { "0": true } }
                response[k] = Array.isArray(val) ? [] : {
                };
                setNestedObjectValues(val, value, visited, response[k]);
            }
        } else response[k] = value;
    }
    return response;
}
var FormikContext = /*#__PURE__*/ React.createContext(undefined);
FormikContext.displayName = 'FormikContext';
var FormikProvider = FormikContext.Provider;
var FormikConsumer = FormikContext.Consumer;
function useFormikContext() {
    var formik = React.useContext(FormikContext);
    !!!formik && invariant(false, "Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.");
    return formik;
}
function formikReducer(state, msg) {
    switch(msg.type){
        case 'SET_VALUES':
            return _extends({
            }, state, {
                values: msg.payload
            });
        case 'SET_TOUCHED':
            return _extends({
            }, state, {
                touched: msg.payload
            });
        case 'SET_ERRORS':
            if (isEqual(state.errors, msg.payload)) return state;
            return _extends({
            }, state, {
                errors: msg.payload
            });
        case 'SET_STATUS':
            return _extends({
            }, state, {
                status: msg.payload
            });
        case 'SET_ISSUBMITTING':
            return _extends({
            }, state, {
                isSubmitting: msg.payload
            });
        case 'SET_ISVALIDATING':
            return _extends({
            }, state, {
                isValidating: msg.payload
            });
        case 'SET_FIELD_VALUE':
            return _extends({
            }, state, {
                values: setIn(state.values, msg.payload.field, msg.payload.value)
            });
        case 'SET_FIELD_TOUCHED':
            return _extends({
            }, state, {
                touched: setIn(state.touched, msg.payload.field, msg.payload.value)
            });
        case 'SET_FIELD_ERROR':
            return _extends({
            }, state, {
                errors: setIn(state.errors, msg.payload.field, msg.payload.value)
            });
        case 'RESET_FORM':
            return _extends({
            }, state, msg.payload);
        case 'SET_FORMIK_STATE':
            return msg.payload(state);
        case 'SUBMIT_ATTEMPT':
            return _extends({
            }, state, {
                touched: setNestedObjectValues(state.values, true),
                isSubmitting: true,
                submitCount: state.submitCount + 1
            });
        case 'SUBMIT_FAILURE':
            return _extends({
            }, state, {
                isSubmitting: false
            });
        case 'SUBMIT_SUCCESS':
            return _extends({
            }, state, {
                isSubmitting: false
            });
        default:
            return state;
    }
} // Initial empty states // objects
var emptyErrors = {
};
var emptyTouched = {
};
function useFormik(_ref) {
    var _ref$validateOnChange = _ref.validateOnChange, validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange, _ref$validateOnBlur = _ref.validateOnBlur, validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur, _ref$validateOnMount = _ref.validateOnMount, validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount, isInitialValid = _ref.isInitialValid, _ref$enableReinitiali = _ref.enableReinitialize, enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali, onSubmit = _ref.onSubmit, rest = _objectWithoutPropertiesLoose(_ref, [
        "validateOnChange",
        "validateOnBlur",
        "validateOnMount",
        "isInitialValid",
        "enableReinitialize",
        "onSubmit"
    ]);
    var props = _extends({
        validateOnChange: validateOnChange,
        validateOnBlur: validateOnBlur,
        validateOnMount: validateOnMount,
        onSubmit: onSubmit
    }, rest);
    var initialValues = React.useRef(props.initialValues);
    var initialErrors = React.useRef(props.initialErrors || emptyErrors);
    var initialTouched = React.useRef(props.initialTouched || emptyTouched);
    var initialStatus = React.useRef(props.initialStatus);
    var isMounted = React.useRef(false);
    var fieldRegistry = React.useRef({
    });
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(function() {
        !(typeof isInitialValid === 'undefined') && invariant(false, 'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'); // eslint-disable-next-line
    }, []);
    React.useEffect(function() {
        isMounted.current = true;
        return function() {
            isMounted.current = false;
        };
    }, []);
    var _React$useReducer = React.useReducer(formikReducer, {
        values: props.initialValues,
        errors: props.initialErrors || emptyErrors,
        touched: props.initialTouched || emptyTouched,
        status: props.initialStatus,
        isSubmitting: false,
        isValidating: false,
        submitCount: 0
    }), state = _React$useReducer[0], dispatch = _React$useReducer[1];
    var runValidateHandler = React.useCallback(function(values, field) {
        return new Promise(function(resolve, reject) {
            var maybePromisedErrors = props.validate(values, field);
            if (maybePromisedErrors == null) // use loose null check here on purpose
            resolve(emptyErrors);
            else if (isPromise(maybePromisedErrors)) maybePromisedErrors.then(function(errors) {
                resolve(errors || emptyErrors);
            }, function(actualException) {
                console.warn("Warning: An unhandled error was caught during validation in <Formik validate />", actualException);
                reject(actualException);
            });
            else resolve(maybePromisedErrors);
        });
    }, [
        props.validate
    ]);
    /**
   * Run validation against a Yup schema and optionally run a function if successful
   */ var runValidationSchema = React.useCallback(function(values, field) {
        var validationSchema = props.validationSchema;
        var schema = isFunction(validationSchema) ? validationSchema(field) : validationSchema;
        var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);
        return new Promise(function(resolve, reject) {
            promise.then(function() {
                resolve(emptyErrors);
            }, function(err) {
                // Yup will throw a validation error if validation fails. We catch those and
                // resolve them into Formik errors. We can sniff if something is a Yup error
                // by checking error.name.
                // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string
                if (err.name === 'ValidationError') resolve(yupToFormErrors(err));
                else {
                    console.warn("Warning: An unhandled error was caught during validation in <Formik validationSchema />", err);
                    reject(err);
                }
            });
        });
    }, [
        props.validationSchema
    ]);
    var runSingleFieldLevelValidation = React.useCallback(function(field, value) {
        return new Promise(function(resolve) {
            return resolve(fieldRegistry.current[field].validate(value));
        });
    }, []);
    var runFieldLevelValidations = React.useCallback(function(values) {
        var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function(f) {
            return isFunction(fieldRegistry.current[f].validate);
        }); // Construct an array with all of the field validation functions
        var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function(f) {
            return runSingleFieldLevelValidation(f, getIn(values, f));
        }) : [
            Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')
        ]; // use special case ;)
        return Promise.all(fieldValidations).then(function(fieldErrorsList) {
            return fieldErrorsList.reduce(function(prev, curr, index) {
                if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') return prev;
                if (curr) prev = setIn(prev, fieldKeysWithValidation[index], curr);
                return prev;
            }, {
            });
        });
    }, [
        runSingleFieldLevelValidation
    ]); // Run all validations and return the result
    var runAllValidations = React.useCallback(function(values) {
        return Promise.all([
            runFieldLevelValidations(values),
            props.validationSchema ? runValidationSchema(values) : {
            },
            props.validate ? runValidateHandler(values) : {
            }
        ]).then(function(_ref2) {
            var fieldErrors = _ref2[0], schemaErrors = _ref2[1], validateErrors = _ref2[2];
            var combinedErrors = deepmerge.all([
                fieldErrors,
                schemaErrors,
                validateErrors
            ], {
                arrayMerge: arrayMerge
            });
            return combinedErrors;
        });
    }, [
        props.validate,
        props.validationSchema,
        runFieldLevelValidations,
        runValidateHandler,
        runValidationSchema
    ]); // Run all validations methods and update state accordingly
    var validateFormWithHighPriority = useEventCallback(function(values) {
        if (values === void 0) values = state.values;
        dispatch({
            type: 'SET_ISVALIDATING',
            payload: true
        });
        return runAllValidations(values).then(function(combinedErrors) {
            if (!!isMounted.current) {
                dispatch({
                    type: 'SET_ISVALIDATING',
                    payload: false
                });
                dispatch({
                    type: 'SET_ERRORS',
                    payload: combinedErrors
                });
            }
            return combinedErrors;
        });
    });
    React.useEffect(function() {
        if (validateOnMount && isMounted.current === true && isEqual(initialValues.current, props.initialValues)) validateFormWithHighPriority(initialValues.current);
    }, [
        validateOnMount,
        validateFormWithHighPriority
    ]);
    var resetForm = React.useCallback(function(nextState) {
        var values = nextState && nextState.values ? nextState.values : initialValues.current;
        var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {
        };
        var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {
        };
        var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;
        initialValues.current = values;
        initialErrors.current = errors;
        initialTouched.current = touched;
        initialStatus.current = status;
        var dispatchFn = function dispatchFn1() {
            dispatch({
                type: 'RESET_FORM',
                payload: {
                    isSubmitting: !!nextState && !!nextState.isSubmitting,
                    errors: errors,
                    touched: touched,
                    status: status,
                    values: values,
                    isValidating: !!nextState && !!nextState.isValidating,
                    submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === 'number' ? nextState.submitCount : 0
                }
            });
        };
        if (props.onReset) {
            var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);
            if (isPromise(maybePromisedOnReset)) maybePromisedOnReset.then(dispatchFn);
            else dispatchFn();
        } else dispatchFn();
    }, [
        props.initialErrors,
        props.initialStatus,
        props.initialTouched
    ]);
    React.useEffect(function() {
        if (isMounted.current === true && !isEqual(initialValues.current, props.initialValues)) {
            if (enableReinitialize) {
                initialValues.current = props.initialValues;
                resetForm();
            }
            if (validateOnMount) validateFormWithHighPriority(initialValues.current);
        }
    }, [
        enableReinitialize,
        props.initialValues,
        resetForm,
        validateOnMount,
        validateFormWithHighPriority
    ]);
    React.useEffect(function() {
        if (enableReinitialize && isMounted.current === true && !isEqual(initialErrors.current, props.initialErrors)) {
            initialErrors.current = props.initialErrors || emptyErrors;
            dispatch({
                type: 'SET_ERRORS',
                payload: props.initialErrors || emptyErrors
            });
        }
    }, [
        enableReinitialize,
        props.initialErrors
    ]);
    React.useEffect(function() {
        if (enableReinitialize && isMounted.current === true && !isEqual(initialTouched.current, props.initialTouched)) {
            initialTouched.current = props.initialTouched || emptyTouched;
            dispatch({
                type: 'SET_TOUCHED',
                payload: props.initialTouched || emptyTouched
            });
        }
    }, [
        enableReinitialize,
        props.initialTouched
    ]);
    React.useEffect(function() {
        if (enableReinitialize && isMounted.current === true && !isEqual(initialStatus.current, props.initialStatus)) {
            initialStatus.current = props.initialStatus;
            dispatch({
                type: 'SET_STATUS',
                payload: props.initialStatus
            });
        }
    }, [
        enableReinitialize,
        props.initialStatus,
        props.initialTouched
    ]);
    var validateField = useEventCallback(function(name) {
        // This will efficiently validate a single field by avoiding state
        // changes if the validation function is synchronous. It's different from
        // what is called when using validateForm.
        if (fieldRegistry.current[name] && isFunction(fieldRegistry.current[name].validate)) {
            var value = getIn(state.values, name);
            var maybePromise = fieldRegistry.current[name].validate(value);
            if (isPromise(maybePromise)) {
                // Only flip isValidating if the function is async.
                dispatch({
                    type: 'SET_ISVALIDATING',
                    payload: true
                });
                return maybePromise.then(function(x) {
                    return x;
                }).then(function(error) {
                    dispatch({
                        type: 'SET_FIELD_ERROR',
                        payload: {
                            field: name,
                            value: error
                        }
                    });
                    dispatch({
                        type: 'SET_ISVALIDATING',
                        payload: false
                    });
                });
            } else {
                dispatch({
                    type: 'SET_FIELD_ERROR',
                    payload: {
                        field: name,
                        value: maybePromise
                    }
                });
                return Promise.resolve(maybePromise);
            }
        } else if (props.validationSchema) {
            dispatch({
                type: 'SET_ISVALIDATING',
                payload: true
            });
            return runValidationSchema(state.values, name).then(function(x) {
                return x;
            }).then(function(error) {
                dispatch({
                    type: 'SET_FIELD_ERROR',
                    payload: {
                        field: name,
                        value: error[name]
                    }
                });
                dispatch({
                    type: 'SET_ISVALIDATING',
                    payload: false
                });
            });
        }
        return Promise.resolve();
    });
    var registerField = React.useCallback(function(name, _ref3) {
        var validate = _ref3.validate;
        fieldRegistry.current[name] = {
            validate: validate
        };
    }, []);
    var unregisterField = React.useCallback(function(name) {
        delete fieldRegistry.current[name];
    }, []);
    var setTouched = useEventCallback(function(touched, shouldValidate) {
        dispatch({
            type: 'SET_TOUCHED',
            payload: touched
        });
        var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;
        return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
    });
    var setErrors = React.useCallback(function(errors) {
        dispatch({
            type: 'SET_ERRORS',
            payload: errors
        });
    }, []);
    var setValues = useEventCallback(function(values, shouldValidate) {
        var resolvedValues = isFunction(values) ? values(state.values) : values;
        dispatch({
            type: 'SET_VALUES',
            payload: resolvedValues
        });
        var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;
        return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();
    });
    var setFieldError = React.useCallback(function(field, value) {
        dispatch({
            type: 'SET_FIELD_ERROR',
            payload: {
                field: field,
                value: value
            }
        });
    }, []);
    var setFieldValue = useEventCallback(function(field, value, shouldValidate) {
        dispatch({
            type: 'SET_FIELD_VALUE',
            payload: {
                field: field,
                value: value
            }
        });
        var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;
        return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value)) : Promise.resolve();
    });
    var executeChange = React.useCallback(function(eventOrTextValue, maybePath) {
        // By default, assume that the first argument is a string. This allows us to use
        // handleChange with React Native and React Native Web's onChangeText prop which
        // provides just the value of the input.
        var field = maybePath;
        var val = eventOrTextValue;
        var parsed; // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),
        // so we handle like we would a normal HTML change event.
        if (!isString(eventOrTextValue)) {
            // If we can, persist the event
            // @see https://reactjs.org/docs/events.html#event-pooling
            if (eventOrTextValue.persist) eventOrTextValue.persist();
            var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;
            var type = target.type, name = target.name, id = target.id, value = target.value, checked = target.checked, outerHTML = target.outerHTML, options = target.options, multiple = target.multiple;
            field = maybePath ? maybePath : name ? name : id;
            if (!field && true) warnAboutMissingIdentifier({
                htmlContent: outerHTML,
                documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',
                handlerName: 'handleChange'
            });
            val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? '' : parsed) : /checkbox/.test(type) ? getValueForCheckbox(getIn(state.values, field), checked, value) : options && multiple ? getSelectedValues(options) : value;
        }
        if (field) // Set form fields by name
        setFieldValue(field, val);
    }, [
        setFieldValue,
        state.values
    ]);
    var handleChange = useEventCallback(function(eventOrPath) {
        if (isString(eventOrPath)) return function(event) {
            return executeChange(event, eventOrPath);
        };
        else executeChange(eventOrPath);
    });
    var setFieldTouched = useEventCallback(function(field, touched, shouldValidate) {
        if (touched === void 0) touched = true;
        dispatch({
            type: 'SET_FIELD_TOUCHED',
            payload: {
                field: field,
                value: touched
            }
        });
        var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;
        return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
    });
    var executeBlur = React.useCallback(function(e, path) {
        if (e.persist) e.persist();
        var _e$target = e.target, name = _e$target.name, id = _e$target.id, outerHTML = _e$target.outerHTML;
        var field = path ? path : name ? name : id;
        if (!field && true) warnAboutMissingIdentifier({
            htmlContent: outerHTML,
            documentationAnchorLink: 'handleblur-e-any--void',
            handlerName: 'handleBlur'
        });
        setFieldTouched(field, true);
    }, [
        setFieldTouched
    ]);
    var handleBlur = useEventCallback(function(eventOrString) {
        if (isString(eventOrString)) return function(event) {
            return executeBlur(event, eventOrString);
        };
        else executeBlur(eventOrString);
    });
    var setFormikState = React.useCallback(function(stateOrCb) {
        if (isFunction(stateOrCb)) dispatch({
            type: 'SET_FORMIK_STATE',
            payload: stateOrCb
        });
        else dispatch({
            type: 'SET_FORMIK_STATE',
            payload: function payload() {
                return stateOrCb;
            }
        });
    }, []);
    var setStatus = React.useCallback(function(status) {
        dispatch({
            type: 'SET_STATUS',
            payload: status
        });
    }, []);
    var setSubmitting = React.useCallback(function(isSubmitting) {
        dispatch({
            type: 'SET_ISSUBMITTING',
            payload: isSubmitting
        });
    }, []);
    var submitForm = useEventCallback(function() {
        dispatch({
            type: 'SUBMIT_ATTEMPT'
        });
        return validateFormWithHighPriority().then(function(combinedErrors) {
            // In case an error was thrown and passed to the resolved Promise,
            // `combinedErrors` can be an instance of an Error. We need to check
            // that and abort the submit.
            // If we don't do that, calling `Object.keys(new Error())` yields an
            // empty array, which causes the validation to pass and the form
            // to be submitted.
            var isInstanceOfError = combinedErrors instanceof Error;
            var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;
            if (isActuallyValid) {
                // Proceed with submit...
                //
                // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and
                // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.
                // This would be fine in simple cases, but make it impossible to disable submit
                // buttons where people use callbacks or promises as side effects (which is basically
                // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,
                //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.
                // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle
                // cleanup of isSubmitting on behalf of the consumer.
                var promiseOrUndefined;
                try {
                    promiseOrUndefined = executeSubmit(); // Bail if it's sync, consumer is responsible for cleaning up
                    // via setSubmitting(false)
                    if (promiseOrUndefined === undefined) return;
                } catch (error) {
                    throw error;
                }
                return Promise.resolve(promiseOrUndefined).then(function(result) {
                    if (!!isMounted.current) dispatch({
                        type: 'SUBMIT_SUCCESS'
                    });
                    return result;
                })["catch"](function(_errors) {
                    if (!!isMounted.current) {
                        dispatch({
                            type: 'SUBMIT_FAILURE'
                        }); // This is a legit error rejected by the onSubmit fn
                        // so we don't want to break the promise chain
                        throw _errors;
                    }
                });
            } else if (!!isMounted.current) {
                // ^^^ Make sure Formik is still mounted before updating state
                dispatch({
                    type: 'SUBMIT_FAILURE'
                }); // throw combinedErrors;
                if (isInstanceOfError) throw combinedErrors;
            }
            return;
        });
    });
    var handleSubmit = useEventCallback(function(e) {
        if (e && e.preventDefault && isFunction(e.preventDefault)) e.preventDefault();
        if (e && e.stopPropagation && isFunction(e.stopPropagation)) e.stopPropagation();
         // Warn if form submission is triggered by a <button> without a
        // specified `type` attribute during development. This mitigates
        // a common gotcha in forms with both reset and submit buttons,
        // where the dev forgets to add type="button" to the reset button.
        if (typeof document !== 'undefined') {
            // Safely get the active element (works with IE)
            var activeElement = getActiveElement();
            if (activeElement !== null && activeElement instanceof HTMLButtonElement) !(activeElement.attributes && activeElement.attributes.getNamedItem('type')) && invariant(false, 'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type="submit"`. If this is not a submit button, please add `type="button"`.');
        }
        submitForm()["catch"](function(reason) {
            console.warn("Warning: An unhandled error was caught from submitForm()", reason);
        });
    });
    var imperativeMethods = {
        resetForm: resetForm,
        validateForm: validateFormWithHighPriority,
        validateField: validateField,
        setErrors: setErrors,
        setFieldError: setFieldError,
        setFieldTouched: setFieldTouched,
        setFieldValue: setFieldValue,
        setStatus: setStatus,
        setSubmitting: setSubmitting,
        setTouched: setTouched,
        setValues: setValues,
        setFormikState: setFormikState,
        submitForm: submitForm
    };
    var executeSubmit = useEventCallback(function() {
        return onSubmit(state.values, imperativeMethods);
    });
    var handleReset = useEventCallback(function(e) {
        if (e && e.preventDefault && isFunction(e.preventDefault)) e.preventDefault();
        if (e && e.stopPropagation && isFunction(e.stopPropagation)) e.stopPropagation();
        resetForm();
    });
    var getFieldMeta = React.useCallback(function(name) {
        return {
            value: getIn(state.values, name),
            error: getIn(state.errors, name),
            touched: !!getIn(state.touched, name),
            initialValue: getIn(initialValues.current, name),
            initialTouched: !!getIn(initialTouched.current, name),
            initialError: getIn(initialErrors.current, name)
        };
    }, [
        state.errors,
        state.touched,
        state.values
    ]);
    var getFieldHelpers = React.useCallback(function(name) {
        return {
            setValue: function setValue(value, shouldValidate) {
                return setFieldValue(name, value, shouldValidate);
            },
            setTouched: function setTouched1(value, shouldValidate) {
                return setFieldTouched(name, value, shouldValidate);
            },
            setError: function setError(value) {
                return setFieldError(name, value);
            }
        };
    }, [
        setFieldValue,
        setFieldTouched,
        setFieldError
    ]);
    var getFieldProps = React.useCallback(function(nameOrOptions) {
        var isAnObject = isObject(nameOrOptions);
        var name = isAnObject ? nameOrOptions.name : nameOrOptions;
        var valueState = getIn(state.values, name);
        var field = {
            name: name,
            value: valueState,
            onChange: handleChange,
            onBlur: handleBlur
        };
        if (isAnObject) {
            var type = nameOrOptions.type, valueProp = nameOrOptions.value, is = nameOrOptions.as, multiple = nameOrOptions.multiple;
            if (type === 'checkbox') {
                if (valueProp === undefined) field.checked = !!valueState;
                else {
                    field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));
                    field.value = valueProp;
                }
            } else if (type === 'radio') {
                field.checked = valueState === valueProp;
                field.value = valueProp;
            } else if (is === 'select' && multiple) {
                field.value = field.value || [];
                field.multiple = true;
            }
        }
        return field;
    }, [
        handleBlur,
        handleChange,
        state.values
    ]);
    var dirty = React.useMemo(function() {
        return !isEqual(initialValues.current, state.values);
    }, [
        initialValues.current,
        state.values
    ]);
    var isValid = React.useMemo(function() {
        return typeof isInitialValid !== 'undefined' ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;
    }, [
        isInitialValid,
        dirty,
        state.errors,
        props
    ]);
    var ctx = _extends({
    }, state, {
        initialValues: initialValues.current,
        initialErrors: initialErrors.current,
        initialTouched: initialTouched.current,
        initialStatus: initialStatus.current,
        handleBlur: handleBlur,
        handleChange: handleChange,
        handleReset: handleReset,
        handleSubmit: handleSubmit,
        resetForm: resetForm,
        setErrors: setErrors,
        setFormikState: setFormikState,
        setFieldTouched: setFieldTouched,
        setFieldValue: setFieldValue,
        setFieldError: setFieldError,
        setStatus: setStatus,
        setSubmitting: setSubmitting,
        setTouched: setTouched,
        setValues: setValues,
        submitForm: submitForm,
        validateForm: validateFormWithHighPriority,
        validateField: validateField,
        isValid: isValid,
        dirty: dirty,
        unregisterField: unregisterField,
        registerField: registerField,
        getFieldProps: getFieldProps,
        getFieldMeta: getFieldMeta,
        getFieldHelpers: getFieldHelpers,
        validateOnBlur: validateOnBlur,
        validateOnChange: validateOnChange,
        validateOnMount: validateOnMount
    });
    return ctx;
}
function Formik(props) {
    var formikbag = useFormik(props);
    var component = props.component, children = props.children, render = props.render, innerRef = props.innerRef; // This allows folks to pass a ref to <Formik />
    React.useImperativeHandle(innerRef, function() {
        return formikbag;
    });
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(function() {
        !!props.render && invariant(false, "<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>"); // eslint-disable-next-line
    }, []);
    return React.createElement(FormikProvider, {
        value: formikbag
    }, component ? React.createElement(component, formikbag) : render ? render(formikbag) : children ? isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? React.Children.only(children) : null : null);
}
function warnAboutMissingIdentifier(_ref4) {
    var htmlContent = _ref4.htmlContent, documentationAnchorLink = _ref4.documentationAnchorLink, handlerName = _ref4.handlerName;
    console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n    " + htmlContent + "\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#" + documentationAnchorLink + "\n  ");
}
/**
 * Transform Yup ValidationError to a more usable object
 */ function yupToFormErrors(yupError) {
    var errors = {
    };
    if (yupError.inner) {
        if (yupError.inner.length === 0) return setIn(errors, yupError.path, yupError.message);
        for(var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;){
            var _ref5;
            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref5 = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref5 = _i.value;
            }
            var err = _ref5;
            if (!getIn(errors, err.path)) errors = setIn(errors, err.path, err.message);
        }
    }
    return errors;
}
/**
 * Validate a yup schema.
 */ function validateYupSchema(values, schema, sync, context) {
    if (sync === void 0) sync = false;
    if (context === void 0) context = {
    };
    var validateData = prepareDataForValidation(values);
    return schema[sync ? 'validateSync' : 'validate'](validateData, {
        abortEarly: false,
        context: context
    });
}
/**
 * Recursively prepare values.
 */ function prepareDataForValidation(values) {
    var data = Array.isArray(values) ? [] : {
    };
    for(var k in values)if (Object.prototype.hasOwnProperty.call(values, k)) {
        var key = String(k);
        if (Array.isArray(values[key]) === true) data[key] = values[key].map(function(value) {
            if (Array.isArray(value) === true || isPlainObject(value)) return prepareDataForValidation(value);
            else return value !== '' ? value : undefined;
        });
        else if (isPlainObject(values[key])) data[key] = prepareDataForValidation(values[key]);
        else data[key] = values[key] !== '' ? values[key] : undefined;
    }
    return data;
}
/**
 * deepmerge array merging algorithm
 * https://github.com/KyleAMathews/deepmerge#combine-array
 */ function arrayMerge(target, source, options) {
    var destination = target.slice();
    source.forEach(function merge(e, i) {
        if (typeof destination[i] === 'undefined') {
            var cloneRequested = options.clone !== false;
            var shouldClone = cloneRequested && options.isMergeableObject(e);
            destination[i] = shouldClone ? deepmerge(Array.isArray(e) ? [] : {
            }, e, options) : e;
        } else if (options.isMergeableObject(e)) destination[i] = deepmerge(target[i], e, options);
        else if (target.indexOf(e) === -1) destination.push(e);
    });
    return destination;
}
/** Return multi select values based on an array of options */ function getSelectedValues(options) {
    return Array.from(options).filter(function(el) {
        return el.selected;
    }).map(function(el) {
        return el.value;
    });
}
/** Return the next value for a checkbox */ function getValueForCheckbox(currentValue, checked, valueProp) {
    // If the current value was a boolean, return a boolean
    if (typeof currentValue === 'boolean') return Boolean(checked);
     // If the currentValue was not a boolean we want to return an array
    var currentArrayOfValues = [];
    var isValueInArray = false;
    var index = -1;
    if (!Array.isArray(currentValue)) {
        // eslint-disable-next-line eqeqeq
        if (!valueProp || valueProp == 'true' || valueProp == 'false') return Boolean(checked);
    } else {
        // If the current value is already an array, use it
        currentArrayOfValues = currentValue;
        index = currentValue.indexOf(valueProp);
        isValueInArray = index >= 0;
    } // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values
    if (checked && valueProp && !isValueInArray) return currentArrayOfValues.concat(valueProp);
     // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values
    if (!isValueInArray) return currentArrayOfValues;
     // If the checkbox was unchecked and the value is in the array, remove the value and return the array
    return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));
} // React currently throws a warning when using useLayoutEffect on the server.
// To get around it, we can conditionally useEffect on the server (no-op) and
// useLayoutEffect in the browser.
// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? React.useLayoutEffect : React.useEffect;
function useEventCallback(fn) {
    var ref = React.useRef(fn); // we copy a ref to the callback scoped to the current state/props on each render
    useIsomorphicLayoutEffect(function() {
        ref.current = fn;
    });
    return React.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        return ref.current.apply(void 0, args);
    }, []);
}
function useField(propsOrFieldName) {
    var formik = useFormikContext();
    var getFieldProps = formik.getFieldProps, getFieldMeta = formik.getFieldMeta, getFieldHelpers = formik.getFieldHelpers, registerField = formik.registerField, unregisterField = formik.unregisterField;
    var isAnObject = isObject(propsOrFieldName); // Normalize propsOrFieldName to FieldHookConfig<Val>
    var props = isAnObject ? propsOrFieldName : {
        name: propsOrFieldName
    };
    var fieldName = props.name, validateFn = props.validate;
    React.useEffect(function() {
        if (fieldName) registerField(fieldName, {
            validate: validateFn
        });
        return function() {
            if (fieldName) unregisterField(fieldName);
        };
    }, [
        registerField,
        unregisterField,
        fieldName,
        validateFn
    ]);
    !formik && invariant(false, 'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component');
    !fieldName && invariant(false, 'Invalid field name. Either pass `useField` a string or an object containing a `name` key.');
    return [
        getFieldProps(props),
        getFieldMeta(fieldName),
        getFieldHelpers(fieldName)
    ];
}
function Field(_ref) {
    var validate = _ref.validate, name = _ref.name, render = _ref.render, children = _ref.children, is = _ref.as, component = _ref.component, props = _objectWithoutPropertiesLoose(_ref, [
        "validate",
        "name",
        "render",
        "children",
        "as",
        "component"
    ]);
    var _useFormikContext = useFormikContext(), formik = _objectWithoutPropertiesLoose(_useFormikContext, [
        "validate",
        "validationSchema"
    ]);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(function() {
        !!render && invariant(false, "<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"" + name + "\" render={({field, form}) => ...} /> with <Field name=\"" + name + "\">{({field, form, meta}) => ...}</Field>");
        !!(is && children && isFunction(children)) && invariant(false, 'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.');
        !!(component && children && isFunction(children)) && invariant(false, 'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.');
        !!(render && children && !isEmptyChildren(children)) && invariant(false, 'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'); // eslint-disable-next-line
    }, []);
    var registerField = formik.registerField, unregisterField = formik.unregisterField;
    React.useEffect(function() {
        registerField(name, {
            validate: validate
        });
        return function() {
            unregisterField(name);
        };
    }, [
        registerField,
        unregisterField,
        name,
        validate
    ]);
    var field = formik.getFieldProps(_extends({
        name: name
    }, props));
    var meta = formik.getFieldMeta(name);
    var legacyBag = {
        field: field,
        form: formik
    };
    if (render) return render(_extends({
    }, legacyBag, {
        meta: meta
    }));
    if (isFunction(children)) return children(_extends({
    }, legacyBag, {
        meta: meta
    }));
    if (component) {
        // This behavior is backwards compat with earlier Formik 0.9 to 1.x
        if (typeof component === 'string') {
            var innerRef = props.innerRef, rest = _objectWithoutPropertiesLoose(props, [
                "innerRef"
            ]);
            return React.createElement(component, _extends({
                ref: innerRef
            }, field, rest), children);
        } // We don't pass `meta` for backwards compat
        return React.createElement(component, _extends({
            field: field,
            form: formik
        }, props), children);
    } // default to input here so we can check for both `as` and `children` above
    var asElement = is || 'input';
    if (typeof asElement === 'string') {
        var _innerRef = props.innerRef, _rest = _objectWithoutPropertiesLoose(props, [
            "innerRef"
        ]);
        return React.createElement(asElement, _extends({
            ref: _innerRef
        }, field, _rest), children);
    }
    return React.createElement(asElement, _extends({
    }, field, props), children);
}
var Form = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    // iOS needs an "action" attribute for nice input: https://stackoverflow.com/a/39485162/406725
    // We default the action to "#" in case the preventDefault fails (just updates the URL hash)
    var action = props.action, rest = _objectWithoutPropertiesLoose(props, [
        "action"
    ]);
    var _action = action != null ? action : '#';
    var _useFormikContext = useFormikContext(), handleReset = _useFormikContext.handleReset, handleSubmit = _useFormikContext.handleSubmit;
    return React.createElement("form", Object.assign({
        onSubmit: handleSubmit,
        ref: ref,
        onReset: handleReset,
        action: _action
    }, rest));
});
Form.displayName = 'Form';
/**
 * A public higher-order component to access the imperative API
 */ function withFormik(_ref) {
    var _ref$mapPropsToValues = _ref.mapPropsToValues, mapPropsToValues = _ref$mapPropsToValues === void 0 ? function(vanillaProps) {
        var val = {
        };
        for(var k in vanillaProps)if (vanillaProps.hasOwnProperty(k) && typeof vanillaProps[k] !== 'function') // @todo TypeScript fix
        val[k] = vanillaProps[k];
        return val;
    } : _ref$mapPropsToValues, config = _objectWithoutPropertiesLoose(_ref, [
        "mapPropsToValues"
    ]);
    return function createFormik(Component) {
        var componentDisplayName = Component.displayName || Component.name || Component.constructor && Component.constructor.name || 'Component';
        /**
     * We need to use closures here for to provide the wrapped component's props to
     * the respective withFormik config methods.
     */ var C1 = /*#__PURE__*/ function(_React$Component) {
            _inheritsLoose(C2, _React$Component);
            function C2() {
                var _this;
                _this = _React$Component.apply(this, arguments) || this;
                _this.validate = function(values) {
                    return config.validate(values, _this.props);
                };
                _this.validationSchema = function() {
                    return isFunction(config.validationSchema) ? config.validationSchema(_this.props) : config.validationSchema;
                };
                _this.handleSubmit = function(values, actions) {
                    return config.handleSubmit(values, _extends({
                    }, actions, {
                        props: _this.props
                    }));
                };
                /**
         * Just avoiding a render callback for perf here
         */ _this.renderFormComponent = function(formikProps) {
                    return React.createElement(Component, Object.assign({
                    }, _this.props, formikProps));
                };
                return _this;
            }
            var _proto = C2.prototype;
            _proto.render = function render() {
                var _this$props = this.props, props = _objectWithoutPropertiesLoose(_this$props, [
                    "children"
                ]);
                return React.createElement(Formik, Object.assign({
                }, props, config, {
                    validate: config.validate && this.validate,
                    validationSchema: config.validationSchema && this.validationSchema,
                    initialValues: mapPropsToValues(this.props),
                    initialStatus: config.mapPropsToStatus && config.mapPropsToStatus(this.props),
                    initialErrors: config.mapPropsToErrors && config.mapPropsToErrors(this.props),
                    initialTouched: config.mapPropsToTouched && config.mapPropsToTouched(this.props),
                    onSubmit: this.handleSubmit,
                    children: this.renderFormComponent
                }));
            };
            return C2;
        }(React.Component);
        C1.displayName = "WithFormik(" + componentDisplayName + ")";
        return hoistNonReactStatics(C1, Component// cast type to ComponentClass (even if SFC)
        );
    };
}
/**
 * Connect any component to Formik context, and inject as a prop called `formik`;
 * @param Comp React Component
 */ function connect(Comp) {
    var C = function C1(props) {
        return React.createElement(FormikConsumer, null, function(formik) {
            !!!formik && invariant(false, "Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: " + Comp.name);
            return React.createElement(Comp, Object.assign({
            }, props, {
                formik: formik
            }));
        });
    };
    var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component'; // Assign Comp to C.WrappedComponent so we can access the inner component in tests
    // For example, <Field.WrappedComponent /> gets us <FieldInner/>
    C.WrappedComponent = Comp;
    C.displayName = "FormikConnect(" + componentDisplayName + ")";
    return hoistNonReactStatics(C, Comp// cast type to ComponentClass (even if SFC)
    );
}
/**
 * Some array helpers!
 */ var move = function move1(array, from, to) {
    var copy = copyArrayLike(array);
    var value = copy[from];
    copy.splice(from, 1);
    copy.splice(to, 0, value);
    return copy;
};
var swap = function swap1(arrayLike, indexA, indexB) {
    var copy = copyArrayLike(arrayLike);
    var a = copy[indexA];
    copy[indexA] = copy[indexB];
    copy[indexB] = a;
    return copy;
};
var insert = function insert1(arrayLike, index, value) {
    var copy = copyArrayLike(arrayLike);
    copy.splice(index, 0, value);
    return copy;
};
var replace = function replace1(arrayLike, index, value) {
    var copy = copyArrayLike(arrayLike);
    copy[index] = value;
    return copy;
};
var copyArrayLike = function copyArrayLike1(arrayLike) {
    if (!arrayLike) return [];
    else if (Array.isArray(arrayLike)) return [].concat(arrayLike);
    else {
        var maxIndex = Object.keys(arrayLike).map(function(key) {
            return parseInt(key);
        }).reduce(function(max, el) {
            return el > max ? el : max;
        }, 0);
        return Array.from(_extends({
        }, arrayLike, {
            length: maxIndex + 1
        }));
    }
};
var FieldArrayInner1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(FieldArrayInner2, _React$Component);
    function FieldArrayInner2(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _this.updateArrayField = function(fn, alterTouched, alterErrors) {
            var _this$props = _this.props, name = _this$props.name, setFormikState = _this$props.formik.setFormikState;
            setFormikState(function(prevState) {
                var updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;
                var updateTouched = typeof alterTouched === 'function' ? alterTouched : fn; // values fn should be executed before updateErrors and updateTouched,
                // otherwise it causes an error with unshift.
                var values = setIn(prevState.values, name, fn(getIn(prevState.values, name)));
                var fieldError = alterErrors ? updateErrors(getIn(prevState.errors, name)) : undefined;
                var fieldTouched = alterTouched ? updateTouched(getIn(prevState.touched, name)) : undefined;
                if (isEmptyArray(fieldError)) fieldError = undefined;
                if (isEmptyArray(fieldTouched)) fieldTouched = undefined;
                return _extends({
                }, prevState, {
                    values: values,
                    errors: alterErrors ? setIn(prevState.errors, name, fieldError) : prevState.errors,
                    touched: alterTouched ? setIn(prevState.touched, name, fieldTouched) : prevState.touched
                });
            });
        };
        _this.push = function(value) {
            return _this.updateArrayField(function(arrayLike) {
                return [].concat(copyArrayLike(arrayLike), [
                    cloneDeep(value)
                ]);
            }, false, false);
        };
        _this.handlePush = function(value) {
            return function() {
                return _this.push(value);
            };
        };
        _this.swap = function(indexA, indexB) {
            return _this.updateArrayField(function(array) {
                return swap(array, indexA, indexB);
            }, true, true);
        };
        _this.handleSwap = function(indexA, indexB) {
            return function() {
                return _this.swap(indexA, indexB);
            };
        };
        _this.move = function(from, to) {
            return _this.updateArrayField(function(array) {
                return move(array, from, to);
            }, true, true);
        };
        _this.handleMove = function(from, to) {
            return function() {
                return _this.move(from, to);
            };
        };
        _this.insert = function(index, value) {
            return _this.updateArrayField(function(array) {
                return insert(array, index, value);
            }, function(array) {
                return insert(array, index, null);
            }, function(array) {
                return insert(array, index, null);
            });
        };
        _this.handleInsert = function(index, value) {
            return function() {
                return _this.insert(index, value);
            };
        };
        _this.replace = function(index, value) {
            return _this.updateArrayField(function(array) {
                return replace(array, index, value);
            }, false, false);
        };
        _this.handleReplace = function(index, value) {
            return function() {
                return _this.replace(index, value);
            };
        };
        _this.unshift = function(value) {
            var length = -1;
            _this.updateArrayField(function(array) {
                var arr = array ? [
                    value
                ].concat(array) : [
                    value
                ];
                if (length < 0) length = arr.length;
                return arr;
            }, function(array) {
                var arr = array ? [
                    null
                ].concat(array) : [
                    null
                ];
                if (length < 0) length = arr.length;
                return arr;
            }, function(array) {
                var arr = array ? [
                    null
                ].concat(array) : [
                    null
                ];
                if (length < 0) length = arr.length;
                return arr;
            });
            return length;
        };
        _this.handleUnshift = function(value) {
            return function() {
                return _this.unshift(value);
            };
        };
        _this.handleRemove = function(index) {
            return function() {
                return _this.remove(index);
            };
        };
        _this.handlePop = function() {
            return function() {
                return _this.pop();
            };
        }; // We need TypeScript generics on these, so we'll bind them in the constructor
        // @todo Fix TS 3.2.1
        _this.remove = _this.remove.bind(_assertThisInitialized(_this));
        _this.pop = _this.pop.bind(_assertThisInitialized(_this));
        return _this;
    }
    var _proto = FieldArrayInner2.prototype;
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.validateOnChange && this.props.formik.validateOnChange && !isEqual(getIn(prevProps.formik.values, prevProps.name), getIn(this.props.formik.values, this.props.name))) this.props.formik.validateForm(this.props.formik.values);
    };
    _proto.remove = function remove(index) {
        // We need to make sure we also remove relevant pieces of `touched` and `errors`
        var result;
        this.updateArrayField(function(array) {
            var copy = array ? copyArrayLike(array) : [];
            if (!result) result = copy[index];
            if (isFunction(copy.splice)) copy.splice(index, 1);
            return copy;
        }, true, true);
        return result;
    };
    _proto.pop = function pop() {
        // Remove relevant pieces of `touched` and `errors` too!
        var result;
        this.updateArrayField(function(array) {
            var tmp = array;
            if (!result) result = tmp && tmp.pop && tmp.pop();
            return tmp;
        }, true, true);
        return result;
    };
    _proto.render = function render() {
        var arrayHelpers = {
            push: this.push,
            pop: this.pop,
            swap: this.swap,
            move: this.move,
            insert: this.insert,
            replace: this.replace,
            unshift: this.unshift,
            remove: this.remove,
            handlePush: this.handlePush,
            handlePop: this.handlePop,
            handleSwap: this.handleSwap,
            handleMove: this.handleMove,
            handleInsert: this.handleInsert,
            handleReplace: this.handleReplace,
            handleUnshift: this.handleUnshift,
            handleRemove: this.handleRemove
        };
        var _this$props2 = this.props, component = _this$props2.component, render = _this$props2.render, children = _this$props2.children, name = _this$props2.name, _this$props2$formik = _this$props2.formik, restOfFormik = _objectWithoutPropertiesLoose(_this$props2$formik, [
            "validate",
            "validationSchema"
        ]);
        var props = _extends({
        }, arrayHelpers, {
            form: restOfFormik,
            name: name
        });
        return component ? React.createElement(component, props) : render ? render(props) : children ? typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? React.Children.only(children) : null : null;
    };
    return FieldArrayInner2;
}(React.Component);
FieldArrayInner1.defaultProps = {
    validateOnChange: true
};
var FieldArray = /*#__PURE__*/ connect(FieldArrayInner1);
var ErrorMessageImpl1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(ErrorMessageImpl2, _React$Component);
    function ErrorMessageImpl2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = ErrorMessageImpl2.prototype;
    _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {
        if (getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) return true;
        else return false;
    };
    _proto.render = function render() {
        var _this$props = this.props, component = _this$props.component, formik = _this$props.formik, render = _this$props.render, children = _this$props.children, name = _this$props.name, rest = _objectWithoutPropertiesLoose(_this$props, [
            "component",
            "formik",
            "render",
            "children",
            "name"
        ]);
        var touch = getIn(formik.touched, name);
        var error = getIn(formik.errors, name);
        return !!touch && !!error ? render ? isFunction(render) ? render(error) : null : children ? isFunction(children) ? children(error) : null : component ? React.createElement(component, rest, error) : error : null;
    };
    return ErrorMessageImpl2;
}(React.Component);
var ErrorMessage = /*#__PURE__*/ connect(ErrorMessageImpl1);
/**
 * Custom Field component for quickly hooking into Formik
 * context and wiring up forms.
 */ var FastFieldInner1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(FastFieldInner2, _React$Component);
    function FastFieldInner2(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        var render = props.render, children = props.children, component = props.component, is = props.as, name = props.name;
        !!render && invariant(false, "<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={" + name + "}>{props => ...}</FastField> instead.");
        !!(component && render) && invariant(false, 'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored');
        !!(is && children && isFunction(children)) && invariant(false, 'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.');
        !!(component && children && isFunction(children)) && invariant(false, 'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.');
        !!(render && children && !isEmptyChildren(children)) && invariant(false, 'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored');
        return _this;
    }
    var _proto = FastFieldInner2.prototype;
    _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {
        if (this.props.shouldUpdate) return this.props.shouldUpdate(props, this.props);
        else if (props.name !== this.props.name || getIn(props.formik.values, this.props.name) !== getIn(this.props.formik.values, this.props.name) || getIn(props.formik.errors, this.props.name) !== getIn(this.props.formik.errors, this.props.name) || getIn(props.formik.touched, this.props.name) !== getIn(this.props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || props.formik.isSubmitting !== this.props.formik.isSubmitting) return true;
        else return false;
    };
    _proto.componentDidMount = function componentDidMount() {
        // Register the Field with the parent Formik. Parent will cycle through
        // registered Field's validate fns right prior to submit
        this.props.formik.registerField(this.props.name, {
            validate: this.props.validate
        });
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.name !== prevProps.name) {
            this.props.formik.unregisterField(prevProps.name);
            this.props.formik.registerField(this.props.name, {
                validate: this.props.validate
            });
        }
        if (this.props.validate !== prevProps.validate) this.props.formik.registerField(this.props.name, {
            validate: this.props.validate
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.props.formik.unregisterField(this.props.name);
    };
    _proto.render = function render() {
        var _this$props = this.props, name = _this$props.name, render = _this$props.render, is = _this$props.as, children = _this$props.children, component = _this$props.component, formik = _this$props.formik, props = _objectWithoutPropertiesLoose(_this$props, [
            "validate",
            "name",
            "render",
            "as",
            "children",
            "component",
            "shouldUpdate",
            "formik"
        ]);
        var restOfFormik = _objectWithoutPropertiesLoose(formik, [
            "validate",
            "validationSchema"
        ]);
        var field = formik.getFieldProps(_extends({
            name: name
        }, props));
        var meta = {
            value: getIn(formik.values, name),
            error: getIn(formik.errors, name),
            touched: !!getIn(formik.touched, name),
            initialValue: getIn(formik.initialValues, name),
            initialTouched: !!getIn(formik.initialTouched, name),
            initialError: getIn(formik.initialErrors, name)
        };
        var bag = {
            field: field,
            meta: meta,
            form: restOfFormik
        };
        if (render) return render(bag);
        if (isFunction(children)) return children(bag);
        if (component) {
            // This behavior is backwards compat with earlier Formik 0.9 to 1.x
            if (typeof component === 'string') {
                var innerRef = props.innerRef, rest = _objectWithoutPropertiesLoose(props, [
                    "innerRef"
                ]);
                return React.createElement(component, _extends({
                    ref: innerRef
                }, field, rest), children);
            } // We don't pass `meta` for backwards compat
            return React.createElement(component, _extends({
                field: field,
                form: formik
            }, props), children);
        } // default to input here so we can check for both `as` and `children` above
        var asElement = is || 'input';
        if (typeof asElement === 'string') {
            var _innerRef = props.innerRef, _rest = _objectWithoutPropertiesLoose(props, [
                "innerRef"
            ]);
            return React.createElement(asElement, _extends({
                ref: _innerRef
            }, field, _rest), children);
        }
        return React.createElement(asElement, _extends({
        }, field, props), children);
    };
    return FastFieldInner2;
}(React.Component);
var FastField = /*#__PURE__*/ connect(FastFieldInner1);
exports.ErrorMessage = ErrorMessage;
exports.FastField = FastField;
exports.Field = Field;
exports.FieldArray = FieldArray;
exports.Form = Form;
exports.Formik = Formik;
exports.FormikConsumer = FormikConsumer;
exports.FormikContext = FormikContext;
exports.FormikProvider = FormikProvider;
exports.connect = connect;
exports.getActiveElement = getActiveElement;
exports.getIn = getIn;
exports.insert = insert;
exports.isEmptyArray = isEmptyArray;
exports.isEmptyChildren = isEmptyChildren;
exports.isFunction = isFunction;
exports.isInputEvent = isInputEvent;
exports.isInteger = isInteger;
exports.isNaN = isNaN$1;
exports.isObject = isObject;
exports.isPromise = isPromise;
exports.isString = isString;
exports.move = move;
exports.prepareDataForValidation = prepareDataForValidation;
exports.replace = replace;
exports.setIn = setIn;
exports.setNestedObjectValues = setNestedObjectValues;
exports.swap = swap;
exports.useField = useField;
exports.useFormik = useFormik;
exports.useFormikContext = useFormikContext;
exports.validateYupSchema = validateYupSchema;
exports.withFormik = withFormik;
exports.yupToFormErrors = yupToFormErrors;

},{"react":"3b2NM","react-fast-compare":"6khZc","deepmerge":"5uAOY","lodash/isPlainObject":"1VuSI","lodash/clone":"2rEpM","lodash/toPath":"wbbM3","tiny-warning":"3B527","hoist-non-react-statics":"3nUHV","lodash/cloneDeep":"7kiHM"}],"6khZc":[function(require,module,exports) {
'use strict';
var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
var hasElementType = typeof Element !== 'undefined';
function equal(a, b) {
    // fast-deep-equal index.js 2.0.1
    if (a === b) return true;
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        var arrA = isArray(a), arrB = isArray(b), i, length, key;
        if (arrA && arrB) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; (i--) !== 0;)if (!equal(a[i], b[i])) return false;
            return true;
        }
        if (arrA != arrB) return false;
        var dateA = a instanceof Date, dateB = b instanceof Date;
        if (dateA != dateB) return false;
        if (dateA && dateB) return a.getTime() == b.getTime();
        var regexpA = a instanceof RegExp, regexpB = b instanceof RegExp;
        if (regexpA != regexpB) return false;
        if (regexpA && regexpB) return a.toString() == b.toString();
        var keys = keyList(a);
        length = keys.length;
        if (length !== keyList(b).length) return false;
        for(i = length; (i--) !== 0;)if (!hasProp.call(b, keys[i])) return false;
        // end fast-deep-equal
        // start react-fast-compare
        // custom handling for DOM elements
        if (hasElementType && a instanceof Element && b instanceof Element) return a === b;
        // custom handling for React
        for(i = length; (i--) !== 0;){
            key = keys[i];
            if (key === '_owner' && a.$$typeof) continue;
            else {
                // all other properties should be traversed as usual
                if (!equal(a[key], b[key])) return false;
            }
        }
        // end react-fast-compare
        // fast-deep-equal index.js 2.0.1
        return true;
    }
    return a !== a && b !== b;
}
// end fast-deep-equal
module.exports = function exportedEqual(a, b) {
    try {
        return equal(a, b);
    } catch (error) {
        if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
            // warn on circular references, don't crash
            // browsers give this different errors name and messages:
            // chrome/safari: "RangeError", "Maximum call stack size exceeded"
            // firefox: "InternalError", too much recursion"
            // edge: "Error", "Out of stack space"
            console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
            return false;
        }
        // some other error. we should definitely know about these
        throw error;
    }
};

},{}],"5uAOY":[function(require,module,exports) {
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.deepmerge = factory();
})(this, function() {
    'use strict';
    var isMergeableObject = function isMergeableObject1(value) {
        return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
        return !!value && typeof value === 'object';
    }
    function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
        return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
    }
    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 60103;
    function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
        return Array.isArray(val) ? [] : {
        };
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
        return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function(element) {
            return cloneUnlessOtherwiseSpecified(element, options);
        });
    }
    function mergeObject(target, source, options) {
        var destination = {
        };
        if (options.isMergeableObject(target)) Object.keys(target).forEach(function(key) {
            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
        Object.keys(source).forEach(function(key) {
            if (!options.isMergeableObject(source[key]) || !target[key]) destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
            else destination[key] = deepmerge(target[key], source[key], options);
        });
        return destination;
    }
    function deepmerge(target, source, options) {
        options = options || {
        };
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || isMergeableObject;
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
        if (!sourceAndTargetTypesMatch) return cloneUnlessOtherwiseSpecified(source, options);
        else if (sourceIsArray) return options.arrayMerge(target, source, options);
        else return mergeObject(target, source, options);
    }
    deepmerge.all = function deepmergeAll(array, options) {
        if (!Array.isArray(array)) throw new Error('first argument should be an array');
        return array.reduce(function(prev, next) {
            return deepmerge(prev, next, options);
        }, {
        });
    };
    var deepmerge_1 = deepmerge;
    return deepmerge_1;
});

},{}],"1VuSI":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), getPrototype = require('./_getPrototype'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var objectTag = '[object Object]';
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
    var proto = getPrototype(value);
    if (proto === null) return true;
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
module.exports = isPlainObject;

},{"./_baseGetTag":"6QPjr","./_getPrototype":"3E9l5","./isObjectLike":"2rzfJ"}],"6QPjr":[function(require,module,exports) {
var Symbol1 = require('./_Symbol'), getRawTag = require('./_getRawTag'), objectToString = require('./_objectToString');
/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
/** Built-in value references. */ var symToStringTag = Symbol1 ? Symbol1.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;

},{"./_Symbol":"5ra8b","./_getRawTag":"6SREv","./_objectToString":"6PiFp"}],"5ra8b":[function(require,module,exports) {
var root = require('./_root');
/** Built-in value references. */ var Symbol1 = root.Symbol;
module.exports = Symbol1;

},{"./_root":"39kx4"}],"39kx4":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

},{"./_freeGlobal":"7HuYr"}],"7HuYr":[function(require,module,exports) {
var global = arguments[3];
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;

},{}],"6SREv":[function(require,module,exports) {
var Symbol1 = require('./_Symbol');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = Symbol1 ? Symbol1.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
module.exports = getRawTag;

},{"./_Symbol":"5ra8b"}],"6PiFp":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;

},{}],"3E9l5":[function(require,module,exports) {
var overArg = require('./_overArg');
/** Built-in value references. */ var getPrototype = overArg(Object.getPrototypeOf, Object);
module.exports = getPrototype;

},{"./_overArg":"6mmni"}],"6mmni":[function(require,module,exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = overArg;

},{}],"2rzfJ":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
module.exports = isObjectLike;

},{}],"2rEpM":[function(require,module,exports) {
var baseClone = require('./_baseClone');
/** Used to compose bitmasks for cloning. */ var CLONE_SYMBOLS_FLAG = 4;
/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */ function clone(value) {
    return baseClone(value, CLONE_SYMBOLS_FLAG);
}
module.exports = clone;

},{"./_baseClone":"3P5zz"}],"3P5zz":[function(require,module,exports) {
var Stack = require('./_Stack'), arrayEach = require('./_arrayEach'), assignValue = require('./_assignValue'), baseAssign = require('./_baseAssign'), baseAssignIn = require('./_baseAssignIn'), cloneBuffer = require('./_cloneBuffer'), copyArray = require('./_copyArray'), copySymbols = require('./_copySymbols'), copySymbolsIn = require('./_copySymbolsIn'), getAllKeys = require('./_getAllKeys'), getAllKeysIn = require('./_getAllKeysIn'), getTag = require('./_getTag'), initCloneArray = require('./_initCloneArray'), initCloneByTag = require('./_initCloneByTag'), initCloneObject = require('./_initCloneObject'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isMap = require('./isMap'), isObject = require('./isObject'), isSet = require('./isSet'), keys = require('./keys'), keysIn = require('./keysIn');
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {
};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */ function baseClone(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);
    if (result !== undefined) return result;
    if (!isObject(value)) return value;
    var isArr = isArray(value);
    if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) return copyArray(value, result);
    } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) return cloneBuffer(value, isDeep);
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {
            } : initCloneObject(value);
            if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        } else {
            if (!cloneableTags[tag]) return object ? value : {
            };
            result = initCloneByTag(value, tag, isDeep);
        }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) return stacked;
    stack.set(value, result);
    if (isSet(value)) value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
    else if (isMap(value)) value.forEach(function(subValue, key1) {
        result.set(key1, baseClone(subValue, bitmask, customizer, key1, value, stack));
    });
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function(subValue, key1) {
        if (props) {
            key1 = subValue;
            subValue = value[key1];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key1, baseClone(subValue, bitmask, customizer, key1, value, stack));
    });
    return result;
}
module.exports = baseClone;

},{"./_Stack":"3G0mk","./_arrayEach":"1pn5v","./_assignValue":"7Je7n","./_baseAssign":"29ZEp","./_baseAssignIn":"U4rKj","./_cloneBuffer":"3msKQ","./_copyArray":"37MTY","./_copySymbols":"2Bc4g","./_copySymbolsIn":"7Arl8","./_getAllKeys":"4eZXB","./_getAllKeysIn":"54oJG","./_getTag":"7bwaZ","./_initCloneArray":"4Cto6","./_initCloneByTag":"4Y7Zw","./_initCloneObject":"2v0Sq","./isArray":"4YX8m","./isBuffer":"4KS4E","./isMap":"1QzYG","./isObject":"3LQRi","./isSet":"5uXeA","./keys":"31WSp","./keysIn":"726Xl"}],"3G0mk":[function(require,module,exports) {
var ListCache = require('./_ListCache'), stackClear = require('./_stackClear'), stackDelete = require('./_stackDelete'), stackGet = require('./_stackGet'), stackHas = require('./_stackHas'), stackSet = require('./_stackSet');
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

},{"./_ListCache":"6v6Y1","./_stackClear":"2ws3B","./_stackDelete":"2h4CO","./_stackGet":"1KvqQ","./_stackHas":"368RH","./_stackSet":"559sC"}],"6v6Y1":[function(require,module,exports) {
var listCacheClear = require('./_listCacheClear'), listCacheDelete = require('./_listCacheDelete'), listCacheGet = require('./_listCacheGet'), listCacheHas = require('./_listCacheHas'), listCacheSet = require('./_listCacheSet');
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while((++index) < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

},{"./_listCacheClear":"2C84k","./_listCacheDelete":"11s32","./_listCacheGet":"286iD","./_listCacheHas":"1wxGe","./_listCacheSet":"2dndv"}],"2C84k":[function(require,module,exports) {
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
module.exports = listCacheClear;

},{}],"11s32":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
module.exports = listCacheDelete;

},{"./_assocIndexOf":"2AWrG"}],"2AWrG":[function(require,module,exports) {
var eq = require('./eq');
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) return length;
    }
    return -1;
}
module.exports = assocIndexOf;

},{"./eq":"J0MWH"}],"J0MWH":[function(require,module,exports) {
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
module.exports = eq;

},{}],"286iD":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
module.exports = listCacheGet;

},{"./_assocIndexOf":"2AWrG"}],"1wxGe":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
module.exports = listCacheHas;

},{"./_assocIndexOf":"2AWrG"}],"2dndv":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
module.exports = listCacheSet;

},{"./_assocIndexOf":"2AWrG"}],"2ws3B":[function(require,module,exports) {
var ListCache = require('./_ListCache');
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
module.exports = stackClear;

},{"./_ListCache":"6v6Y1"}],"2h4CO":[function(require,module,exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data['delete'](key);
    this.size = data.size;
    return result;
}
module.exports = stackDelete;

},{}],"1KvqQ":[function(require,module,exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
module.exports = stackGet;

},{}],"368RH":[function(require,module,exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
module.exports = stackHas;

},{}],"559sC":[function(require,module,exports) {
var ListCache = require('./_ListCache'), Map1 = require('./_Map'), MapCache = require('./_MapCache');
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map1 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
module.exports = stackSet;

},{"./_ListCache":"6v6Y1","./_Map":"fUxq1","./_MapCache":"4kfOI"}],"fUxq1":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Map1 = getNative(root, 'Map');
module.exports = Map1;

},{"./_getNative":"1WJqJ","./_root":"39kx4"}],"1WJqJ":[function(require,module,exports) {
var baseIsNative = require('./_baseIsNative'), getValue = require('./_getValue');
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
module.exports = getNative;

},{"./_baseIsNative":"23XEX","./_getValue":"4qa4z"}],"23XEX":[function(require,module,exports) {
var isFunction = require('./isFunction'), isMasked = require('./_isMasked'), isObject = require('./isObject'), toSource = require('./_toSource');
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
module.exports = baseIsNative;

},{"./isFunction":"3ciSx","./_isMasked":"6ikdr","./isObject":"3LQRi","./_toSource":"6kSOh"}],"3ciSx":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObject = require('./isObject');
/** `Object#toString` result references. */ var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;

},{"./_baseGetTag":"6QPjr","./isObject":"3LQRi"}],"3LQRi":[function(require,module,exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
module.exports = isObject;

},{}],"6ikdr":[function(require,module,exports) {
var coreJsData = require('./_coreJsData');
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
module.exports = isMasked;

},{"./_coreJsData":"4sHEq"}],"4sHEq":[function(require,module,exports) {
var root = require('./_root');
/** Used to detect overreaching core-js shims. */ var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;

},{"./_root":"39kx4"}],"6kSOh":[function(require,module,exports) {
/** Used for built-in method references. */ var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {
        }
        try {
            return func + '';
        } catch (e) {
        }
    }
    return '';
}
module.exports = toSource;

},{}],"4qa4z":[function(require,module,exports) {
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
module.exports = getValue;

},{}],"4kfOI":[function(require,module,exports) {
var mapCacheClear = require('./_mapCacheClear'), mapCacheDelete = require('./_mapCacheDelete'), mapCacheGet = require('./_mapCacheGet'), mapCacheHas = require('./_mapCacheHas'), mapCacheSet = require('./_mapCacheSet');
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while((++index) < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

},{"./_mapCacheClear":"65n46","./_mapCacheDelete":"5rRPZ","./_mapCacheGet":"2DFEZ","./_mapCacheHas":"6Id8e","./_mapCacheSet":"6KiQg"}],"65n46":[function(require,module,exports) {
var Hash = require('./_Hash'), ListCache = require('./_ListCache'), Map1 = require('./_Map');
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        'hash': new Hash,
        'map': new (Map1 || ListCache),
        'string': new Hash
    };
}
module.exports = mapCacheClear;

},{"./_Hash":"5rZTT","./_ListCache":"6v6Y1","./_Map":"fUxq1"}],"5rZTT":[function(require,module,exports) {
var hashClear = require('./_hashClear'), hashDelete = require('./_hashDelete'), hashGet = require('./_hashGet'), hashHas = require('./_hashHas'), hashSet = require('./_hashSet');
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while((++index) < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

},{"./_hashClear":"3g8mO","./_hashDelete":"2JzLs","./_hashGet":"5lhIj","./_hashHas":"1HDgT","./_hashSet":"6J6zv"}],"3g8mO":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {
    };
    this.size = 0;
}
module.exports = hashClear;

},{"./_nativeCreate":"xlIFf"}],"xlIFf":[function(require,module,exports) {
var getNative = require('./_getNative');
/* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;

},{"./_getNative":"1WJqJ"}],"2JzLs":[function(require,module,exports) {
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = hashDelete;

},{}],"5lhIj":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = hashGet;

},{"./_nativeCreate":"xlIFf"}],"1HDgT":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
module.exports = hashHas;

},{"./_nativeCreate":"xlIFf"}],"6J6zv":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
module.exports = hashSet;

},{"./_nativeCreate":"xlIFf"}],"5rRPZ":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = mapCacheDelete;

},{"./_getMapData":"4qYa0"}],"4qYa0":[function(require,module,exports) {
var isKeyable = require('./_isKeyable');
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
module.exports = getMapData;

},{"./_isKeyable":"41Yxl"}],"41Yxl":[function(require,module,exports) {
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
module.exports = isKeyable;

},{}],"2DFEZ":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
module.exports = mapCacheGet;

},{"./_getMapData":"4qYa0"}],"6Id8e":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
module.exports = mapCacheHas;

},{"./_getMapData":"4qYa0"}],"6KiQg":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
module.exports = mapCacheSet;

},{"./_getMapData":"4qYa0"}],"1pn5v":[function(require,module,exports) {
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */ function arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while((++index) < length){
        if (iteratee(array[index], index, array) === false) break;
    }
    return array;
}
module.exports = arrayEach;

},{}],"7Je7n":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'), eq = require('./eq');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
module.exports = assignValue;

},{"./_baseAssignValue":"3nIC3","./eq":"J0MWH"}],"3nIC3":[function(require,module,exports) {
var defineProperty = require('./_defineProperty');
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
    });
    else object[key] = value;
}
module.exports = baseAssignValue;

},{"./_defineProperty":"7H0oS"}],"7H0oS":[function(require,module,exports) {
var getNative = require('./_getNative');
var defineProperty = function() {
    try {
        var func = getNative(Object, 'defineProperty');
        func({
        }, '', {
        });
        return func;
    } catch (e) {
    }
}();
module.exports = defineProperty;

},{"./_getNative":"1WJqJ"}],"29ZEp":[function(require,module,exports) {
var copyObject = require('./_copyObject'), keys = require('./keys');
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
}
module.exports = baseAssign;

},{"./_copyObject":"NEkOM","./keys":"31WSp"}],"NEkOM":[function(require,module,exports) {
var assignValue = require('./_assignValue'), baseAssignValue = require('./_baseAssignValue');
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */ function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {
    });
    var index = -1, length = props.length;
    while((++index) < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) baseAssignValue(object, key, newValue);
        else assignValue(object, key, newValue);
    }
    return object;
}
module.exports = copyObject;

},{"./_assignValue":"7Je7n","./_baseAssignValue":"3nIC3"}],"31WSp":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'), baseKeys = require('./_baseKeys'), isArrayLike = require('./isArrayLike');
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
module.exports = keys;

},{"./_arrayLikeKeys":"72C3t","./_baseKeys":"7hbT2","./isArrayLike":"3NW1q"}],"72C3t":[function(require,module,exports) {
var baseTimes = require('./_baseTimes'), isArguments = require('./isArguments'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isIndex = require('./_isIndex'), isTypedArray = require('./isTypedArray');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) result.push(key);
    return result;
}
module.exports = arrayLikeKeys;

},{"./_baseTimes":"7LBVL","./isArguments":"5NBLh","./isArray":"4YX8m","./isBuffer":"4KS4E","./_isIndex":"6v9Js","./isTypedArray":"42Baw"}],"7LBVL":[function(require,module,exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while((++index) < n)result[index] = iteratee(index);
    return result;
}
module.exports = baseTimes;

},{}],"5NBLh":[function(require,module,exports) {
var baseIsArguments = require('./_baseIsArguments'), isObjectLike = require('./isObjectLike');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;

},{"./_baseIsArguments":"OxZls","./isObjectLike":"2rzfJ"}],"OxZls":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;

},{"./_baseGetTag":"6QPjr","./isObjectLike":"2rzfJ"}],"4YX8m":[function(require,module,exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
module.exports = isArray;

},{}],"4KS4E":[function(require,module,exports) {
var root = require('./_root'), stubFalse = require('./stubFalse');
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;

},{"./_root":"39kx4","./stubFalse":"71n0O"}],"71n0O":[function(require,module,exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = stubFalse;

},{}],"6v9Js":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;

},{}],"42Baw":[function(require,module,exports) {
var baseIsTypedArray = require('./_baseIsTypedArray'), baseUnary = require('./_baseUnary'), nodeUtil = require('./_nodeUtil');
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

},{"./_baseIsTypedArray":"LfSPU","./_baseUnary":"1Zwxa","./_nodeUtil":"2lE87"}],"LfSPU":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isLength = require('./isLength'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {
};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;

},{"./_baseGetTag":"6QPjr","./isLength":"6rNjU","./isObjectLike":"2rzfJ"}],"6rNjU":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;

},{}],"1Zwxa":[function(require,module,exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = baseUnary;

},{}],"2lE87":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.undefined && freeModule.undefined('util').types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {
    }
}();
module.exports = nodeUtil;

},{"./_freeGlobal":"7HuYr"}],"7hbT2":[function(require,module,exports) {
var isPrototype = require('./_isPrototype'), nativeKeys = require('./_nativeKeys');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
    return result;
}
module.exports = baseKeys;

},{"./_isPrototype":"5PB3s","./_nativeKeys":"h4faq"}],"5PB3s":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
module.exports = isPrototype;

},{}],"h4faq":[function(require,module,exports) {
var overArg = require('./_overArg');
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

},{"./_overArg":"6mmni"}],"3NW1q":[function(require,module,exports) {
var isFunction = require('./isFunction'), isLength = require('./isLength');
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;

},{"./isFunction":"3ciSx","./isLength":"6rNjU"}],"U4rKj":[function(require,module,exports) {
var copyObject = require('./_copyObject'), keysIn = require('./keysIn');
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
}
module.exports = baseAssignIn;

},{"./_copyObject":"NEkOM","./keysIn":"726Xl"}],"726Xl":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'), baseKeysIn = require('./_baseKeysIn'), isArrayLike = require('./isArrayLike');
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
module.exports = keysIn;

},{"./_arrayLikeKeys":"72C3t","./_baseKeysIn":"2rsMs","./isArrayLike":"3NW1q"}],"2rsMs":[function(require,module,exports) {
var isObject = require('./isObject'), isPrototype = require('./_isPrototype'), nativeKeysIn = require('./_nativeKeysIn');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeysIn(object) {
    if (!isObject(object)) return nativeKeysIn(object);
    var isProto = isPrototype(object), result = [];
    for(var key in object)if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
module.exports = baseKeysIn;

},{"./isObject":"3LQRi","./_isPrototype":"5PB3s","./_nativeKeysIn":"BJ9mi"}],"BJ9mi":[function(require,module,exports) {
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
module.exports = nativeKeysIn;

},{}],"3msKQ":[function(require,module,exports) {
var root = require('./_root');
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */ function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
module.exports = cloneBuffer;

},{"./_root":"39kx4"}],"37MTY":[function(require,module,exports) {
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */ function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while((++index) < length)array[index] = source[index];
    return array;
}
module.exports = copyArray;

},{}],"2Bc4g":[function(require,module,exports) {
var copyObject = require('./_copyObject'), getSymbols = require('./_getSymbols');
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
}
module.exports = copySymbols;

},{"./_copyObject":"NEkOM","./_getSymbols":"RStcJ"}],"RStcJ":[function(require,module,exports) {
var arrayFilter = require('./_arrayFilter'), stubArray = require('./stubArray');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) return [];
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
    });
};
module.exports = getSymbols;

},{"./_arrayFilter":"1ok1J","./stubArray":"34FUR"}],"1ok1J":[function(require,module,exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while((++index) < length){
        var value = array[index];
        if (predicate(value, index, array)) result[resIndex++] = value;
    }
    return result;
}
module.exports = arrayFilter;

},{}],"34FUR":[function(require,module,exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
module.exports = stubArray;

},{}],"7Arl8":[function(require,module,exports) {
var copyObject = require('./_copyObject'), getSymbolsIn = require('./_getSymbolsIn');
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
}
module.exports = copySymbolsIn;

},{"./_copyObject":"NEkOM","./_getSymbolsIn":"3mR7N"}],"3mR7N":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'), getPrototype = require('./_getPrototype'), getSymbols = require('./_getSymbols'), stubArray = require('./stubArray');
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while(object){
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
    }
    return result;
};
module.exports = getSymbolsIn;

},{"./_arrayPush":"1mLHp","./_getPrototype":"3E9l5","./_getSymbols":"RStcJ","./stubArray":"34FUR"}],"1mLHp":[function(require,module,exports) {
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while((++index) < length)array[offset + index] = values[index];
    return array;
}
module.exports = arrayPush;

},{}],"4eZXB":[function(require,module,exports) {
var baseGetAllKeys = require('./_baseGetAllKeys'), getSymbols = require('./_getSymbols'), keys = require('./keys');
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
}
module.exports = getAllKeys;

},{"./_baseGetAllKeys":"5E5cv","./_getSymbols":"RStcJ","./keys":"31WSp"}],"5E5cv":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'), isArray = require('./isArray');
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
module.exports = baseGetAllKeys;

},{"./_arrayPush":"1mLHp","./isArray":"4YX8m"}],"54oJG":[function(require,module,exports) {
var baseGetAllKeys = require('./_baseGetAllKeys'), getSymbolsIn = require('./_getSymbolsIn'), keysIn = require('./keysIn');
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
}
module.exports = getAllKeysIn;

},{"./_baseGetAllKeys":"5E5cv","./_getSymbolsIn":"3mR7N","./keysIn":"726Xl"}],"7bwaZ":[function(require,module,exports) {
var DataView1 = require('./_DataView'), Map1 = require('./_Map'), Promise1 = require('./_Promise'), Set1 = require('./_Set'), WeakMap1 = require('./_WeakMap'), baseGetTag = require('./_baseGetTag'), toSource = require('./_toSource');
/** `Object#toString` result references. */ var mapTag = '[object Map]', objectTag = '[object Object]', promiseTag = '[object Promise]', setTag = '[object Set]', weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView1), mapCtorString = toSource(Map1), promiseCtorString = toSource(Promise1), setCtorString = toSource(Set1), weakMapCtorString = toSource(WeakMap1);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var getTag = baseGetTag;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView1 && getTag(new DataView1(new ArrayBuffer(1))) != dataViewTag || Map1 && getTag(new Map1) != mapTag || Promise1 && getTag(Promise1.resolve()) != promiseTag || Set1 && getTag(new Set1) != setTag || WeakMap1 && getTag(new WeakMap1) != weakMapTag) getTag = function(value) {
    var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
    if (ctorString) switch(ctorString){
        case dataViewCtorString:
            return dataViewTag;
        case mapCtorString:
            return mapTag;
        case promiseCtorString:
            return promiseTag;
        case setCtorString:
            return setTag;
        case weakMapCtorString:
            return weakMapTag;
    }
    return result;
};
module.exports = getTag;

},{"./_DataView":"6iymE","./_Map":"fUxq1","./_Promise":"36ras","./_Set":"62fOc","./_WeakMap":"3XiDb","./_baseGetTag":"6QPjr","./_toSource":"6kSOh"}],"6iymE":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var DataView1 = getNative(root, 'DataView');
module.exports = DataView1;

},{"./_getNative":"1WJqJ","./_root":"39kx4"}],"36ras":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Promise1 = getNative(root, 'Promise');
module.exports = Promise1;

},{"./_getNative":"1WJqJ","./_root":"39kx4"}],"62fOc":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Set1 = getNative(root, 'Set');
module.exports = Set1;

},{"./_getNative":"1WJqJ","./_root":"39kx4"}],"3XiDb":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var WeakMap1 = getNative(root, 'WeakMap');
module.exports = WeakMap1;

},{"./_getNative":"1WJqJ","./_root":"39kx4"}],"4Cto6":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */ function initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
    }
    return result;
}
module.exports = initCloneArray;

},{}],"4Y7Zw":[function(require,module,exports) {
var cloneArrayBuffer = require('./_cloneArrayBuffer'), cloneDataView = require('./_cloneDataView'), cloneRegExp = require('./_cloneRegExp'), cloneSymbol = require('./_cloneSymbol'), cloneTypedArray = require('./_cloneTypedArray');
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch(tag){
        case arrayBufferTag:
            return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
            return new Ctor(+object);
        case dataViewTag:
            return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
            return cloneTypedArray(object, isDeep);
        case mapTag:
            return new Ctor;
        case numberTag:
        case stringTag:
            return new Ctor(object);
        case regexpTag:
            return cloneRegExp(object);
        case setTag:
            return new Ctor;
        case symbolTag:
            return cloneSymbol(object);
    }
}
module.exports = initCloneByTag;

},{"./_cloneArrayBuffer":"3lPKq","./_cloneDataView":"2lehm","./_cloneRegExp":"5XF3T","./_cloneSymbol":"6DAa3","./_cloneTypedArray":"4dBJt"}],"3lPKq":[function(require,module,exports) {
var Uint8Array1 = require('./_Uint8Array');
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */ function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array1(result).set(new Uint8Array1(arrayBuffer));
    return result;
}
module.exports = cloneArrayBuffer;

},{"./_Uint8Array":"3l5Sb"}],"3l5Sb":[function(require,module,exports) {
var root = require('./_root');
/** Built-in value references. */ var Uint8Array1 = root.Uint8Array;
module.exports = Uint8Array1;

},{"./_root":"39kx4"}],"2lehm":[function(require,module,exports) {
var cloneArrayBuffer = require('./_cloneArrayBuffer');
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */ function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
module.exports = cloneDataView;

},{"./_cloneArrayBuffer":"3lPKq"}],"5XF3T":[function(require,module,exports) {
/** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */ function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
}
module.exports = cloneRegExp;

},{}],"6DAa3":[function(require,module,exports) {
var Symbol1 = require('./_Symbol');
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol1 ? Symbol1.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */ function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {
    };
}
module.exports = cloneSymbol;

},{"./_Symbol":"5ra8b"}],"4dBJt":[function(require,module,exports) {
var cloneArrayBuffer = require('./_cloneArrayBuffer');
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */ function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
module.exports = cloneTypedArray;

},{"./_cloneArrayBuffer":"3lPKq"}],"2v0Sq":[function(require,module,exports) {
var baseCreate = require('./_baseCreate'), getPrototype = require('./_getPrototype'), isPrototype = require('./_isPrototype');
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {
    };
}
module.exports = initCloneObject;

},{"./_baseCreate":"33hw0","./_getPrototype":"3E9l5","./_isPrototype":"5PB3s"}],"33hw0":[function(require,module,exports) {
var isObject = require('./isObject');
/** Built-in value references. */ var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */ var baseCreate = function() {
    function object() {
    }
    return function(proto) {
        if (!isObject(proto)) return {
        };
        if (objectCreate) return objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
module.exports = baseCreate;

},{"./isObject":"3LQRi"}],"1QzYG":[function(require,module,exports) {
var baseIsMap = require('./_baseIsMap'), baseUnary = require('./_baseUnary'), nodeUtil = require('./_nodeUtil');
/* Node.js helper references. */ var nodeIsMap = nodeUtil && nodeUtil.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
module.exports = isMap;

},{"./_baseIsMap":"2gi1B","./_baseUnary":"1Zwxa","./_nodeUtil":"2lE87"}],"2gi1B":[function(require,module,exports) {
var getTag = require('./_getTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var mapTag = '[object Map]';
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */ function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
}
module.exports = baseIsMap;

},{"./_getTag":"7bwaZ","./isObjectLike":"2rzfJ"}],"5uXeA":[function(require,module,exports) {
var baseIsSet = require('./_baseIsSet'), baseUnary = require('./_baseUnary'), nodeUtil = require('./_nodeUtil');
/* Node.js helper references. */ var nodeIsSet = nodeUtil && nodeUtil.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
module.exports = isSet;

},{"./_baseIsSet":"y7u1Y","./_baseUnary":"1Zwxa","./_nodeUtil":"2lE87"}],"y7u1Y":[function(require,module,exports) {
var getTag = require('./_getTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var setTag = '[object Set]';
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */ function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
}
module.exports = baseIsSet;

},{"./_getTag":"7bwaZ","./isObjectLike":"2rzfJ"}],"wbbM3":[function(require,module,exports) {
var arrayMap = require('./_arrayMap'), copyArray = require('./_copyArray'), isArray = require('./isArray'), isSymbol = require('./isSymbol'), stringToPath = require('./_stringToPath'), toKey = require('./_toKey'), toString = require('./toString');
/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */ function toPath(value) {
    if (isArray(value)) return arrayMap(value, toKey);
    return isSymbol(value) ? [
        value
    ] : copyArray(stringToPath(toString(value)));
}
module.exports = toPath;

},{"./_arrayMap":"QWvrI","./_copyArray":"37MTY","./isArray":"4YX8m","./isSymbol":"MKxtP","./_stringToPath":"3atND","./_toKey":"4rwnd","./toString":"3sdfZ"}],"QWvrI":[function(require,module,exports) {
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while((++index) < length)result[index] = iteratee(array[index], index, array);
    return result;
}
module.exports = arrayMap;

},{}],"MKxtP":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
module.exports = isSymbol;

},{"./_baseGetTag":"6QPjr","./isObjectLike":"2rzfJ"}],"3atND":[function(require,module,exports) {
var memoizeCapped = require('./_memoizeCapped');
/** Used to match property names within property paths. */ var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */ var stringToPath = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46) result.push('');
    string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
});
module.exports = stringToPath;

},{"./_memoizeCapped":"4KS5B"}],"4KS5B":[function(require,module,exports) {
var memoize = require('./memoize');
/** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */ function memoizeCapped(func) {
    var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
        return key;
    });
    var cache = result.cache;
    return result;
}
module.exports = memoizeCapped;

},{"./memoize":"4xgqb"}],"4xgqb":[function(require,module,exports) {
var MapCache = require('./_MapCache');
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */ function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) return cache.get(key);
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
}
// Expose `MapCache`.
memoize.Cache = MapCache;
module.exports = memoize;

},{"./_MapCache":"4kfOI"}],"4rwnd":[function(require,module,exports) {
var isSymbol = require('./isSymbol');
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */ function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) return value;
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
module.exports = toKey;

},{"./isSymbol":"MKxtP"}],"3sdfZ":[function(require,module,exports) {
var baseToString = require('./_baseToString');
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? '' : baseToString(value);
}
module.exports = toString;

},{"./_baseToString":"TFBtd"}],"TFBtd":[function(require,module,exports) {
var Symbol1 = require('./_Symbol'), arrayMap = require('./_arrayMap'), isArray = require('./isArray'), isSymbol = require('./isSymbol');
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol1 ? Symbol1.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') return value;
    if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
    if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : '';
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
module.exports = baseToString;

},{"./_Symbol":"5ra8b","./_arrayMap":"QWvrI","./isArray":"4YX8m","./isSymbol":"MKxtP"}],"3B527":[function(require,module,exports) {
'use strict';
var isProduction = false;
function warning(condition, message) {
    if (!isProduction) {
        if (condition) return;
        var text = "Warning: " + message;
        if (typeof console !== 'undefined') console.warn(text);
        try {
            throw Error(text);
        } catch (x) {
        }
    }
}
module.exports = warning;

},{}],"3nUHV":[function(require,module,exports) {
'use strict';
var reactIs = require('react-is');
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {
};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {
                }
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"react-is":"68QIU"}],"68QIU":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"2onCQ"}],"2onCQ":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element1 = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element1;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"7kiHM":[function(require,module,exports) {
var baseClone = require('./_baseClone');
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */ function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}
module.exports = cloneDeep;

},{"./_baseClone":"3P5zz"}],"0BxMn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.addMethod = addMethod;
Object.defineProperty(exports, "MixedSchema", {
    enumerable: true,
    get: function() {
        return _mixed.default;
    }
});
Object.defineProperty(exports, "mixed", {
    enumerable: true,
    get: function() {
        return _mixed.create;
    }
});
Object.defineProperty(exports, "BooleanSchema", {
    enumerable: true,
    get: function() {
        return _boolean.default;
    }
});
Object.defineProperty(exports, "bool", {
    enumerable: true,
    get: function() {
        return _boolean.create;
    }
});
Object.defineProperty(exports, "boolean", {
    enumerable: true,
    get: function() {
        return _boolean.create;
    }
});
Object.defineProperty(exports, "StringSchema", {
    enumerable: true,
    get: function() {
        return _string.default;
    }
});
Object.defineProperty(exports, "string", {
    enumerable: true,
    get: function() {
        return _string.create;
    }
});
Object.defineProperty(exports, "NumberSchema", {
    enumerable: true,
    get: function() {
        return _number.default;
    }
});
Object.defineProperty(exports, "number", {
    enumerable: true,
    get: function() {
        return _number.create;
    }
});
Object.defineProperty(exports, "DateSchema", {
    enumerable: true,
    get: function() {
        return _date.default;
    }
});
Object.defineProperty(exports, "date", {
    enumerable: true,
    get: function() {
        return _date.create;
    }
});
Object.defineProperty(exports, "ObjectSchema", {
    enumerable: true,
    get: function() {
        return _object.default;
    }
});
Object.defineProperty(exports, "object", {
    enumerable: true,
    get: function() {
        return _object.create;
    }
});
Object.defineProperty(exports, "ArraySchema", {
    enumerable: true,
    get: function() {
        return _array.default;
    }
});
Object.defineProperty(exports, "array", {
    enumerable: true,
    get: function() {
        return _array.create;
    }
});
Object.defineProperty(exports, "ref", {
    enumerable: true,
    get: function() {
        return _Reference.create;
    }
});
Object.defineProperty(exports, "lazy", {
    enumerable: true,
    get: function() {
        return _Lazy.create;
    }
});
Object.defineProperty(exports, "ValidationError", {
    enumerable: true,
    get: function() {
        return _ValidationError.default;
    }
});
Object.defineProperty(exports, "reach", {
    enumerable: true,
    get: function() {
        return _reach.default;
    }
});
Object.defineProperty(exports, "isSchema", {
    enumerable: true,
    get: function() {
        return _isSchema.default;
    }
});
Object.defineProperty(exports, "setLocale", {
    enumerable: true,
    get: function() {
        return _setLocale.default;
    }
});
Object.defineProperty(exports, "BaseSchema", {
    enumerable: true,
    get: function() {
        return _schema.default;
    }
});
var _mixed = _interopRequireWildcard(require("./mixed"));
var _boolean = _interopRequireWildcard(require("./boolean"));
var _string = _interopRequireWildcard(require("./string"));
var _number = _interopRequireWildcard(require("./number"));
var _date = _interopRequireWildcard(require("./date"));
var _object = _interopRequireWildcard(require("./object"));
var _array = _interopRequireWildcard(require("./array"));
var _Reference = require("./Reference");
var _Lazy = require("./Lazy");
var _ValidationError = _interopRequireDefault(require("./ValidationError"));
var _reach = _interopRequireDefault(require("./util/reach"));
var _isSchema = _interopRequireDefault(require("./util/isSchema"));
var _setLocale = _interopRequireDefault(require("./setLocale"));
var _schema = _interopRequireDefault(require("./schema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function addMethod(schemaType, name, fn) {
    if (!schemaType || !_isSchema.default(schemaType.prototype)) throw new TypeError('You must provide a yup schema constructor function');
    if (typeof name !== 'string') throw new TypeError('A Method name must be provided');
    if (typeof fn !== 'function') throw new TypeError('Method function must be provided');
    schemaType.prototype[name] = fn;
}

},{"./mixed":"1IE9e","./boolean":"2Rjml","./string":"6wAI6","./number":"JVuaY","./date":"yFaoG","./object":"3a8EQ","./array":"4T7Do","./Reference":"1E5wM","./Lazy":"1Ap1p","./ValidationError":"5y69i","./util/reach":"6PSm9","./util/isSchema":"65x27","./setLocale":"47QVc","./schema":"28cJE"}],"1IE9e":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.create = create;
exports.default = void 0;
var _schema = _interopRequireDefault(require("./schema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const Mixed = _schema.default;
var _default = Mixed;
exports.default = _default;
function create() {
    return new Mixed();
} // XXX: this is using the Base schema so that `addMethod(mixed)` works as a base class
create.prototype = Mixed.prototype;

},{"./schema":"28cJE"}],"28cJE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _nanoclone = _interopRequireDefault(require("nanoclone"));
var _locale = require("./locale");
var _Condition = _interopRequireDefault(require("./Condition"));
var _runTests = _interopRequireDefault(require("./util/runTests"));
var _createValidation = _interopRequireDefault(require("./util/createValidation"));
var _printValue = _interopRequireDefault(require("./util/printValue"));
var _Reference = _interopRequireDefault(require("./Reference"));
var _reach = require("./util/reach");
var _toArray = _interopRequireDefault(require("./util/toArray"));
var _ValidationError = _interopRequireDefault(require("./ValidationError"));
var _ReferenceSet = _interopRequireDefault(require("./util/ReferenceSet"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
class BaseSchema {
    constructor(options1){
        this.deps = [];
        this.conditions = [];
        this._whitelist = new _ReferenceSet.default();
        this._blacklist = new _ReferenceSet.default();
        this.exclusiveTests = Object.create(null);
        this.tests = [];
        this.transforms = [];
        this.withMutation(()=>{
            this.typeError(_locale.mixed.notType);
        });
        this.type = (options1 == null ? void 0 : options1.type) || 'mixed';
        this.spec = _extends({
            strip: false,
            strict: false,
            abortEarly: true,
            recursive: true,
            nullable: false,
            presence: 'optional'
        }, options1 == null ? void 0 : options1.spec);
    }
    get _type() {
        return this.type;
    }
    _typeCheck(_value) {
        return true;
    }
    clone(spec) {
        if (this._mutate) {
            if (spec) Object.assign(this.spec, spec);
            return this;
        } // if the nested value is a schema we can skip cloning, since
        // they are already immutable
        const next = Object.create(Object.getPrototypeOf(this)); // @ts-expect-error this is readonly
        next.type = this.type;
        next._typeError = this._typeError;
        next._whitelistError = this._whitelistError;
        next._blacklistError = this._blacklistError;
        next._whitelist = this._whitelist.clone();
        next._blacklist = this._blacklist.clone();
        next.exclusiveTests = _extends({
        }, this.exclusiveTests); // @ts-expect-error this is readonly
        next.deps = [
            ...this.deps
        ];
        next.conditions = [
            ...this.conditions
        ];
        next.tests = [
            ...this.tests
        ];
        next.transforms = [
            ...this.transforms
        ];
        next.spec = _nanoclone.default(_extends({
        }, this.spec, spec));
        return next;
    }
    label(label) {
        var next = this.clone();
        next.spec.label = label;
        return next;
    }
    meta(...args) {
        if (args.length === 0) return this.spec.meta;
        let next = this.clone();
        next.spec.meta = Object.assign(next.spec.meta || {
        }, args[0]);
        return next;
    }
    //   TCast,
    //   TContext,
    //   TOutput
    // > {
    //   return this as any;
    // }
    withMutation(fn) {
        let before = this._mutate;
        this._mutate = true;
        let result = fn(this);
        this._mutate = before;
        return result;
    }
    concat(schema) {
        if (!schema || schema === this) return this;
        if (schema.type !== this.type && this.type !== 'mixed') throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${schema.type}`);
        let base = this;
        let combined = schema.clone();
        const mergedSpec = _extends({
        }, base.spec, combined.spec); // if (combined.spec.nullable === UNSET)
        //   mergedSpec.nullable = base.spec.nullable;
        // if (combined.spec.presence === UNSET)
        //   mergedSpec.presence = base.spec.presence;
        combined.spec = mergedSpec;
        combined._typeError || (combined._typeError = base._typeError);
        combined._whitelistError || (combined._whitelistError = base._whitelistError);
        combined._blacklistError || (combined._blacklistError = base._blacklistError); // manually merge the blacklist/whitelist (the other `schema` takes
        // precedence in case of conflicts)
        combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);
        combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist); // start with the current tests
        combined.tests = base.tests;
        combined.exclusiveTests = base.exclusiveTests; // manually add the new tests to ensure
        // the deduping logic is consistent
        combined.withMutation((next)=>{
            schema.tests.forEach((fn)=>{
                next.test(fn.OPTIONS);
            });
        });
        return combined;
    }
    isType(v) {
        if (this.spec.nullable && v === null) return true;
        return this._typeCheck(v);
    }
    resolve(options) {
        let schema = this;
        if (schema.conditions.length) {
            let conditions = schema.conditions;
            schema = schema.clone();
            schema.conditions = [];
            schema = conditions.reduce((schema1, condition)=>condition.resolve(schema1, options)
            , schema);
            schema = schema.resolve(options);
        }
        return schema;
    }
    /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {*=} options.parent
   * @param {*=} options.context
   */ cast(value, options = {
    }) {
        let resolvedSchema = this.resolve(_extends({
            value
        }, options));
        let result = resolvedSchema._cast(value, options);
        if (value !== undefined && options.assert !== false && resolvedSchema.isType(result) !== true) {
            let formattedValue = _printValue.default(value);
            let formattedResult = _printValue.default(result);
            throw new TypeError(`The value of ${options.path || 'field'} could not be cast to a value ` + `that satisfies the schema type: "${resolvedSchema._type}". \n\n` + `attempted value: ${formattedValue} \n` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ''));
        }
        return result;
    }
    _cast(rawValue, _options) {
        let value = rawValue === undefined ? rawValue : this.transforms.reduce((value1, fn)=>fn.call(this, value1, rawValue, this)
        , rawValue);
        if (value === undefined) value = this.getDefault();
        return value;
    }
    _validate(_value, options = {
    }, cb) {
        let { sync , path , from =[] , originalValue =_value , strict =this.spec.strict , abortEarly =this.spec.abortEarly  } = options;
        let value = _value;
        if (!strict) // this._validating = true;
        value = this._cast(value, _extends({
            assert: false
        }, options)); // this._validating = false;
         // value is cast, we can check if it meets type requirements
        let args = {
            value,
            path,
            options,
            originalValue,
            schema: this,
            label: this.spec.label,
            sync,
            from
        };
        let initialTests = [];
        if (this._typeError) initialTests.push(this._typeError);
        if (this._whitelistError) initialTests.push(this._whitelistError);
        if (this._blacklistError) initialTests.push(this._blacklistError);
        _runTests.default({
            args,
            value,
            path,
            sync,
            tests: initialTests,
            endEarly: abortEarly
        }, (err)=>{
            if (err) return void cb(err, value);
            _runTests.default({
                tests: this.tests,
                args,
                path,
                sync,
                value,
                endEarly: abortEarly
            }, cb);
        });
    }
    validate(value, options, maybeCb) {
        let schema = this.resolve(_extends({
        }, options, {
            value
        })); // callback case is for nested validations
        return typeof maybeCb === 'function' ? schema._validate(value, options, maybeCb) : new Promise((resolve, reject)=>schema._validate(value, options, (err, value)=>{
                if (err) reject(err);
                else resolve(value);
            })
        );
    }
    validateSync(value, options) {
        let schema = this.resolve(_extends({
        }, options, {
            value
        }));
        let result;
        schema._validate(value, _extends({
        }, options, {
            sync: true
        }), (err, value)=>{
            if (err) throw err;
            result = value;
        });
        return result;
    }
    isValid(value, options) {
        return this.validate(value, options).then(()=>true
        , (err)=>{
            if (_ValidationError.default.isError(err)) return false;
            throw err;
        });
    }
    isValidSync(value, options) {
        try {
            this.validateSync(value, options);
            return true;
        } catch (err) {
            if (_ValidationError.default.isError(err)) return false;
            throw err;
        }
    }
    _getDefault() {
        let defaultValue = this.spec.default;
        if (defaultValue == null) return defaultValue;
        return typeof defaultValue === 'function' ? defaultValue.call(this) : _nanoclone.default(defaultValue);
    }
    getDefault(options) {
        let schema = this.resolve(options || {
        });
        return schema._getDefault();
    }
    default(def) {
        if (arguments.length === 0) return this._getDefault();
        let next = this.clone({
            default: def
        });
        return next;
    }
    strict(isStrict = true) {
        var next = this.clone();
        next.spec.strict = isStrict;
        return next;
    }
    _isPresent(value) {
        return value != null;
    }
    defined(message = _locale.mixed.defined) {
        return this.test({
            message,
            name: 'defined',
            exclusive: true,
            test (value) {
                return value !== undefined;
            }
        });
    }
    required(message = _locale.mixed.required) {
        return this.clone({
            presence: 'required'
        }).withMutation((s)=>s.test({
                message,
                name: 'required',
                exclusive: true,
                test (value) {
                    return this.schema._isPresent(value);
                }
            })
        );
    }
    notRequired() {
        var next = this.clone({
            presence: 'optional'
        });
        next.tests = next.tests.filter((test)=>test.OPTIONS.name !== 'required'
        );
        return next;
    }
    nullable(isNullable = true) {
        var next = this.clone({
            nullable: isNullable !== false
        });
        return next;
    }
    transform(fn) {
        var next = this.clone();
        next.transforms.push(fn);
        return next;
    }
    /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */ test(...args) {
        let opts;
        if (args.length === 1) {
            if (typeof args[0] === 'function') opts = {
                test: args[0]
            };
            else opts = args[0];
        } else if (args.length === 2) opts = {
            name: args[0],
            test: args[1]
        };
        else opts = {
            name: args[0],
            message: args[1],
            test: args[2]
        };
        if (opts.message === undefined) opts.message = _locale.mixed.default;
        if (typeof opts.test !== 'function') throw new TypeError('`test` is a required parameters');
        let next = this.clone();
        let validate = _createValidation.default(opts);
        let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
        if (opts.exclusive) {
            if (!opts.name) throw new TypeError('Exclusive tests must provide a unique `name` identifying the test');
        }
        if (opts.name) next.exclusiveTests[opts.name] = !!opts.exclusive;
        next.tests = next.tests.filter((fn)=>{
            if (fn.OPTIONS.name === opts.name) {
                if (isExclusive) return false;
                if (fn.OPTIONS.test === validate.OPTIONS.test) return false;
            }
            return true;
        });
        next.tests.push(validate);
        return next;
    }
    when(keys, options) {
        if (!Array.isArray(keys) && typeof keys !== 'string') {
            options = keys;
            keys = '.';
        }
        let next = this.clone();
        let deps = _toArray.default(keys).map((key)=>new _Reference.default(key)
        );
        deps.forEach((dep)=>{
            // @ts-ignore
            if (dep.isSibling) next.deps.push(dep.key);
        });
        next.conditions.push(new _Condition.default(deps, options));
        return next;
    }
    typeError(message) {
        var next = this.clone();
        next._typeError = _createValidation.default({
            message,
            name: 'typeError',
            test (value) {
                if (value !== undefined && !this.schema.isType(value)) return this.createError({
                    params: {
                        type: this.schema._type
                    }
                });
                return true;
            }
        });
        return next;
    }
    oneOf(enums, message = _locale.mixed.oneOf) {
        var next = this.clone();
        enums.forEach((val)=>{
            next._whitelist.add(val);
            next._blacklist.delete(val);
        });
        next._whitelistError = _createValidation.default({
            message,
            name: 'oneOf',
            test (value) {
                if (value === undefined) return true;
                let valids = this.schema._whitelist;
                return valids.has(value, this.resolve) ? true : this.createError({
                    params: {
                        values: valids.toArray().join(', ')
                    }
                });
            }
        });
        return next;
    }
    notOneOf(enums, message = _locale.mixed.notOneOf) {
        var next = this.clone();
        enums.forEach((val)=>{
            next._blacklist.add(val);
            next._whitelist.delete(val);
        });
        next._blacklistError = _createValidation.default({
            message,
            name: 'notOneOf',
            test (value) {
                let invalids = this.schema._blacklist;
                if (invalids.has(value, this.resolve)) return this.createError({
                    params: {
                        values: invalids.toArray().join(', ')
                    }
                });
                return true;
            }
        });
        return next;
    }
    strip(strip = true) {
        let next = this.clone();
        next.spec.strip = strip;
        return next;
    }
    describe() {
        const next = this.clone();
        const { label , meta  } = next.spec;
        const description = {
            meta,
            label,
            type: next.type,
            oneOf: next._whitelist.describe(),
            notOneOf: next._blacklist.describe(),
            tests: next.tests.map((fn)=>({
                    name: fn.OPTIONS.name,
                    params: fn.OPTIONS.params
                })
            ).filter((n, idx, list)=>list.findIndex((c)=>c.name === n.name
                ) === idx
            )
        };
        return description;
    }
}
exports.default = BaseSchema;
// @ts-expect-error
BaseSchema.prototype.__isYupSchema__ = true;
for (const method of [
    'validate',
    'validateSync'
])BaseSchema.prototype[`${method}At`] = function(path, value, options2 = {
}) {
    const { parent , parentPath , schema  } = _reach.getIn(this, path, value, options2.context);
    return schema[method](parent && parent[parentPath], _extends({
    }, options2, {
        parent,
        path
    }));
};
for (const alias of [
    'equals',
    'is'
])BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;
for (const alias1 of [
    'not',
    'nope'
])BaseSchema.prototype[alias1] = BaseSchema.prototype.notOneOf;
BaseSchema.prototype.optional = BaseSchema.prototype.notRequired;

},{"nanoclone":"7bW6s","./locale":"34z7c","./Condition":"2ypoN","./util/runTests":"66KvR","./util/createValidation":"2s5xh","./util/printValue":"40hso","./Reference":"1E5wM","./util/reach":"6PSm9","./util/toArray":"4uxWW","./ValidationError":"5y69i","./util/ReferenceSet":"6K6KP"}],"7bW6s":[function(require,module,exports) {
'use strict';
// ES6 Map
var map;
try {
    map = Map;
} catch (_) {
}
var set;
// ES6 Set
try {
    set = Set;
} catch (_) {
}
function baseClone(src, circulars, clones) {
    // Null/undefined/functions/etc
    if (!src || typeof src !== 'object' || typeof src === 'function') return src;
    // DOM Node
    if (src.nodeType && 'cloneNode' in src) return src.cloneNode(true);
    // Date
    if (src instanceof Date) return new Date(src.getTime());
    // RegExp
    if (src instanceof RegExp) return new RegExp(src);
    // Arrays
    if (Array.isArray(src)) return src.map(clone);
    // ES6 Maps
    if (map && src instanceof map) return new Map(Array.from(src.entries()));
    // ES6 Sets
    if (set && src instanceof set) return new Set(Array.from(src.values()));
    // Object
    if (src instanceof Object) {
        circulars.push(src);
        var obj = Object.create(src);
        clones.push(obj);
        for(var key in src){
            var idx = circulars.findIndex(function(i) {
                return i === src[key];
            });
            obj[key] = idx > -1 ? clones[idx] : baseClone(src[key], circulars, clones);
        }
        return obj;
    }
    // ???
    return src;
}
function clone(src) {
    return baseClone(src, [], []);
}
module.exports = clone;

},{}],"34z7c":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.array = exports.object = exports.boolean = exports.date = exports.number = exports.string = exports.mixed = void 0;
var _printValue = _interopRequireDefault(require("./util/printValue"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let mixed = {
    default: '${path} is invalid',
    required: '${path} is a required field',
    oneOf: '${path} must be one of the following values: ${values}',
    notOneOf: '${path} must not be one of the following values: ${values}',
    notType: ({ path , type , value , originalValue  })=>{
        let isCast = originalValue != null && originalValue !== value;
        let msg = `${path} must be a \`${type}\` type, ` + `but the final value was: \`${_printValue.default(value, true)}\`` + (isCast ? ` (cast from the value \`${_printValue.default(originalValue, true)}\`).` : '.');
        if (value === null) msg += `\n If "null" is intended as an empty value be sure to mark the schema as \`.nullable()\``;
        return msg;
    },
    defined: '${path} must be defined'
};
exports.mixed = mixed;
let string = {
    length: '${path} must be exactly ${length} characters',
    min: '${path} must be at least ${min} characters',
    max: '${path} must be at most ${max} characters',
    matches: '${path} must match the following: "${regex}"',
    email: '${path} must be a valid email',
    url: '${path} must be a valid URL',
    uuid: '${path} must be a valid UUID',
    trim: '${path} must be a trimmed string',
    lowercase: '${path} must be a lowercase string',
    uppercase: '${path} must be a upper case string'
};
exports.string = string;
let number = {
    min: '${path} must be greater than or equal to ${min}',
    max: '${path} must be less than or equal to ${max}',
    lessThan: '${path} must be less than ${less}',
    moreThan: '${path} must be greater than ${more}',
    positive: '${path} must be a positive number',
    negative: '${path} must be a negative number',
    integer: '${path} must be an integer'
};
exports.number = number;
let date = {
    min: '${path} field must be later than ${min}',
    max: '${path} field must be at earlier than ${max}'
};
exports.date = date;
let boolean = {
    isValue: '${path} field must be ${value}'
};
exports.boolean = boolean;
let object = {
    noUnknown: '${path} field has unspecified keys: ${unknown}'
};
exports.object = object;
let array = {
    min: '${path} field must have at least ${min} items',
    max: '${path} field must have less than or equal to ${max} items',
    length: '${path} must be have ${length} items'
};
exports.array = array;
var _default = Object.assign(Object.create(null), {
    mixed,
    string,
    number,
    date,
    object,
    array,
    boolean
});
exports.default = _default;

},{"./util/printValue":"40hso"}],"40hso":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = printValue;
const toString = Object.prototype.toString;
const errorToString = Error.prototype.toString;
const regExpToString = RegExp.prototype.toString;
const symbolToString = typeof Symbol !== 'undefined' ? Symbol.prototype.toString : ()=>''
;
const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
function printNumber(val) {
    if (val != +val) return 'NaN';
    const isNegativeZero = val === 0 && 1 / val < 0;
    return isNegativeZero ? '-0' : '' + val;
}
function printSimpleValue(val, quoteStrings = false) {
    if (val == null || val === true || val === false) return '' + val;
    const typeOf = typeof val;
    if (typeOf === 'number') return printNumber(val);
    if (typeOf === 'string') return quoteStrings ? `"${val}"` : val;
    if (typeOf === 'function') return '[Function ' + (val.name || 'anonymous') + ']';
    if (typeOf === 'symbol') return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
    const tag = toString.call(val).slice(8, -1);
    if (tag === 'Date') return isNaN(val.getTime()) ? '' + val : val.toISOString(val);
    if (tag === 'Error' || val instanceof Error) return '[' + errorToString.call(val) + ']';
    if (tag === 'RegExp') return regExpToString.call(val);
    return null;
}
function printValue(value, quoteStrings) {
    let result = printSimpleValue(value, quoteStrings);
    if (result !== null) return result;
    return JSON.stringify(value, function(key, value1) {
        let result1 = printSimpleValue(this[key], quoteStrings);
        if (result1 !== null) return result1;
        return value1;
    }, 2);
}

},{}],"2ypoN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _has = _interopRequireDefault(require("lodash/has"));
var _isSchema = _interopRequireDefault(require("./util/isSchema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class Condition {
    constructor(refs, options1){
        this.refs = refs;
        this.refs = refs;
        if (typeof options1 === 'function') {
            this.fn = options1;
            return;
        }
        if (!_has.default(options1, 'is')) throw new TypeError('`is:` is required for `when()` conditions');
        if (!options1.then && !options1.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');
        let { is , then , otherwise  } = options1;
        let check = typeof is === 'function' ? is : (...values)=>values.every((value)=>value === is
            )
        ;
        this.fn = function(...args) {
            let options1 = args.pop();
            let schema = args.pop();
            let branch = check(...args) ? then : otherwise;
            if (!branch) return undefined;
            if (typeof branch === 'function') return branch(schema);
            return schema.concat(branch.resolve(options1));
        };
    }
    resolve(base, options) {
        let values = this.refs.map((ref)=>ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context)
        );
        let schema = this.fn.apply(base, values.concat(base, options));
        if (schema === undefined || schema === base) return base;
        if (!_isSchema.default(schema)) throw new TypeError('conditions must return a schema object');
        return schema.resolve(options);
    }
}
var _default = Condition;
exports.default = _default;

},{"lodash/has":"7isvd","./util/isSchema":"65x27"}],"7isvd":[function(require,module,exports) {
var baseHas = require('./_baseHas'), hasPath = require('./_hasPath');
/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */ function has(object, path) {
    return object != null && hasPath(object, path, baseHas);
}
module.exports = has;

},{"./_baseHas":"4STok","./_hasPath":"5gRNc"}],"4STok":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */ function baseHas(object, key) {
    return object != null && hasOwnProperty.call(object, key);
}
module.exports = baseHas;

},{}],"5gRNc":[function(require,module,exports) {
var castPath = require('./_castPath'), isArguments = require('./isArguments'), isArray = require('./isArray'), isIndex = require('./_isIndex'), isLength = require('./isLength'), toKey = require('./_toKey');
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */ function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1, length = path.length, result = false;
    while((++index) < length){
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) break;
        object = object[key];
    }
    if (result || (++index) != length) return result;
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}
module.exports = hasPath;

},{"./_castPath":"7pi32","./isArguments":"5NBLh","./isArray":"4YX8m","./_isIndex":"6v9Js","./isLength":"6rNjU","./_toKey":"4rwnd"}],"7pi32":[function(require,module,exports) {
var isArray = require('./isArray'), isKey = require('./_isKey'), stringToPath = require('./_stringToPath'), toString = require('./toString');
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */ function castPath(value, object) {
    if (isArray(value)) return value;
    return isKey(value, object) ? [
        value
    ] : stringToPath(toString(value));
}
module.exports = castPath;

},{"./isArray":"4YX8m","./_isKey":"7x4uO","./_stringToPath":"3atND","./toString":"3sdfZ"}],"7x4uO":[function(require,module,exports) {
var isArray = require('./isArray'), isSymbol = require('./isSymbol');
/** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */ function isKey(value, object) {
    if (isArray(value)) return false;
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) return true;
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
module.exports = isKey;

},{"./isArray":"4YX8m","./isSymbol":"MKxtP"}],"65x27":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _default = (obj)=>obj && obj.__isYupSchema__
;
exports.default = _default;

},{}],"66KvR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = runTests;
var _ValidationError = _interopRequireDefault(require("../ValidationError"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const once = (cb)=>{
    let fired = false;
    return (...args)=>{
        if (fired) return;
        fired = true;
        cb(...args);
    };
};
function runTests(options, cb) {
    let { endEarly , tests , args , value , errors , sort , path  } = options;
    let callback = once(cb);
    let count = tests.length;
    const nestedErrors = [];
    errors = errors ? errors : [];
    if (!count) return errors.length ? callback(new _ValidationError.default(errors, value, path)) : callback(null, value);
    for(let i = 0; i < tests.length; i++){
        const test = tests[i];
        test(args, function finishTestRun(err) {
            if (err) {
                // always return early for non validation errors
                if (!_ValidationError.default.isError(err)) return callback(err, value);
                if (endEarly) {
                    err.value = value;
                    return callback(err, value);
                }
                nestedErrors.push(err);
            }
            if ((--count) <= 0) {
                if (nestedErrors.length) {
                    if (sort) nestedErrors.sort(sort); //show parent errors after the nested ones: name.first, name
                    if (errors.length) nestedErrors.push(...errors);
                    errors = nestedErrors;
                }
                if (errors.length) {
                    callback(new _ValidationError.default(errors, value, path), value);
                    return;
                }
                callback(null, value);
            }
        });
    }
}

},{"../ValidationError":"5y69i"}],"5y69i":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _printValue = _interopRequireDefault(require("./util/printValue"));
var _toArray = _interopRequireDefault(require("./util/toArray"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
let strReg = /\$\{\s*(\w+)\s*\}/g;
class ValidationError extends Error {
    static formatError(message, params) {
        const path = params.label || params.path || 'this';
        if (path !== params.path) params = _extends({
        }, params, {
            path
        });
        if (typeof message === 'string') return message.replace(strReg, (_, key)=>_printValue.default(params[key])
        );
        if (typeof message === 'function') return message(params);
        return message;
    }
    static isError(err) {
        return err && err.name === 'ValidationError';
    }
    constructor(errorOrErrors, value, field, type){
        super();
        this.name = 'ValidationError';
        this.value = value;
        this.path = field;
        this.type = type;
        this.errors = [];
        this.inner = [];
        _toArray.default(errorOrErrors).forEach((err)=>{
            if (ValidationError.isError(err)) {
                this.errors.push(...err.errors);
                this.inner = this.inner.concat(err.inner.length ? err.inner : err);
            } else this.errors.push(err);
        });
        this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
        if (Error.captureStackTrace) Error.captureStackTrace(this, ValidationError);
    }
}
exports.default = ValidationError;

},{"./util/printValue":"40hso","./util/toArray":"4uxWW"}],"4uxWW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = toArray;
function toArray(value) {
    return value == null ? [] : [].concat(value);
}

},{}],"2s5xh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = createValidation;
var _mapValues = _interopRequireDefault(require("lodash/mapValues"));
var _ValidationError = _interopRequireDefault(require("../ValidationError"));
var _Reference = _interopRequireDefault(require("../Reference"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function createValidation(config) {
    function validate(_ref, cb) {
        let { value , path ='' , label , options , originalValue , sync  } = _ref, rest = _objectWithoutPropertiesLoose(_ref, [
            "value",
            "path",
            "label",
            "options",
            "originalValue",
            "sync"
        ]);
        const { name , test , params , message  } = config;
        let { parent , context  } = options;
        function resolve(item) {
            return _Reference.default.isRef(item) ? item.getValue(value, parent, context) : item;
        }
        function createError(overrides = {
        }) {
            const nextParams = _mapValues.default(_extends({
                value,
                originalValue,
                label,
                path: overrides.path || path
            }, params, overrides.params), resolve);
            const error = new _ValidationError.default(_ValidationError.default.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name);
            error.params = nextParams;
            return error;
        }
        let ctx = _extends({
            path,
            parent,
            type: name,
            createError,
            resolve,
            options,
            originalValue
        }, rest);
        if (!sync) {
            try {
                Promise.resolve(test.call(ctx, value, ctx)).then((validOrError)=>{
                    if (_ValidationError.default.isError(validOrError)) cb(validOrError);
                    else if (!validOrError) cb(createError());
                    else cb(null, validOrError);
                });
            } catch (err) {
                cb(err);
            }
            return;
        }
        let result;
        try {
            var _ref2;
            result = test.call(ctx, value, ctx);
            if (typeof ((_ref2 = result) == null ? void 0 : _ref2.then) === 'function') throw new Error(`Validation test of type: "${ctx.type}" returned a Promise during a synchronous validate. ` + `This test will finish after the validate call has returned`);
        } catch (err) {
            cb(err);
            return;
        }
        if (_ValidationError.default.isError(result)) cb(result);
        else if (!result) cb(createError());
        else cb(null, result);
    }
    validate.OPTIONS = config;
    return validate;
}

},{"lodash/mapValues":"16p7A","../ValidationError":"5y69i","../Reference":"1E5wM"}],"16p7A":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'), baseForOwn = require('./_baseForOwn'), baseIteratee = require('./_baseIteratee');
/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */ function mapValues(object, iteratee) {
    var result = {
    };
    iteratee = baseIteratee(iteratee, 3);
    baseForOwn(object, function(value, key, object1) {
        baseAssignValue(result, key, iteratee(value, key, object1));
    });
    return result;
}
module.exports = mapValues;

},{"./_baseAssignValue":"3nIC3","./_baseForOwn":"6QRyf","./_baseIteratee":"6BtQg"}],"6QRyf":[function(require,module,exports) {
var baseFor = require('./_baseFor'), keys = require('./keys');
/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */ function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
}
module.exports = baseForOwn;

},{"./_baseFor":"5CuUz","./keys":"31WSp"}],"5CuUz":[function(require,module,exports) {
var createBaseFor = require('./_createBaseFor');
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */ var baseFor = createBaseFor();
module.exports = baseFor;

},{"./_createBaseFor":"5KwIm"}],"5KwIm":[function(require,module,exports) {
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while(length--){
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) break;
        }
        return object;
    };
}
module.exports = createBaseFor;

},{}],"6BtQg":[function(require,module,exports) {
var baseMatches = require('./_baseMatches'), baseMatchesProperty = require('./_baseMatchesProperty'), identity = require('./identity'), isArray = require('./isArray'), property = require('./property');
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */ function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') return value;
    if (value == null) return identity;
    if (typeof value == 'object') return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    return property(value);
}
module.exports = baseIteratee;

},{"./_baseMatches":"61yQO","./_baseMatchesProperty":"4BPnB","./identity":"2uCOk","./isArray":"4YX8m","./property":"1q0zR"}],"61yQO":[function(require,module,exports) {
var baseIsMatch = require('./_baseIsMatch'), getMatchData = require('./_getMatchData'), matchesStrictComparable = require('./_matchesStrictComparable');
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
    };
}
module.exports = baseMatches;

},{"./_baseIsMatch":"1mTK1","./_getMatchData":"3r2W3","./_matchesStrictComparable":"1UE5j"}],"1mTK1":[function(require,module,exports) {
var Stack = require('./_Stack'), baseIsEqual = require('./_baseIsEqual');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */ function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) return !length;
    object = Object(object);
    while(index--){
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
    }
    while((++index) < length){
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) return false;
        } else {
            var stack = new Stack;
            if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
            if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
        }
    }
    return true;
}
module.exports = baseIsMatch;

},{"./_Stack":"3G0mk","./_baseIsEqual":"LqWEv"}],"LqWEv":[function(require,module,exports) {
var baseIsEqualDeep = require('./_baseIsEqualDeep'), isObjectLike = require('./isObjectLike');
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */ function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) return true;
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":"7BV2z","./isObjectLike":"2rzfJ"}],"7BV2z":[function(require,module,exports) {
var Stack = require('./_Stack'), equalArrays = require('./_equalArrays'), equalByTag = require('./_equalByTag'), equalObjects = require('./_equalObjects'), getTag = require('./_getTag'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isTypedArray = require('./isTypedArray');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', objectTag = '[object Object]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) return false;
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) return false;
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = baseIsEqualDeep;

},{"./_Stack":"3G0mk","./_equalArrays":"6e7vf","./_equalByTag":"McrXm","./_equalObjects":"3RuPz","./_getTag":"7bwaZ","./isArray":"4YX8m","./isBuffer":"4KS4E","./isTypedArray":"42Baw"}],"6e7vf":[function(require,module,exports) {
var SetCache = require('./_SetCache'), arraySome = require('./_arraySome'), cacheHas = require('./_cacheHas');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
    stack.set(array, other);
    stack.set(other, array);
    // Ignore non-index properties.
    while((++index) < arrLength){
        var arrValue = array[index], othValue = other[index];
        if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        if (compared !== undefined) {
            if (compared) continue;
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (!arraySome(other, function(othValue1, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue1 || equalFunc(arrValue, othValue1, bitmask, customizer, stack))) return seen.push(othIndex);
            })) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
}
module.exports = equalArrays;

},{"./_SetCache":"4dpPl","./_arraySome":"g022X","./_cacheHas":"1VpDU"}],"4dpPl":[function(require,module,exports) {
var MapCache = require('./_MapCache'), setCacheAdd = require('./_setCacheAdd'), setCacheHas = require('./_setCacheHas');
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache;
    while((++index) < length)this.add(values[index]);
}
// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

},{"./_MapCache":"4kfOI","./_setCacheAdd":"4P54Z","./_setCacheHas":"3UQrY"}],"4P54Z":[function(require,module,exports) {
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}
module.exports = setCacheAdd;

},{}],"3UQrY":[function(require,module,exports) {
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function setCacheHas(value) {
    return this.__data__.has(value);
}
module.exports = setCacheHas;

},{}],"g022X":[function(require,module,exports) {
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while((++index) < length){
        if (predicate(array[index], index, array)) return true;
    }
    return false;
}
module.exports = arraySome;

},{}],"1VpDU":[function(require,module,exports) {
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function cacheHas(cache, key) {
    return cache.has(key);
}
module.exports = cacheHas;

},{}],"McrXm":[function(require,module,exports) {
var Symbol1 = require('./_Symbol'), Uint8Array1 = require('./_Uint8Array'), eq = require('./eq'), equalArrays = require('./_equalArrays'), mapToArray = require('./_mapToArray'), setToArray = require('./_setToArray');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol1 ? Symbol1.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch(tag){
        case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
            object = object.buffer;
            other = other.buffer;
        case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array1(object), new Uint8Array1(other))) return false;
            return true;
        case boolTag:
        case dateTag:
        case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';
        case mapTag:
            var convert = mapToArray;
        case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) return false;
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) return stacked == other;
            bitmask |= COMPARE_UNORDERED_FLAG;
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;
        case symbolTag:
            if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
    }
    return false;
}
module.exports = equalByTag;

},{"./_Symbol":"5ra8b","./_Uint8Array":"3l5Sb","./eq":"J0MWH","./_equalArrays":"6e7vf","./_mapToArray":"6F6V3","./_setToArray":"6jKH7"}],"6F6V3":[function(require,module,exports) {
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */ function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
        result[++index] = [
            key,
            value
        ];
    });
    return result;
}
module.exports = mapToArray;

},{}],"6jKH7":[function(require,module,exports) {
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */ function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = value;
    });
    return result;
}
module.exports = setToArray;

},{}],"3RuPz":[function(require,module,exports) {
var getAllKeys = require('./_getAllKeys');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) return false;
    var index = objLength;
    while(index--){
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) return objStacked == other && othStacked == object;
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while((++index) < objLength){
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) result = false;
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
}
module.exports = equalObjects;

},{"./_getAllKeys":"4eZXB"}],"3r2W3":[function(require,module,exports) {
var isStrictComparable = require('./_isStrictComparable'), keys = require('./keys');
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */ function getMatchData(object) {
    var result = keys(object), length = result.length;
    while(length--){
        var key = result[length], value = object[key];
        result[length] = [
            key,
            value,
            isStrictComparable(value)
        ];
    }
    return result;
}
module.exports = getMatchData;

},{"./_isStrictComparable":"41zy9","./keys":"31WSp"}],"41zy9":[function(require,module,exports) {
var isObject = require('./isObject');
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */ function isStrictComparable(value) {
    return value === value && !isObject(value);
}
module.exports = isStrictComparable;

},{"./isObject":"3LQRi"}],"1UE5j":[function(require,module,exports) {
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function matchesStrictComparable(key, srcValue) {
    return function(object) {
        if (object == null) return false;
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
}
module.exports = matchesStrictComparable;

},{}],"4BPnB":[function(require,module,exports) {
var baseIsEqual = require('./_baseIsEqual'), get = require('./get'), hasIn = require('./hasIn'), isKey = require('./_isKey'), isStrictComparable = require('./_isStrictComparable'), matchesStrictComparable = require('./_matchesStrictComparable'), toKey = require('./_toKey');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
    return function(object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
}
module.exports = baseMatchesProperty;

},{"./_baseIsEqual":"LqWEv","./get":"50hr1","./hasIn":"15dGH","./_isKey":"7x4uO","./_isStrictComparable":"41zy9","./_matchesStrictComparable":"1UE5j","./_toKey":"4rwnd"}],"50hr1":[function(require,module,exports) {
var baseGet = require('./_baseGet');
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */ function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
}
module.exports = get;

},{"./_baseGet":"46Wis"}],"46Wis":[function(require,module,exports) {
var castPath = require('./_castPath'), toKey = require('./_toKey');
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */ function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0, length = path.length;
    while(object != null && index < length)object = object[toKey(path[index++])];
    return index && index == length ? object : undefined;
}
module.exports = baseGet;

},{"./_castPath":"7pi32","./_toKey":"4rwnd"}],"15dGH":[function(require,module,exports) {
var baseHasIn = require('./_baseHasIn'), hasPath = require('./_hasPath');
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */ function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
}
module.exports = hasIn;

},{"./_baseHasIn":"2Mdto","./_hasPath":"5gRNc"}],"2Mdto":[function(require,module,exports) {
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */ function baseHasIn(object, key) {
    return object != null && key in Object(object);
}
module.exports = baseHasIn;

},{}],"2uCOk":[function(require,module,exports) {
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */ function identity(value) {
    return value;
}
module.exports = identity;

},{}],"1q0zR":[function(require,module,exports) {
var baseProperty = require('./_baseProperty'), basePropertyDeep = require('./_basePropertyDeep'), isKey = require('./_isKey'), toKey = require('./_toKey');
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */ function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
module.exports = property;

},{"./_baseProperty":"5LylK","./_basePropertyDeep":"0L2OF","./_isKey":"7x4uO","./_toKey":"4rwnd"}],"5LylK":[function(require,module,exports) {
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function baseProperty(key) {
    return function(object) {
        return object == null ? undefined : object[key];
    };
}
module.exports = baseProperty;

},{}],"0L2OF":[function(require,module,exports) {
var baseGet = require('./_baseGet');
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyDeep(path) {
    return function(object) {
        return baseGet(object, path);
    };
}
module.exports = basePropertyDeep;

},{"./_baseGet":"46Wis"}],"1E5wM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.create = create;
exports.default = void 0;
var _propertyExpr = require("property-expr");
const prefixes = {
    context: '$',
    value: '.'
};
function create(key, options) {
    return new Reference(key, options);
}
class Reference {
    constructor(key, options1 = {
    }){
        if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);
        this.key = key.trim();
        if (key === '') throw new TypeError('ref must be a non-empty string');
        this.isContext = this.key[0] === prefixes.context;
        this.isValue = this.key[0] === prefixes.value;
        this.isSibling = !this.isContext && !this.isValue;
        let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';
        this.path = this.key.slice(prefix.length);
        this.getter = this.path && _propertyExpr.getter(this.path, true);
        this.map = options1.map;
    }
    getValue(value, parent, context) {
        let result = this.isContext ? context : this.isValue ? value : parent;
        if (this.getter) result = this.getter(result || {
        });
        if (this.map) result = this.map(result);
        return result;
    }
    /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */ cast(value, options) {
        return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
    }
    resolve() {
        return this;
    }
    describe() {
        return {
            type: 'ref',
            key: this.key
        };
    }
    toString() {
        return `Ref(${this.key})`;
    }
    static isRef(value) {
        return value && value.__isYupRef;
    }
} // @ts-ignore
exports.default = Reference;
Reference.prototype.__isYupRef = true;

},{"property-expr":"4yV3q"}],"4yV3q":[function(require,module,exports) {
/**
 * Based on Kendo UI Core expression code <https://github.com/telerik/kendo-ui-core#license-information>
 */ 'use strict';
function Cache1(maxSize) {
    this._maxSize = maxSize;
    this.clear();
}
Cache1.prototype.clear = function() {
    this._size = 0;
    this._values = Object.create(null);
};
Cache1.prototype.get = function(key) {
    return this._values[key];
};
Cache1.prototype.set = function(key, value) {
    this._size >= this._maxSize && this.clear();
    if (!(key in this._values)) this._size++;
    return this._values[key] = value;
};
var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g, DIGIT_REGEX = /^\d+$/, LEAD_DIGIT_REGEX = /^\d/, SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g, CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/, MAX_CACHE_SIZE = 512;
var pathCache = new Cache1(MAX_CACHE_SIZE), setCache = new Cache1(MAX_CACHE_SIZE), getCache = new Cache1(MAX_CACHE_SIZE);
var config;
module.exports = {
    Cache: Cache1,
    split: split,
    normalizePath: normalizePath,
    setter: function(path) {
        var parts = normalizePath(path);
        return setCache.get(path) || setCache.set(path, function setter(obj, value) {
            var index = 0;
            var len = parts.length;
            var data = obj;
            while(index < len - 1){
                var part = parts[index];
                if (part === '__proto__' || part === 'constructor' || part === 'prototype') return obj;
                data = data[parts[index++]];
            }
            data[parts[index]] = value;
        });
    },
    getter: function(path, safe) {
        var parts = normalizePath(path);
        return getCache.get(path) || getCache.set(path, function getter(data) {
            var index = 0, len = parts.length;
            while(index < len){
                if (data != null || !safe) data = data[parts[index++]];
                else return;
            }
            return data;
        });
    },
    join: function(segments) {
        return segments.reduce(function(path, part) {
            return path + (isQuoted(part) || DIGIT_REGEX.test(part) ? '[' + part + ']' : (path ? '.' : '') + part);
        }, '');
    },
    forEach: function(path, cb, thisArg) {
        forEach(Array.isArray(path) ? path : split(path), cb, thisArg);
    }
};
function normalizePath(path) {
    return pathCache.get(path) || pathCache.set(path, split(path).map(function(part) {
        return part.replace(CLEAN_QUOTES_REGEX, '$2');
    }));
}
function split(path) {
    return path.match(SPLIT_REGEX);
}
function forEach(parts, iter, thisArg) {
    var len = parts.length, part, idx, isArray, isBracket;
    for(idx = 0; idx < len; idx++){
        part = parts[idx];
        if (part) {
            if (shouldBeQuoted(part)) part = '"' + part + '"';
            isBracket = isQuoted(part);
            isArray = !isBracket && /^\d+$/.test(part);
            iter.call(thisArg, part, isBracket, isArray, idx, parts);
        }
    }
}
function isQuoted(str) {
    return typeof str === 'string' && str && [
        "'",
        '"'
    ].indexOf(str.charAt(0)) !== -1;
}
function hasLeadingNumber(part) {
    return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
}
function hasSpecialChars(part) {
    return SPEC_CHAR_REGEX.test(part);
}
function shouldBeQuoted(part) {
    return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
}

},{}],"6PSm9":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getIn = getIn;
exports.default = void 0;
var _propertyExpr = require("property-expr");
let trim = (part)=>part.substr(0, part.length - 1).substr(1)
;
function getIn(schema, path, value, context = value) {
    let parent, lastPart, lastPartDebug; // root path: ''
    if (!path) return {
        parent,
        parentPath: path,
        schema
    };
    _propertyExpr.forEach(path, (_part, isBracket, isArray)=>{
        let part = isBracket ? trim(_part) : _part;
        schema = schema.resolve({
            context,
            parent,
            value
        });
        if (schema.innerType) {
            let idx = isArray ? parseInt(part, 10) : 0;
            if (value && idx >= value.length) throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path}. ` + `because there is no value at that index. `);
            parent = value;
            value = value && value[idx];
            schema = schema.innerType;
        } // sometimes the array index part of a path doesn't exist: "nested.arr.child"
        // in these cases the current part is the next schema and should be processed
        // in this iteration. For cases where the index signature is included this
        // check will fail and we'll handle the `child` part on the next iteration like normal
        if (!isArray) {
            if (!schema.fields || !schema.fields[part]) throw new Error(`The schema does not contain the path: ${path}. ` + `(failed at: ${lastPartDebug} which is a type: "${schema._type}")`);
            parent = value;
            value = value && value[part];
            schema = schema.fields[part];
        }
        lastPart = part;
        lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;
    });
    return {
        schema,
        parent,
        parentPath: lastPart
    };
}
const reach = (obj, path, value, context)=>getIn(obj, path, value, context).schema
;
var _default = reach;
exports.default = _default;

},{"property-expr":"4yV3q"}],"6K6KP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _Reference = _interopRequireDefault(require("../Reference"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class ReferenceSet {
    constructor(){
        this.list = new Set();
        this.refs = new Map();
    }
    get size() {
        return this.list.size + this.refs.size;
    }
    describe() {
        const description = [];
        for (const item of this.list)description.push(item);
        for (const [, ref] of this.refs)description.push(ref.describe());
        return description;
    }
    toArray() {
        return Array.from(this.list).concat(Array.from(this.refs.values()));
    }
    add(value) {
        _Reference.default.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);
    }
    delete(value) {
        _Reference.default.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);
    }
    has(value, resolve) {
        if (this.list.has(value)) return true;
        let item, values = this.refs.values();
        while(item = values.next(), !item.done)if (resolve(item.value) === value) return true;
        return false;
    }
    clone() {
        const next = new ReferenceSet();
        next.list = new Set(this.list);
        next.refs = new Map(this.refs);
        return next;
    }
    merge(newItems, removeItems) {
        const next = this.clone();
        newItems.list.forEach((value)=>next.add(value)
        );
        newItems.refs.forEach((value)=>next.add(value)
        );
        removeItems.list.forEach((value)=>next.delete(value)
        );
        removeItems.refs.forEach((value)=>next.delete(value)
        );
        return next;
    }
}
exports.default = ReferenceSet;

},{"../Reference":"1E5wM"}],"2Rjml":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.create = create;
exports.default = void 0;
var _schema = _interopRequireDefault(require("./schema"));
var _locale = require("./locale");
var _isAbsent = _interopRequireDefault(require("./util/isAbsent"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function create() {
    return new BooleanSchema();
}
class BooleanSchema extends _schema.default {
    constructor(){
        super({
            type: 'boolean'
        });
        this.withMutation(()=>{
            this.transform(function(value) {
                if (!this.isType(value)) {
                    if (/^(true|1)$/i.test(String(value))) return true;
                    if (/^(false|0)$/i.test(String(value))) return false;
                }
                return value;
            });
        });
    }
    _typeCheck(v) {
        if (v instanceof Boolean) v = v.valueOf();
        return typeof v === 'boolean';
    }
    isTrue(message = _locale.boolean.isValue) {
        return this.test({
            message,
            name: 'is-value',
            exclusive: true,
            params: {
                value: 'true'
            },
            test (value) {
                return _isAbsent.default(value) || value === true;
            }
        });
    }
    isFalse(message = _locale.boolean.isValue) {
        return this.test({
            message,
            name: 'is-value',
            exclusive: true,
            params: {
                value: 'false'
            },
            test (value) {
                return _isAbsent.default(value) || value === false;
            }
        });
    }
}
exports.default = BooleanSchema;
create.prototype = BooleanSchema.prototype;

},{"./schema":"28cJE","./locale":"34z7c","./util/isAbsent":"3IPbe"}],"3IPbe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _default = (value)=>value == null
;
exports.default = _default;

},{}],"6wAI6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.create = create;
exports.default = void 0;
var _locale = require("./locale");
var _isAbsent = _interopRequireDefault(require("./util/isAbsent"));
var _schema = _interopRequireDefault(require("./schema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// eslint-disable-next-line
let rEmail = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i; // eslint-disable-next-line
let rUrl = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i; // eslint-disable-next-line
let rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
let isTrimmed = (value)=>_isAbsent.default(value) || value === value.trim()
;
let objStringTag = ({
}).toString();
function create() {
    return new StringSchema();
}
class StringSchema extends _schema.default {
    constructor(){
        super({
            type: 'string'
        });
        this.withMutation(()=>{
            this.transform(function(value) {
                if (this.isType(value)) return value;
                if (Array.isArray(value)) return value;
                const strValue = value != null && value.toString ? value.toString() : value;
                if (strValue === objStringTag) return value;
                return strValue;
            });
        });
    }
    _typeCheck(value) {
        if (value instanceof String) value = value.valueOf();
        return typeof value === 'string';
    }
    _isPresent(value) {
        return super._isPresent(value) && !!value.length;
    }
    length(length, message = _locale.string.length) {
        return this.test({
            message,
            name: 'length',
            exclusive: true,
            params: {
                length
            },
            test (value) {
                return _isAbsent.default(value) || value.length === this.resolve(length);
            }
        });
    }
    min(min, message = _locale.string.min) {
        return this.test({
            message,
            name: 'min',
            exclusive: true,
            params: {
                min
            },
            test (value) {
                return _isAbsent.default(value) || value.length >= this.resolve(min);
            }
        });
    }
    max(max, message = _locale.string.max) {
        return this.test({
            name: 'max',
            exclusive: true,
            message,
            params: {
                max
            },
            test (value) {
                return _isAbsent.default(value) || value.length <= this.resolve(max);
            }
        });
    }
    matches(regex, options) {
        let excludeEmptyString = false;
        let message;
        let name;
        if (options) {
            if (typeof options === 'object') ({ excludeEmptyString =false , message , name  } = options);
            else message = options;
        }
        return this.test({
            name: name || 'matches',
            message: message || _locale.string.matches,
            params: {
                regex
            },
            test: (value)=>_isAbsent.default(value) || value === '' && excludeEmptyString || value.search(regex) !== -1
        });
    }
    email(message = _locale.string.email) {
        return this.matches(rEmail, {
            name: 'email',
            message,
            excludeEmptyString: true
        });
    }
    url(message = _locale.string.url) {
        return this.matches(rUrl, {
            name: 'url',
            message,
            excludeEmptyString: true
        });
    }
    uuid(message = _locale.string.uuid) {
        return this.matches(rUUID, {
            name: 'uuid',
            message,
            excludeEmptyString: false
        });
    }
    ensure() {
        return this.default('').transform((val)=>val === null ? '' : val
        );
    }
    trim(message = _locale.string.trim) {
        return this.transform((val)=>val != null ? val.trim() : val
        ).test({
            message,
            name: 'trim',
            test: isTrimmed
        });
    }
    lowercase(message = _locale.string.lowercase) {
        return this.transform((value)=>!_isAbsent.default(value) ? value.toLowerCase() : value
        ).test({
            message,
            name: 'string_case',
            exclusive: true,
            test: (value)=>_isAbsent.default(value) || value === value.toLowerCase()
        });
    }
    uppercase(message = _locale.string.uppercase) {
        return this.transform((value)=>!_isAbsent.default(value) ? value.toUpperCase() : value
        ).test({
            message,
            name: 'string_case',
            exclusive: true,
            test: (value)=>_isAbsent.default(value) || value === value.toUpperCase()
        });
    }
}
exports.default = StringSchema;
create.prototype = StringSchema.prototype; //
 // String Interfaces
 //

},{"./locale":"34z7c","./util/isAbsent":"3IPbe","./schema":"28cJE"}],"JVuaY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.create = create;
exports.default = void 0;
var _locale = require("./locale");
var _isAbsent = _interopRequireDefault(require("./util/isAbsent"));
var _schema = _interopRequireDefault(require("./schema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let isNaN = (value)=>value != +value
;
function create() {
    return new NumberSchema();
}
class NumberSchema extends _schema.default {
    constructor(){
        super({
            type: 'number'
        });
        this.withMutation(()=>{
            this.transform(function(value) {
                let parsed = value;
                if (typeof parsed === 'string') {
                    parsed = parsed.replace(/\s/g, '');
                    if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings
                    parsed = +parsed;
                }
                if (this.isType(parsed)) return parsed;
                return parseFloat(parsed);
            });
        });
    }
    _typeCheck(value) {
        if (value instanceof Number) value = value.valueOf();
        return typeof value === 'number' && !isNaN(value);
    }
    min(min, message = _locale.number.min) {
        return this.test({
            message,
            name: 'min',
            exclusive: true,
            params: {
                min
            },
            test (value) {
                return _isAbsent.default(value) || value >= this.resolve(min);
            }
        });
    }
    max(max, message = _locale.number.max) {
        return this.test({
            message,
            name: 'max',
            exclusive: true,
            params: {
                max
            },
            test (value) {
                return _isAbsent.default(value) || value <= this.resolve(max);
            }
        });
    }
    lessThan(less, message = _locale.number.lessThan) {
        return this.test({
            message,
            name: 'max',
            exclusive: true,
            params: {
                less
            },
            test (value) {
                return _isAbsent.default(value) || value < this.resolve(less);
            }
        });
    }
    moreThan(more, message = _locale.number.moreThan) {
        return this.test({
            message,
            name: 'min',
            exclusive: true,
            params: {
                more
            },
            test (value) {
                return _isAbsent.default(value) || value > this.resolve(more);
            }
        });
    }
    positive(msg = _locale.number.positive) {
        return this.moreThan(0, msg);
    }
    negative(msg = _locale.number.negative) {
        return this.lessThan(0, msg);
    }
    integer(message = _locale.number.integer) {
        return this.test({
            name: 'integer',
            message,
            test: (val)=>_isAbsent.default(val) || Number.isInteger(val)
        });
    }
    truncate() {
        return this.transform((value)=>!_isAbsent.default(value) ? value | 0 : value
        );
    }
    round(method) {
        var _method;
        var avail = [
            'ceil',
            'floor',
            'round',
            'trunc'
        ];
        method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || 'round'; // this exists for symemtry with the new Math.trunc
        if (method === 'trunc') return this.truncate();
        if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));
        return this.transform((value)=>!_isAbsent.default(value) ? Math[method](value) : value
        );
    }
}
exports.default = NumberSchema;
create.prototype = NumberSchema.prototype; //
 // Number Interfaces
 //

},{"./locale":"34z7c","./util/isAbsent":"3IPbe","./schema":"28cJE"}],"yFaoG":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.create = create;
exports.default = void 0;
var _isodate = _interopRequireDefault(require("./util/isodate"));
var _locale = require("./locale");
var _isAbsent = _interopRequireDefault(require("./util/isAbsent"));
var _Reference = _interopRequireDefault(require("./Reference"));
var _schema = _interopRequireDefault(require("./schema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// @ts-ignore
let invalidDate = new Date('');
let isDate = (obj)=>Object.prototype.toString.call(obj) === '[object Date]'
;
function create() {
    return new DateSchema();
}
class DateSchema extends _schema.default {
    constructor(){
        super({
            type: 'date'
        });
        this.withMutation(()=>{
            this.transform(function(value) {
                if (this.isType(value)) return value;
                value = _isodate.default(value); // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.
                return !isNaN(value) ? new Date(value) : invalidDate;
            });
        });
    }
    _typeCheck(v) {
        return isDate(v) && !isNaN(v.getTime());
    }
    prepareParam(ref, name) {
        let param;
        if (!_Reference.default.isRef(ref)) {
            let cast = this.cast(ref);
            if (!this._typeCheck(cast)) throw new TypeError(`\`${name}\` must be a Date or a value that can be \`cast()\` to a Date`);
            param = cast;
        } else param = ref;
        return param;
    }
    min(min, message = _locale.date.min) {
        let limit = this.prepareParam(min, 'min');
        return this.test({
            message,
            name: 'min',
            exclusive: true,
            params: {
                min
            },
            test (value) {
                return _isAbsent.default(value) || value >= this.resolve(limit);
            }
        });
    }
    max(max, message = _locale.date.max) {
        var limit = this.prepareParam(max, 'max');
        return this.test({
            message,
            name: 'max',
            exclusive: true,
            params: {
                max
            },
            test (value) {
                return _isAbsent.default(value) || value <= this.resolve(limit);
            }
        });
    }
}
exports.default = DateSchema;
DateSchema.INVALID_DATE = invalidDate;
create.prototype = DateSchema.prototype;
create.INVALID_DATE = invalidDate;

},{"./util/isodate":"6J08p","./locale":"34z7c","./util/isAbsent":"3IPbe","./Reference":"1E5wM","./schema":"28cJE"}],"6J08p":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = parseIsoDate;
/* eslint-disable */ /**
 *
 * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
 * NON-CONFORMANT EDITION.
 * © 2011 Colin Snover <http://zetafleet.com>
 * Released under MIT license.
 */ //              1 YYYY                 2 MM        3 DD              4 HH     5 mm        6 ss            7 msec         8 Z 9 ±    10 tzHH    11 tzmm
var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
function parseIsoDate(date) {
    var numericKeys = [
        1,
        4,
        5,
        6,
        7,
        10,
        11
    ], minutesOffset = 0, timestamp, struct;
    if (struct = isoReg.exec(date)) {
        // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
        for(var i = 0, k; k = numericKeys[i]; ++i)struct[k] = +struct[k] || 0; // allow undefined days and months
        struct[2] = (+struct[2] || 1) - 1;
        struct[3] = +struct[3] || 1; // allow arbitrary sub-second precision beyond milliseconds
        struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0; // timestamps without timezone identifiers should be considered local time
        if ((struct[8] === undefined || struct[8] === '') && (struct[9] === undefined || struct[9] === '')) timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);
        else {
            if (struct[8] !== 'Z' && struct[9] !== undefined) {
                minutesOffset = struct[10] * 60 + struct[11];
                if (struct[9] === '+') minutesOffset = 0 - minutesOffset;
            }
            timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
        }
    } else timestamp = Date.parse ? Date.parse(date) : NaN;
    return timestamp;
}

},{}],"3a8EQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.create = create;
exports.default = void 0;
var _has = _interopRequireDefault(require("lodash/has"));
var _snakeCase = _interopRequireDefault(require("lodash/snakeCase"));
var _camelCase = _interopRequireDefault(require("lodash/camelCase"));
var _mapKeys = _interopRequireDefault(require("lodash/mapKeys"));
var _mapValues = _interopRequireDefault(require("lodash/mapValues"));
var _propertyExpr = require("property-expr");
var _locale = require("./locale");
var _sortFields = _interopRequireDefault(require("./util/sortFields"));
var _sortByKeyOrder = _interopRequireDefault(require("./util/sortByKeyOrder"));
var _runTests = _interopRequireDefault(require("./util/runTests"));
var _ValidationError = _interopRequireDefault(require("./ValidationError"));
var _schema = _interopRequireDefault(require("./schema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
let isObject = (obj)=>Object.prototype.toString.call(obj) === '[object Object]'
;
function unknown(ctx, value) {
    let known = Object.keys(ctx.fields);
    return Object.keys(value).filter((key)=>known.indexOf(key) === -1
    );
}
const defaultSort = _sortByKeyOrder.default([]);
class ObjectSchema extends _schema.default {
    constructor(spec1){
        super({
            type: 'object'
        });
        this.fields = Object.create(null);
        this._sortErrors = defaultSort;
        this._nodes = [];
        this._excludedEdges = [];
        this.withMutation(()=>{
            this.transform(function coerce(value) {
                if (typeof value === 'string') try {
                    value = JSON.parse(value);
                } catch (err) {
                    value = null;
                }
                if (this.isType(value)) return value;
                return null;
            });
            if (spec1) this.shape(spec1);
        });
    }
    _typeCheck(value) {
        return isObject(value) || typeof value === 'function';
    }
    _cast(_value, options = {
    }) {
        var _options$stripUnknown;
        let value = super._cast(_value, options); //should ignore nulls here
        if (value === undefined) return this.getDefault();
        if (!this._typeCheck(value)) return value;
        let fields = this.fields;
        let strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
        let props = this._nodes.concat(Object.keys(value).filter((v)=>this._nodes.indexOf(v) === -1
        ));
        let intermediateValue = {
        }; // is filled during the transform below
        let innerOptions = _extends({
        }, options, {
            parent: intermediateValue,
            __validating: options.__validating || false
        });
        let isChanged = false;
        for (const prop of props){
            let field = fields[prop];
            let exists = _has.default(value, prop);
            if (field) {
                let fieldValue;
                let inputValue = value[prop]; // safe to mutate since this is fired in sequence
                innerOptions.path = (options.path ? `${options.path}.` : '') + prop; // innerOptions.value = value[prop];
                field = field.resolve({
                    value: inputValue,
                    context: options.context,
                    parent: intermediateValue
                });
                let fieldSpec = 'spec' in field ? field.spec : undefined;
                let strict = fieldSpec == null ? void 0 : fieldSpec.strict;
                if (fieldSpec == null ? void 0 : fieldSpec.strip) {
                    isChanged = isChanged || prop in value;
                    continue;
                }
                fieldValue = !options.__validating || !strict ? field.cast(value[prop], innerOptions) : value[prop];
                if (fieldValue !== undefined) intermediateValue[prop] = fieldValue;
            } else if (exists && !strip) intermediateValue[prop] = value[prop];
            if (intermediateValue[prop] !== value[prop]) isChanged = true;
        }
        return isChanged ? intermediateValue : value;
    }
    _validate(_value, opts = {
    }, callback) {
        let errors = [];
        let { sync , from =[] , originalValue =_value , abortEarly =this.spec.abortEarly , recursive =this.spec.recursive  } = opts;
        from = [
            {
                schema: this,
                value: originalValue
            },
            ...from
        ]; // this flag is needed for handling `strict` correctly in the context of
        // validation vs just casting. e.g strict() on a field is only used when validating
        opts.__validating = true;
        opts.originalValue = originalValue;
        opts.from = from;
        super._validate(_value, opts, (err, value)=>{
            if (err) {
                if (!_ValidationError.default.isError(err) || abortEarly) return void callback(err, value);
                errors.push(err);
            }
            if (!recursive || !isObject(value)) {
                callback(errors[0] || null, value);
                return;
            }
            originalValue = originalValue || value;
            let tests = this._nodes.map((key)=>(_, cb)=>{
                    let path = key.indexOf('.') === -1 ? (opts.path ? `${opts.path}.` : '') + key : `${opts.path || ''}["${key}"]`;
                    let field = this.fields[key];
                    if (field && 'validate' in field) {
                        field.validate(value[key], _extends({
                        }, opts, {
                            // @ts-ignore
                            path,
                            from,
                            // inner fields are always strict:
                            // 1. this isn't strict so the casting will also have cast inner values
                            // 2. this is strict in which case the nested values weren't cast either
                            strict: true,
                            parent: value,
                            originalValue: originalValue[key]
                        }), cb);
                        return;
                    }
                    cb(null);
                }
            );
            _runTests.default({
                sync,
                tests,
                value,
                errors,
                endEarly: abortEarly,
                sort: this._sortErrors,
                path: opts.path
            }, callback);
        });
    }
    clone(spec) {
        const next = super.clone(spec);
        next.fields = _extends({
        }, this.fields);
        next._nodes = this._nodes;
        next._excludedEdges = this._excludedEdges;
        next._sortErrors = this._sortErrors;
        return next;
    }
    concat(schema) {
        let next = super.concat(schema);
        let nextFields = next.fields;
        for (let [field, schemaOrRef] of Object.entries(this.fields)){
            const target = nextFields[field];
            if (target === undefined) nextFields[field] = schemaOrRef;
            else if (target instanceof _schema.default && schemaOrRef instanceof _schema.default) nextFields[field] = schemaOrRef.concat(target);
        }
        return next.withMutation(()=>next.shape(nextFields)
        );
    }
    getDefaultFromShape() {
        let dft = {
        };
        this._nodes.forEach((key)=>{
            const field = this.fields[key];
            dft[key] = 'default' in field ? field.getDefault() : undefined;
        });
        return dft;
    }
    _getDefault() {
        if ('default' in this.spec) return super._getDefault();
         // if there is no default set invent one
        if (!this._nodes.length) return undefined;
        return this.getDefaultFromShape();
    }
    shape(additions, excludes = []) {
        let next = this.clone();
        let fields = Object.assign(next.fields, additions);
        next.fields = fields;
        next._sortErrors = _sortByKeyOrder.default(Object.keys(fields));
        if (excludes.length) {
            if (!Array.isArray(excludes[0])) excludes = [
                excludes
            ];
            let keys = excludes.map(([first, second])=>`${first}-${second}`
            );
            next._excludedEdges = next._excludedEdges.concat(keys);
        }
        next._nodes = _sortFields.default(fields, next._excludedEdges);
        return next;
    }
    pick(keys) {
        const picked = {
        };
        for (const key of keys)if (this.fields[key]) picked[key] = this.fields[key];
        return this.clone().withMutation((next)=>{
            next.fields = {
            };
            return next.shape(picked);
        });
    }
    omit(keys) {
        const next = this.clone();
        const fields = next.fields;
        next.fields = {
        };
        for (const key of keys)delete fields[key];
        return next.withMutation(()=>next.shape(fields)
        );
    }
    from(from, to, alias) {
        let fromGetter = _propertyExpr.getter(from, true);
        return this.transform((obj)=>{
            if (obj == null) return obj;
            let newObj = obj;
            if (_has.default(obj, from)) {
                newObj = _extends({
                }, obj);
                if (!alias) delete newObj[from];
                newObj[to] = fromGetter(obj);
            }
            return newObj;
        });
    }
    noUnknown(noAllow = true, message = _locale.object.noUnknown) {
        if (typeof noAllow === 'string') {
            message = noAllow;
            noAllow = true;
        }
        let next = this.test({
            name: 'noUnknown',
            exclusive: true,
            message: message,
            test (value) {
                if (value == null) return true;
                const unknownKeys = unknown(this.schema, value);
                return !noAllow || unknownKeys.length === 0 || this.createError({
                    params: {
                        unknown: unknownKeys.join(', ')
                    }
                });
            }
        });
        next.spec.noUnknown = noAllow;
        return next;
    }
    unknown(allow = true, message = _locale.object.noUnknown) {
        return this.noUnknown(!allow, message);
    }
    transformKeys(fn) {
        return this.transform((obj)=>obj && _mapKeys.default(obj, (_, key)=>fn(key)
            )
        );
    }
    camelCase() {
        return this.transformKeys(_camelCase.default);
    }
    snakeCase() {
        return this.transformKeys(_snakeCase.default);
    }
    constantCase() {
        return this.transformKeys((key)=>_snakeCase.default(key).toUpperCase()
        );
    }
    describe() {
        let base = super.describe();
        base.fields = _mapValues.default(this.fields, (value)=>value.describe()
        );
        return base;
    }
}
exports.default = ObjectSchema;
function create(spec2) {
    return new ObjectSchema(spec2);
}
create.prototype = ObjectSchema.prototype;

},{"lodash/has":"7isvd","lodash/snakeCase":"1FbQW","lodash/camelCase":"3THo9","lodash/mapKeys":"kKDiv","lodash/mapValues":"16p7A","property-expr":"4yV3q","./locale":"34z7c","./util/sortFields":"kMdPE","./util/sortByKeyOrder":"iGZgB","./util/runTests":"66KvR","./ValidationError":"5y69i","./schema":"28cJE"}],"1FbQW":[function(require,module,exports) {
var createCompounder = require('./_createCompounder');
/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */ var snakeCase = createCompounder(function(result, word, index) {
    return result + (index ? '_' : '') + word.toLowerCase();
});
module.exports = snakeCase;

},{"./_createCompounder":"5X0XU"}],"5X0XU":[function(require,module,exports) {
var arrayReduce = require('./_arrayReduce'), deburr = require('./deburr'), words = require('./words');
/** Used to compose unicode capture groups. */ var rsApos = "['\u2019]";
/** Used to match apostrophes. */ var reApos = RegExp(rsApos, 'g');
/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */ function createCompounder(callback) {
    return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
}
module.exports = createCompounder;

},{"./_arrayReduce":"2GOU8","./deburr":"7mGIf","./words":"2a0f0"}],"2GOU8":[function(require,module,exports) {
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */ function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array == null ? 0 : array.length;
    if (initAccum && length) accumulator = array[++index];
    while((++index) < length)accumulator = iteratee(accumulator, array[index], index, array);
    return accumulator;
}
module.exports = arrayReduce;

},{}],"7mGIf":[function(require,module,exports) {
var deburrLetter = require('./_deburrLetter'), toString = require('./toString');
/** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
/** Used to compose unicode character classes. */ var rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
/** Used to compose unicode capture groups. */ var rsCombo = '[' + rsComboRange + ']';
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */ var reComboMark = RegExp(rsCombo, 'g');
/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */ function deburr(string) {
    string = toString(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}
module.exports = deburr;

},{"./_deburrLetter":"3rL0q","./toString":"3sdfZ"}],"3rL0q":[function(require,module,exports) {
var basePropertyOf = require('./_basePropertyOf');
/** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',
    '\u0102': 'A',
    '\u0104': 'A',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u0105': 'a',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010a': 'C',
    '\u010c': 'C',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010b': 'c',
    '\u010d': 'c',
    '\u010e': 'D',
    '\u0110': 'D',
    '\u010f': 'd',
    '\u0111': 'd',
    '\u0112': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u0118': 'E',
    '\u011a': 'E',
    '\u0113': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u0119': 'e',
    '\u011b': 'e',
    '\u011c': 'G',
    '\u011e': 'G',
    '\u0120': 'G',
    '\u0122': 'G',
    '\u011d': 'g',
    '\u011f': 'g',
    '\u0121': 'g',
    '\u0123': 'g',
    '\u0124': 'H',
    '\u0126': 'H',
    '\u0125': 'h',
    '\u0127': 'h',
    '\u0128': 'I',
    '\u012a': 'I',
    '\u012c': 'I',
    '\u012e': 'I',
    '\u0130': 'I',
    '\u0129': 'i',
    '\u012b': 'i',
    '\u012d': 'i',
    '\u012f': 'i',
    '\u0131': 'i',
    '\u0134': 'J',
    '\u0135': 'j',
    '\u0136': 'K',
    '\u0137': 'k',
    '\u0138': 'k',
    '\u0139': 'L',
    '\u013b': 'L',
    '\u013d': 'L',
    '\u013f': 'L',
    '\u0141': 'L',
    '\u013a': 'l',
    '\u013c': 'l',
    '\u013e': 'l',
    '\u0140': 'l',
    '\u0142': 'l',
    '\u0143': 'N',
    '\u0145': 'N',
    '\u0147': 'N',
    '\u014a': 'N',
    '\u0144': 'n',
    '\u0146': 'n',
    '\u0148': 'n',
    '\u014b': 'n',
    '\u014c': 'O',
    '\u014e': 'O',
    '\u0150': 'O',
    '\u014d': 'o',
    '\u014f': 'o',
    '\u0151': 'o',
    '\u0154': 'R',
    '\u0156': 'R',
    '\u0158': 'R',
    '\u0155': 'r',
    '\u0157': 'r',
    '\u0159': 'r',
    '\u015a': 'S',
    '\u015c': 'S',
    '\u015e': 'S',
    '\u0160': 'S',
    '\u015b': 's',
    '\u015d': 's',
    '\u015f': 's',
    '\u0161': 's',
    '\u0162': 'T',
    '\u0164': 'T',
    '\u0166': 'T',
    '\u0163': 't',
    '\u0165': 't',
    '\u0167': 't',
    '\u0168': 'U',
    '\u016a': 'U',
    '\u016c': 'U',
    '\u016e': 'U',
    '\u0170': 'U',
    '\u0172': 'U',
    '\u0169': 'u',
    '\u016b': 'u',
    '\u016d': 'u',
    '\u016f': 'u',
    '\u0171': 'u',
    '\u0173': 'u',
    '\u0174': 'W',
    '\u0175': 'w',
    '\u0176': 'Y',
    '\u0177': 'y',
    '\u0178': 'Y',
    '\u0179': 'Z',
    '\u017b': 'Z',
    '\u017d': 'Z',
    '\u017a': 'z',
    '\u017c': 'z',
    '\u017e': 'z',
    '\u0132': 'IJ',
    '\u0133': 'ij',
    '\u0152': 'Oe',
    '\u0153': 'oe',
    '\u0149': "'n",
    '\u017f': 's'
};
/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */ var deburrLetter = basePropertyOf(deburredLetters);
module.exports = deburrLetter;

},{"./_basePropertyOf":"3rWfX"}],"3rWfX":[function(require,module,exports) {
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyOf(object) {
    return function(key) {
        return object == null ? undefined : object[key];
    };
}
module.exports = basePropertyOf;

},{}],"2a0f0":[function(require,module,exports) {
var asciiWords = require('./_asciiWords'), hasUnicodeWord = require('./_hasUnicodeWord'), toString = require('./toString'), unicodeWords = require('./_unicodeWords');
/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */ function words(string, pattern, guard) {
    string = toString(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    return string.match(pattern) || [];
}
module.exports = words;

},{"./_asciiWords":"5cTzk","./_hasUnicodeWord":"6P1Om","./toString":"3sdfZ","./_unicodeWords":"5EzZD"}],"5cTzk":[function(require,module,exports) {
/** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function asciiWords(string) {
    return string.match(reAsciiWord) || [];
}
module.exports = asciiWords;

},{}],"6P1Om":[function(require,module,exports) {
/** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */ function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
}
module.exports = hasUnicodeWord;

},{}],"5EzZD":[function(require,module,exports) {
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
/** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])', rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
    rsDingbat,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsSeq;
/** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [
        rsBreak,
        rsUpper,
        '$'
    ].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [
        rsBreak,
        rsUpper + rsMiscLower,
        '$'
    ].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
].join('|'), 'g');
/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
}
module.exports = unicodeWords;

},{}],"3THo9":[function(require,module,exports) {
var capitalize = require('./capitalize'), createCompounder = require('./_createCompounder');
/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */ var camelCase = createCompounder(function(result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
});
module.exports = camelCase;

},{"./capitalize":"3M409","./_createCompounder":"5X0XU"}],"3M409":[function(require,module,exports) {
var toString = require('./toString'), upperFirst = require('./upperFirst');
/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */ function capitalize(string) {
    return upperFirst(toString(string).toLowerCase());
}
module.exports = capitalize;

},{"./toString":"3sdfZ","./upperFirst":"4E4iX"}],"4E4iX":[function(require,module,exports) {
var createCaseFirst = require('./_createCaseFirst');
/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */ var upperFirst = createCaseFirst('toUpperCase');
module.exports = upperFirst;

},{"./_createCaseFirst":"6qQU5"}],"6qQU5":[function(require,module,exports) {
var castSlice = require('./_castSlice'), hasUnicode = require('./_hasUnicode'), stringToArray = require('./_stringToArray'), toString = require('./toString');
/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */ function createCaseFirst(methodName) {
    return function(string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
        return chr[methodName]() + trailing;
    };
}
module.exports = createCaseFirst;

},{"./_castSlice":"52FOL","./_hasUnicode":"7nj2t","./_stringToArray":"41vSY","./toString":"3sdfZ"}],"52FOL":[function(require,module,exports) {
var baseSlice = require('./_baseSlice');
/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */ function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice(array, start, end);
}
module.exports = castSlice;

},{"./_baseSlice":"4SBSI"}],"4SBSI":[function(require,module,exports) {
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */ function baseSlice(array, start, end) {
    var index = -1, length = array.length;
    if (start < 0) start = -start > length ? 0 : length + start;
    end = end > length ? length : end;
    if (end < 0) end += length;
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while((++index) < length)result[index] = array[index + start];
    return result;
}
module.exports = baseSlice;

},{}],"7nj2t":[function(require,module,exports) {
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */ var rsZWJ = '\\u200d';
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */ function hasUnicode(string) {
    return reHasUnicode.test(string);
}
module.exports = hasUnicode;

},{}],"41vSY":[function(require,module,exports) {
var asciiToArray = require('./_asciiToArray'), hasUnicode = require('./_hasUnicode'), unicodeToArray = require('./_unicodeToArray');
/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}
module.exports = stringToArray;

},{"./_asciiToArray":"7cCs8","./_hasUnicode":"7nj2t","./_unicodeToArray":"1spjP"}],"7cCs8":[function(require,module,exports) {
/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function asciiToArray(string) {
    return string.split('');
}
module.exports = asciiToArray;

},{}],"1spjP":[function(require,module,exports) {
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */ var rsAstral = '[' + rsAstralRange + ']', rsCombo = '[' + rsComboRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = '(?:' + [
    rsNonAstral + rsCombo + '?',
    rsCombo,
    rsRegional,
    rsSurrPair,
    rsAstral
].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function unicodeToArray(string) {
    return string.match(reUnicode) || [];
}
module.exports = unicodeToArray;

},{}],"kKDiv":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'), baseForOwn = require('./_baseForOwn'), baseIteratee = require('./_baseIteratee');
/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */ function mapKeys(object, iteratee) {
    var result = {
    };
    iteratee = baseIteratee(iteratee, 3);
    baseForOwn(object, function(value, key, object1) {
        baseAssignValue(result, iteratee(value, key, object1), value);
    });
    return result;
}
module.exports = mapKeys;

},{"./_baseAssignValue":"3nIC3","./_baseForOwn":"6QRyf","./_baseIteratee":"6BtQg"}],"kMdPE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = sortFields;
var _has = _interopRequireDefault(require("lodash/has"));
var _toposort = _interopRequireDefault(require("toposort"));
var _propertyExpr = require("property-expr");
var _Reference = _interopRequireDefault(require("../Reference"));
var _isSchema = _interopRequireDefault(require("./isSchema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// @ts-expect-error
function sortFields(fields, excludes = []) {
    let edges = [];
    let nodes = [];
    function addNode(depPath, key) {
        var node = _propertyExpr.split(depPath)[0];
        if (!~nodes.indexOf(node)) nodes.push(node);
        if (!~excludes.indexOf(`${key}-${node}`)) edges.push([
            key,
            node
        ]);
    }
    for(const key in fields)if (_has.default(fields, key)) {
        let value = fields[key];
        if (!~nodes.indexOf(key)) nodes.push(key);
        if (_Reference.default.isRef(value) && value.isSibling) addNode(value.path, key);
        else if (_isSchema.default(value) && 'deps' in value) value.deps.forEach((path)=>addNode(path, key)
        );
    }
    return _toposort.default.array(nodes, edges).reverse();
}

},{"lodash/has":"7isvd","toposort":"6Izmn","property-expr":"4yV3q","../Reference":"1E5wM","./isSchema":"65x27"}],"6Izmn":[function(require,module,exports) {
/**
 * Topological sorting function
 *
 * @param {Array} edges
 * @returns {Array}
 */ module.exports = function(edges) {
    return toposort(uniqueNodes(edges), edges);
};
module.exports.array = toposort;
function toposort(nodes, edges) {
    var cursor = nodes.length, sorted = new Array(cursor), visited = {
    }, i = cursor, outgoingEdges = makeOutgoingEdges(edges), nodesHash = makeNodesHash(nodes);
    // check for unknown nodes
    edges.forEach(function(edge) {
        if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) throw new Error('Unknown node. There is an unknown node in the supplied edges.');
    });
    while(i--)if (!visited[i]) visit(nodes[i], i, new Set());
    function visit(node, i1, predecessors) {
        if (predecessors.has(node)) {
            var nodeRep;
            try {
                nodeRep = ", node was:" + JSON.stringify(node);
            } catch (e) {
                nodeRep = "";
            }
            throw new Error('Cyclic dependency' + nodeRep);
        }
        if (!nodesHash.has(node)) {
            throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: ' + JSON.stringify(node));
        }
        if (visited[i1]) return;
        visited[i1] = true;
        var outgoing = outgoingEdges.get(node) || new Set();
        outgoing = Array.from(outgoing);
        if (i1 = outgoing.length) {
            predecessors.add(node);
            do {
                var child = outgoing[--i1];
                visit(child, nodesHash.get(child), predecessors);
            }while (i1)
            predecessors.delete(node);
        }
        sorted[--cursor] = node;
    }
    return sorted;
}
function uniqueNodes(arr) {
    var res = new Set();
    for(var i = 0, len = arr.length; i < len; i++){
        var edge = arr[i];
        res.add(edge[0]);
        res.add(edge[1]);
    }
    return Array.from(res);
}
function makeOutgoingEdges(arr) {
    var edges = new Map();
    for(var i = 0, len = arr.length; i < len; i++){
        var edge = arr[i];
        if (!edges.has(edge[0])) edges.set(edge[0], new Set());
        if (!edges.has(edge[1])) edges.set(edge[1], new Set());
        edges.get(edge[0]).add(edge[1]);
    }
    return edges;
}
function makeNodesHash(arr) {
    var res = new Map();
    for(var i = 0, len = arr.length; i < len; i++)res.set(arr[i], i);
    return res;
}

},{}],"iGZgB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = sortByKeyOrder;
function findIndex(arr, err) {
    let idx = Infinity;
    arr.some((key, ii)=>{
        var _err$path;
        if (((_err$path = err.path) == null ? void 0 : _err$path.indexOf(key)) !== -1) {
            idx = ii;
            return true;
        }
    });
    return idx;
}
function sortByKeyOrder(keys) {
    return (a, b)=>{
        return findIndex(keys, a) - findIndex(keys, b);
    };
}

},{}],"4T7Do":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.create = create;
exports.default = void 0;
var _isAbsent = _interopRequireDefault(require("./util/isAbsent"));
var _isSchema = _interopRequireDefault(require("./util/isSchema"));
var _printValue = _interopRequireDefault(require("./util/printValue"));
var _locale = require("./locale");
var _runTests = _interopRequireDefault(require("./util/runTests"));
var _ValidationError = _interopRequireDefault(require("./ValidationError"));
var _schema = _interopRequireDefault(require("./schema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function create(type) {
    return new ArraySchema(type);
}
class ArraySchema extends _schema.default {
    constructor(type){
        super({
            type: 'array'
        }); // `undefined` specifically means uninitialized, as opposed to
        // "no subtype"
        this.innerType = type;
        this.withMutation(()=>{
            this.transform(function(values) {
                if (typeof values === 'string') try {
                    values = JSON.parse(values);
                } catch (err) {
                    values = null;
                }
                return this.isType(values) ? values : null;
            });
        });
    }
    _typeCheck(v) {
        return Array.isArray(v);
    }
    get _subType() {
        return this.innerType;
    }
    _cast(_value, _opts) {
        const value = super._cast(_value, _opts); //should ignore nulls here
        if (!this._typeCheck(value) || !this.innerType) return value;
        let isChanged = false;
        const castArray = value.map((v, idx)=>{
            const castElement = this.innerType.cast(v, _extends({
            }, _opts, {
                path: `${_opts.path || ''}[${idx}]`
            }));
            if (castElement !== v) isChanged = true;
            return castElement;
        });
        return isChanged ? castArray : value;
    }
    _validate(_value, options = {
    }, callback) {
        var _options$abortEarly, _options$recursive;
        let errors = [];
        let sync = options.sync;
        let path = options.path;
        let innerType = this.innerType;
        let endEarly = (_options$abortEarly = options.abortEarly) != null ? _options$abortEarly : this.spec.abortEarly;
        let recursive = (_options$recursive = options.recursive) != null ? _options$recursive : this.spec.recursive;
        let originalValue = options.originalValue != null ? options.originalValue : _value;
        super._validate(_value, options, (err, value)=>{
            if (err) {
                if (!_ValidationError.default.isError(err) || endEarly) return void callback(err, value);
                errors.push(err);
            }
            if (!recursive || !innerType || !this._typeCheck(value)) {
                callback(errors[0] || null, value);
                return;
            }
            originalValue = originalValue || value; // #950 Ensure that sparse array empty slots are validated
            let tests = new Array(value.length);
            for(let idx = 0; idx < value.length; idx++){
                let item = value[idx];
                let path1 = `${options.path || ''}[${idx}]`; // object._validate note for isStrict explanation
                let innerOptions = _extends({
                }, options, {
                    path: path1,
                    strict: true,
                    parent: value,
                    index: idx,
                    originalValue: originalValue[idx]
                });
                tests[idx] = (_, cb)=>innerType.validate(item, innerOptions, cb)
                ;
            }
            _runTests.default({
                sync,
                path,
                value,
                errors,
                endEarly,
                tests
            }, callback);
        });
    }
    clone(spec) {
        const next = super.clone(spec);
        next.innerType = this.innerType;
        return next;
    }
    concat(schema) {
        let next = super.concat(schema);
        next.innerType = this.innerType;
        if (schema.innerType) next.innerType = next.innerType ? next.innerType.concat(schema.innerType) : schema.innerType;
        return next;
    }
    of(schema) {
        // FIXME: this should return a new instance of array without the default to be
        let next = this.clone();
        if (!_isSchema.default(schema)) throw new TypeError('`array.of()` sub-schema must be a valid yup schema not: ' + _printValue.default(schema)); // FIXME(ts):
        next.innerType = schema;
        return next;
    }
    length(length, message = _locale.array.length) {
        return this.test({
            message,
            name: 'length',
            exclusive: true,
            params: {
                length
            },
            test (value) {
                return _isAbsent.default(value) || value.length === this.resolve(length);
            }
        });
    }
    min(min, message) {
        message = message || _locale.array.min;
        return this.test({
            message,
            name: 'min',
            exclusive: true,
            params: {
                min
            },
            // FIXME(ts): Array<typeof T>
            test (value) {
                return _isAbsent.default(value) || value.length >= this.resolve(min);
            }
        });
    }
    max(max, message) {
        message = message || _locale.array.max;
        return this.test({
            message,
            name: 'max',
            exclusive: true,
            params: {
                max
            },
            test (value) {
                return _isAbsent.default(value) || value.length <= this.resolve(max);
            }
        });
    }
    ensure() {
        return this.default(()=>[]
        ).transform((val, original)=>{
            // We don't want to return `null` for nullable schema
            if (this._typeCheck(val)) return val;
            return original == null ? [] : [].concat(original);
        });
    }
    compact(rejector) {
        let reject = !rejector ? (v)=>!!v
         : (v, i, a)=>!rejector(v, i, a)
        ;
        return this.transform((values)=>values != null ? values.filter(reject) : values
        );
    }
    describe() {
        let base = super.describe();
        if (this.innerType) base.innerType = this.innerType.describe();
        return base;
    }
    nullable(isNullable = true) {
        return super.nullable(isNullable);
    }
    defined() {
        return super.defined();
    }
    required(msg) {
        return super.required(msg);
    }
}
exports.default = ArraySchema;
create.prototype = ArraySchema.prototype; //
 // Interfaces
 //

},{"./util/isAbsent":"3IPbe","./util/isSchema":"65x27","./util/printValue":"40hso","./locale":"34z7c","./util/runTests":"66KvR","./ValidationError":"5y69i","./schema":"28cJE"}],"1Ap1p":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.create = create;
exports.default = void 0;
var _isSchema = _interopRequireDefault(require("./util/isSchema"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function create(builder) {
    return new Lazy(builder);
}
class Lazy {
    constructor(builder){
        this.type = 'lazy';
        this.__isYupSchema__ = true;
        this._resolve = (value, options = {
        })=>{
            let schema = this.builder(value, options);
            if (!_isSchema.default(schema)) throw new TypeError('lazy() functions must return a valid schema');
            return schema.resolve(options);
        };
        this.builder = builder;
    }
    resolve(options) {
        return this._resolve(options.value, options);
    }
    cast(value, options) {
        return this._resolve(value, options).cast(value, options);
    }
    validate(value, options, maybeCb) {
        // @ts-expect-error missing public callback on type
        return this._resolve(value, options).validate(value, options, maybeCb);
    }
    validateSync(value, options) {
        return this._resolve(value, options).validateSync(value, options);
    }
    validateAt(path, value, options) {
        return this._resolve(value, options).validateAt(path, value, options);
    }
    validateSyncAt(path, value, options) {
        return this._resolve(value, options).validateSyncAt(path, value, options);
    }
    describe() {
        return null;
    }
    isValid(value, options) {
        return this._resolve(value, options).isValid(value, options);
    }
    isValidSync(value, options) {
        return this._resolve(value, options).isValidSync(value, options);
    }
}
var _default = Lazy;
exports.default = _default;

},{"./util/isSchema":"65x27"}],"47QVc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = setLocale;
var _locale = _interopRequireDefault(require("./locale"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function setLocale(custom) {
    Object.keys(custom).forEach((type)=>{
        Object.keys(custom[type]).forEach((method)=>{
            _locale.default[type][method] = custom[type][method];
        });
    });
}

},{"./locale":"34z7c"}],"0AT5S":[function(require,module,exports) {
'use strict';
module.exports = require('./react-toastify.cjs.development.js');

},{"./react-toastify.cjs.development.js":"6LF1R"}],"6LF1R":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('clsx'));
var reactDom = require('react-dom');
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function isNum(v) {
    return typeof v === 'number' && !isNaN(v);
}
function isBool(v) {
    return typeof v === 'boolean';
}
function isStr(v) {
    return typeof v === 'string';
}
function isFn(v) {
    return typeof v === 'function';
}
function parseClassName(v) {
    return isStr(v) || isFn(v) ? v : null;
}
function isToastIdValid(toastId) {
    return toastId === 0 || toastId;
}
function getAutoCloseDelay(toastAutoClose, containerAutoClose) {
    return toastAutoClose === false || isNum(toastAutoClose) && toastAutoClose > 0 ? toastAutoClose : containerAutoClose;
}
var canUseDom = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function canBeRendered(content) {
    return React.isValidElement(content) || isStr(content) || isFn(content) || isNum(content);
}
var POSITION = {
    TOP_LEFT: 'top-left',
    TOP_RIGHT: 'top-right',
    TOP_CENTER: 'top-center',
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_RIGHT: 'bottom-right',
    BOTTOM_CENTER: 'bottom-center'
};
var TYPE = {
    INFO: 'info',
    SUCCESS: 'success',
    WARNING: 'warning',
    ERROR: 'error',
    DEFAULT: 'default',
    DARK: 'dark'
};
/**
 * Used to collapse toast after exit animation
 */ function collapseToast(node, done, duration) {
    if (duration === void 0) duration = 300;
    var height = node.scrollHeight;
    var style = node.style;
    requestAnimationFrame(function() {
        style.minHeight = 'initial';
        style.height = height + 'px';
        style.transition = "all " + duration + "ms";
        requestAnimationFrame(function() {
            style.height = '0';
            style.padding = '0';
            style.margin = '0';
            setTimeout(done, duration);
        });
    });
}
/**
 * Css animation that just work.
 * You could use animate.css for instance
 *
 *
 * ```
 * cssTransition({
 *   enter: "animate__animated animate__bounceIn",
 *   exit: "animate__animated animate__bounceOut"
 * })
 * ```
 *
 */ function cssTransition(_ref) {
    var enter = _ref.enter, exit = _ref.exit, _ref$appendPosition = _ref.appendPosition, appendPosition = _ref$appendPosition === void 0 ? false : _ref$appendPosition, _ref$collapse = _ref.collapse, collapse = _ref$collapse === void 0 ? true : _ref$collapse, _ref$collapseDuration = _ref.collapseDuration, collapseDuration = _ref$collapseDuration === void 0 ? 300 : _ref$collapseDuration;
    return function ToastTransition(_ref2) {
        var children = _ref2.children, position = _ref2.position, preventExitTransition = _ref2.preventExitTransition, done = _ref2.done, nodeRef = _ref2.nodeRef, isIn = _ref2.isIn;
        var enterClassName = appendPosition ? enter + "--" + position : enter;
        var exitClassName = appendPosition ? exit + "--" + position : exit;
        var baseClassName = React.useRef();
        var animationStep = React.useRef(0);
        React.useLayoutEffect(function() {
            onEnter();
        }, []);
        React.useEffect(function() {
            if (!isIn) preventExitTransition ? onExited() : onExit();
        }, [
            isIn
        ]);
        function onEnter() {
            var node = nodeRef.current;
            baseClassName.current = node.className;
            node.className += " " + enterClassName;
            node.addEventListener('animationend', onEntered);
        }
        function onEntered() {
            var node = nodeRef.current;
            node.removeEventListener('animationend', onEntered);
            if (animationStep.current === 0) node.className = baseClassName.current;
        }
        function onExit() {
            animationStep.current = 1;
            var node = nodeRef.current;
            node.className += " " + exitClassName;
            node.addEventListener('animationend', onExited);
        }
        function onExited() {
            var node = nodeRef.current;
            node.removeEventListener('animationend', onExited);
            collapse ? collapseToast(node, done, collapseDuration) : done();
        }
        return React__default.createElement(React__default.Fragment, null, children);
    };
}
var eventManager = {
    list: /*#__PURE__*/ new Map(),
    emitQueue: /*#__PURE__*/ new Map(),
    on: function on(event, callback) {
        this.list.has(event) || this.list.set(event, []);
        this.list.get(event).push(callback);
        return this;
    },
    off: function off(event, callback) {
        if (callback) {
            var cb = this.list.get(event).filter(function(cb1) {
                return cb1 !== callback;
            });
            this.list.set(event, cb);
            return this;
        }
        this.list["delete"](event);
        return this;
    },
    cancelEmit: function cancelEmit(event) {
        var timers = this.emitQueue.get(event);
        if (timers) {
            timers.forEach(clearTimeout);
            this.emitQueue["delete"](event);
        }
        return this;
    },
    /**
   * Enqueue the event at the end of the call stack
   * Doing so let the user call toast as follow:
   * toast('1')
   * toast('2')
   * toast('3')
   * Without setTimemout the code above will not work
   */ emit: function emit(event) {
        var _this = this;
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        this.list.has(event) && this.list.get(event).forEach(function(callback) {
            var timer = setTimeout(function() {
                // @ts-ignore
                callback.apply(void 0, args);
            }, 0);
            _this.emitQueue.has(event) || _this.emitQueue.set(event, []);
            _this.emitQueue.get(event).push(timer);
        });
    }
};
/**
 * `useKeeper` is a helper around `useRef`.
 *
 * You don't need to access the `.current`property to get the value
 * If refresh is set to true. The ref will be updated every render
 */ function useKeeper(arg, refresh) {
    if (refresh === void 0) refresh = false;
    var ref = React.useRef(arg);
    React.useEffect(function() {
        if (refresh) ref.current = arg;
    });
    return ref.current;
}
function reducer(state, action) {
    switch(action.type){
        case 0:
            return [].concat(state, [
                action.toastId
            ]).filter(function(id) {
                return id !== action.staleId;
            });
        case 1:
            return isToastIdValid(action.toastId) ? state.filter(function(id) {
                return id !== action.toastId;
            }) : [];
    }
}
function useToastContainer(props) {
    var _useReducer = React.useReducer(function(x) {
        return x + 1;
    }, 0), forceUpdate = _useReducer[1];
    var _useReducer2 = React.useReducer(reducer, []), toast = _useReducer2[0], dispatch = _useReducer2[1];
    var containerRef = React.useRef(null);
    var toastCount = useKeeper(0);
    var queue = useKeeper([]);
    var collection = useKeeper({
    });
    var instance = useKeeper({
        toastKey: 1,
        displayedToast: 0,
        props: props,
        containerId: null,
        isToastActive: isToastActive,
        getToast: function getToast(id) {
            return collection[id] || null;
        }
    });
    React.useEffect(function() {
        instance.containerId = props.containerId;
        eventManager.cancelEmit(3).on(0, buildToast).on(1, function(toastId) {
            return containerRef.current && removeToast(toastId);
        }).on(5, clearWaitingQueue).emit(2, instance);
        return function() {
            return eventManager.emit(3, instance);
        };
    }, []);
    React.useEffect(function() {
        instance.isToastActive = isToastActive;
        instance.displayedToast = toast.length;
        eventManager.emit(4, toast.length, props.containerId);
    }, [
        toast
    ]);
    React.useEffect(function() {
        instance.props = props;
    });
    function isToastActive(id) {
        return toast.indexOf(id) !== -1;
    }
    function clearWaitingQueue(_ref) {
        var containerId = _ref.containerId;
        var limit = instance.props.limit;
        if (limit && (!containerId || instance.containerId === containerId)) {
            toastCount -= queue.length;
            queue = [];
        }
    }
    function removeToast(toastId) {
        dispatch({
            type: 1,
            toastId: toastId
        });
    }
    function dequeueToast() {
        var _queue$shift = queue.shift(), toastContent = _queue$shift.toastContent, toastProps = _queue$shift.toastProps, staleId = _queue$shift.staleId;
        appendToast(toastContent, toastProps, staleId);
    }
    /**
   * check if a container is attached to the dom
   * check for multi-container, build only if associated
   * check for duplicate toastId if no update
   */ function isNotValid(_ref2) {
        var containerId = _ref2.containerId, toastId = _ref2.toastId, updateId = _ref2.updateId;
        return !containerRef.current || instance.props.enableMultiContainer && containerId !== instance.props.containerId || collection[toastId] && updateId == null ? true : false;
    } // this function and all the function called inside needs to rely on ref(`useKeeper`)
    function buildToast(content, _ref3) {
        var delay = _ref3.delay, staleId = _ref3.staleId, options = _objectWithoutPropertiesLoose(_ref3, [
            "delay",
            "staleId"
        ]);
        if (!canBeRendered(content) || isNotValid(options)) return;
        var toastId = options.toastId, updateId = options.updateId;
        var props1 = instance.props;
        var closeToast = function closeToast1() {
            return removeToast(toastId);
        };
        var isNotAnUpdate = options.updateId == null;
        if (isNotAnUpdate) toastCount++;
        var toastProps = {
            toastId: toastId,
            updateId: updateId,
            isIn: false,
            key: options.key || instance.toastKey++,
            type: options.type,
            closeToast: closeToast,
            closeButton: options.closeButton,
            rtl: props1.rtl,
            position: options.position || props1.position,
            transition: options.transition || props1.transition,
            className: parseClassName(options.className || props1.toastClassName),
            bodyClassName: parseClassName(options.bodyClassName || props1.bodyClassName),
            style: options.style || props1.toastStyle,
            bodyStyle: options.bodyStyle || props1.bodyStyle,
            onClick: options.onClick || props1.onClick,
            pauseOnHover: isBool(options.pauseOnHover) ? options.pauseOnHover : props1.pauseOnHover,
            pauseOnFocusLoss: isBool(options.pauseOnFocusLoss) ? options.pauseOnFocusLoss : props1.pauseOnFocusLoss,
            draggable: isBool(options.draggable) ? options.draggable : props1.draggable,
            draggablePercent: isNum(options.draggablePercent) ? options.draggablePercent : props1.draggablePercent,
            draggableDirection: options.draggableDirection || props1.draggableDirection,
            closeOnClick: isBool(options.closeOnClick) ? options.closeOnClick : props1.closeOnClick,
            progressClassName: parseClassName(options.progressClassName || props1.progressClassName),
            progressStyle: options.progressStyle || props1.progressStyle,
            autoClose: getAutoCloseDelay(options.autoClose, props1.autoClose),
            hideProgressBar: isBool(options.hideProgressBar) ? options.hideProgressBar : props1.hideProgressBar,
            progress: options.progress,
            role: isStr(options.role) ? options.role : props1.role,
            deleteToast: function deleteToast() {
                removeFromCollection(toastId);
            }
        };
        if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;
        if (isFn(options.onClose)) toastProps.onClose = options.onClose; //  tweak for vertical dragging
        if (toastProps.draggableDirection === "y" && toastProps.draggablePercent === 80) toastProps.draggablePercent *= 1.5;
        var closeButton = props1.closeButton;
        if (options.closeButton === false || canBeRendered(options.closeButton)) closeButton = options.closeButton;
        else if (options.closeButton === true) closeButton = canBeRendered(props1.closeButton) ? props1.closeButton : true;
        toastProps.closeButton = closeButton;
        var toastContent = content;
        if (React.isValidElement(content) && !isStr(content.type)) toastContent = React.cloneElement(content, {
            closeToast: closeToast,
            toastProps: toastProps
        });
        else if (isFn(content)) toastContent = content({
            closeToast: closeToast,
            toastProps: toastProps
        });
         // not handling limit + delay by design. Waiting for user feedback first
        if (props1.limit && props1.limit > 0 && toastCount > props1.limit && isNotAnUpdate) queue.push({
            toastContent: toastContent,
            toastProps: toastProps,
            staleId: staleId
        });
        else if (isNum(delay) && delay > 0) setTimeout(function() {
            appendToast(toastContent, toastProps, staleId);
        }, delay);
        else appendToast(toastContent, toastProps, staleId);
    }
    function appendToast(content, toastProps, staleId) {
        var toastId = toastProps.toastId;
        if (staleId) delete collection[staleId];
        collection[toastId] = {
            content: content,
            props: toastProps
        };
        dispatch({
            type: 0,
            toastId: toastId,
            staleId: staleId
        });
    }
    function removeFromCollection(toastId) {
        delete collection[toastId];
        var queueLen = queue.length;
        toastCount = isToastIdValid(toastId) ? toastCount - 1 : toastCount - instance.displayedToast;
        if (toastCount < 0) toastCount = 0;
        if (queueLen > 0) {
            var freeSlot = isToastIdValid(toastId) ? 1 : instance.props.limit;
            if (queueLen === 1 || freeSlot === 1) {
                instance.displayedToast++;
                dequeueToast();
            } else {
                var toDequeue = freeSlot > queueLen ? queueLen : freeSlot;
                instance.displayedToast = toDequeue;
                for(var i = 0; i < toDequeue; i++)dequeueToast();
            }
        } else forceUpdate();
    }
    function getToastToRender(cb) {
        var toastToRender = {
        };
        var toastList = props.newestOnTop ? Object.keys(collection).reverse() : Object.keys(collection);
        for(var i = 0; i < toastList.length; i++){
            var _toast = collection[toastList[i]];
            var position = _toast.props.position;
            toastToRender[position] || (toastToRender[position] = []);
            toastToRender[position].push(_toast);
        }
        return Object.keys(toastToRender).map(function(p) {
            return cb(p, toastToRender[p]);
        });
    }
    return {
        getToastToRender: getToastToRender,
        collection: collection,
        containerRef: containerRef,
        isToastActive: isToastActive
    };
}
function getX(e) {
    return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientX : e.clientX;
}
function getY(e) {
    return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientY : e.clientY;
}
function useToast(props) {
    var _useState = React.useState(true), isRunning = _useState[0], setIsRunning = _useState[1];
    var _useState2 = React.useState(false), preventExitTransition = _useState2[0], setPreventExitTransition = _useState2[1];
    var toastRef = React.useRef(null);
    var drag = useKeeper({
        start: 0,
        x: 0,
        y: 0,
        delta: 0,
        removalDistance: 0,
        canCloseOnClick: true,
        canDrag: false,
        boundingRect: null
    });
    var syncProps = useKeeper(props, true);
    var autoClose = props.autoClose, pauseOnHover = props.pauseOnHover, closeToast = props.closeToast, onClick = props.onClick, closeOnClick = props.closeOnClick;
    React.useEffect(function() {
        if (isFn(props.onOpen)) props.onOpen(React.isValidElement(props.children) && props.children.props);
        return function() {
            if (isFn(syncProps.onClose)) syncProps.onClose(React.isValidElement(syncProps.children) && syncProps.children.props);
        };
    }, []);
    React.useEffect(function() {
        props.draggable && bindDragEvents();
        return function() {
            props.draggable && unbindDragEvents();
        };
    }, [
        props.draggable
    ]);
    React.useEffect(function() {
        props.pauseOnFocusLoss && bindFocusEvents();
        return function() {
            props.pauseOnFocusLoss && unbindFocusEvents();
        };
    }, [
        props.pauseOnFocusLoss
    ]);
    function onDragStart(e) {
        if (props.draggable) {
            var toast = toastRef.current;
            drag.canCloseOnClick = true;
            drag.canDrag = true;
            drag.boundingRect = toast.getBoundingClientRect();
            toast.style.transition = '';
            drag.x = getX(e.nativeEvent);
            drag.y = getY(e.nativeEvent);
            if (props.draggableDirection === "x") {
                drag.start = drag.x;
                drag.removalDistance = toast.offsetWidth * (props.draggablePercent / 100);
            } else {
                drag.start = drag.y;
                drag.removalDistance = toast.offsetHeight * (props.draggablePercent / 100);
            }
        }
    }
    function onDragTransitionEnd() {
        if (drag.boundingRect) {
            var _drag$boundingRect = drag.boundingRect, top = _drag$boundingRect.top, bottom = _drag$boundingRect.bottom, left = _drag$boundingRect.left, right = _drag$boundingRect.right;
            if (props.pauseOnHover && drag.x >= left && drag.x <= right && drag.y >= top && drag.y <= bottom) pauseToast();
            else playToast();
        }
    }
    function playToast() {
        setIsRunning(true);
    }
    function pauseToast() {
        setIsRunning(false);
    }
    function bindFocusEvents() {
        if (!document.hasFocus()) pauseToast();
        window.addEventListener('focus', playToast);
        window.addEventListener('blur', pauseToast);
    }
    function unbindFocusEvents() {
        window.removeEventListener('focus', playToast);
        window.removeEventListener('blur', pauseToast);
    }
    function bindDragEvents() {
        document.addEventListener('mousemove', onDragMove);
        document.addEventListener('mouseup', onDragEnd);
        document.addEventListener('touchmove', onDragMove);
        document.addEventListener('touchend', onDragEnd);
    }
    function unbindDragEvents() {
        document.removeEventListener('mousemove', onDragMove);
        document.removeEventListener('mouseup', onDragEnd);
        document.removeEventListener('touchmove', onDragMove);
        document.removeEventListener('touchend', onDragEnd);
    }
    function onDragMove(e) {
        if (drag.canDrag) {
            e.preventDefault();
            var toast = toastRef.current;
            if (isRunning) pauseToast();
            drag.x = getX(e);
            drag.y = getY(e);
            if (props.draggableDirection === "x") drag.delta = drag.x - drag.start;
            else drag.delta = drag.y - drag.start;
             // prevent false positif during a toast click
            if (drag.start !== drag.x) drag.canCloseOnClick = false;
            toast.style.transform = "translate" + props.draggableDirection + "(" + drag.delta + "px)";
            toast.style.opacity = "" + (1 - Math.abs(drag.delta / drag.removalDistance));
        }
    }
    function onDragEnd() {
        var toast = toastRef.current;
        if (drag.canDrag) {
            drag.canDrag = false;
            if (Math.abs(drag.delta) > drag.removalDistance) {
                setPreventExitTransition(true);
                props.closeToast();
                return;
            }
            toast.style.transition = 'transform 0.2s, opacity 0.2s';
            toast.style.transform = "translate" + props.draggableDirection + "(0)";
            toast.style.opacity = '1';
        }
    }
    var eventHandlers = {
        onMouseDown: onDragStart,
        onTouchStart: onDragStart,
        onMouseUp: onDragTransitionEnd,
        onTouchEnd: onDragTransitionEnd
    };
    if (autoClose && pauseOnHover) {
        eventHandlers.onMouseEnter = pauseToast;
        eventHandlers.onMouseLeave = playToast;
    } // prevent toast from closing when user drags the toast
    if (closeOnClick) eventHandlers.onClick = function(e) {
        onClick && onClick(e);
        drag.canCloseOnClick && closeToast();
    };
    return {
        playToast: playToast,
        pauseToast: pauseToast,
        isRunning: isRunning,
        preventExitTransition: preventExitTransition,
        toastRef: toastRef,
        eventHandlers: eventHandlers
    };
}
function CloseButton(_ref) {
    var closeToast = _ref.closeToast, type = _ref.type, _ref$ariaLabel = _ref.ariaLabel, ariaLabel = _ref$ariaLabel === void 0 ? 'close' : _ref$ariaLabel;
    return React.createElement("button", {
        className: "Toastify__close-button Toastify__close-button--" + type,
        type: "button",
        onClick: function onClick(e) {
            e.stopPropagation();
            closeToast(e);
        },
        "aria-label": ariaLabel
    }, React.createElement("svg", {
        "aria-hidden": "true",
        viewBox: "0 0 14 16"
    }, React.createElement("path", {
        fillRule: "evenodd",
        d: "M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z"
    })));
}
function ProgressBar(_ref) {
    var _cx, _animationEvent;
    var delay = _ref.delay, isRunning = _ref.isRunning, closeToast = _ref.closeToast, type = _ref.type, hide = _ref.hide, className = _ref.className, userStyle = _ref.style, controlledProgress = _ref.controlledProgress, progress = _ref.progress, rtl = _ref.rtl, isIn = _ref.isIn;
    var style = _extends({
    }, userStyle, {
        animationDuration: delay + "ms",
        animationPlayState: isRunning ? 'running' : 'paused',
        opacity: hide ? 0 : 1
    });
    if (controlledProgress) style.transform = "scaleX(" + progress + ")";
    var defaultClassName = cx("Toastify__progress-bar", controlledProgress ? "Toastify__progress-bar--controlled" : "Toastify__progress-bar--animated", "Toastify__progress-bar--" + type, (_cx = {
    }, _cx["Toastify" + "__progress-bar--rtl"] = rtl, _cx));
    var classNames = isFn(className) ? className({
        rtl: rtl,
        type: type,
        defaultClassName: defaultClassName
    }) : cx(defaultClassName, className); // 🧐 controlledProgress is derived from progress
    // so if controlledProgress is set
    // it means that this is also the case for progress
    var animationEvent = (_animationEvent = {
    }, _animationEvent[controlledProgress && progress >= 1 ? 'onTransitionEnd' : 'onAnimationEnd'] = controlledProgress && progress < 1 ? null : function() {
        isIn && closeToast();
    }, _animationEvent); // TODO: add aria-valuenow, aria-valuemax, aria-valuemin
    return React.createElement("div", Object.assign({
        role: "progressbar",
        "aria-hidden": hide ? 'true' : 'false',
        "aria-label": "notification timer",
        className: classNames,
        style: style
    }, animationEvent));
}
ProgressBar.defaultProps = {
    type: TYPE.DEFAULT,
    hide: false
};
var Toast = function Toast1(props) {
    var _cx;
    var _useToast = useToast(props), isRunning = _useToast.isRunning, preventExitTransition = _useToast.preventExitTransition, toastRef = _useToast.toastRef, eventHandlers = _useToast.eventHandlers;
    var closeButton = props.closeButton, children = props.children, autoClose = props.autoClose, onClick = props.onClick, type = props.type, hideProgressBar = props.hideProgressBar, closeToast = props.closeToast, Transition = props.transition, position = props.position, className = props.className, style = props.style, bodyClassName = props.bodyClassName, bodyStyle = props.bodyStyle, progressClassName = props.progressClassName, progressStyle = props.progressStyle, updateId = props.updateId, role = props.role, progress = props.progress, rtl = props.rtl, toastId = props.toastId, deleteToast = props.deleteToast, isIn = props.isIn;
    var defaultClassName = cx("Toastify__toast", "Toastify__toast--" + type, (_cx = {
    }, _cx["Toastify" + "__toast--rtl"] = rtl, _cx));
    var cssClasses = isFn(className) ? className({
        rtl: rtl,
        position: position,
        type: type,
        defaultClassName: defaultClassName
    }) : cx(defaultClassName, className);
    var isProgressControlled = !!progress;
    function renderCloseButton(closeButton1) {
        if (!closeButton1) return;
        var props1 = {
            closeToast: closeToast,
            type: type
        };
        if (isFn(closeButton1)) return closeButton1(props1);
        if (React.isValidElement(closeButton1)) return React.cloneElement(closeButton1, props1);
    }
    return React.createElement(Transition, {
        isIn: isIn,
        done: deleteToast,
        position: position,
        preventExitTransition: preventExitTransition,
        nodeRef: toastRef
    }, React.createElement("div", Object.assign({
        id: toastId,
        onClick: onClick,
        className: cssClasses
    }, eventHandlers, {
        style: style,
        ref: toastRef
    }), React.createElement("div", Object.assign({
    }, isIn && {
        role: role
    }, {
        className: isFn(bodyClassName) ? bodyClassName({
            type: type
        }) : cx("Toastify__toast-body", bodyClassName),
        style: bodyStyle
    }), children), renderCloseButton(closeButton), (autoClose || isProgressControlled) && React.createElement(ProgressBar, Object.assign({
    }, updateId && !isProgressControlled ? {
        key: "pb-" + updateId
    } : {
    }, {
        rtl: rtl,
        delay: autoClose,
        isRunning: isRunning,
        isIn: isIn,
        closeToast: closeToast,
        hide: hideProgressBar,
        type: type,
        style: progressStyle,
        className: progressClassName,
        controlledProgress: isProgressControlled,
        progress: progress
    }))));
};
var Bounce = /*#__PURE__*/ cssTransition({
    enter: "Toastify--animate Toastify__bounce-enter",
    exit: "Toastify--animate Toastify__bounce-exit",
    appendPosition: true
});
var Slide = /*#__PURE__*/ cssTransition({
    enter: "Toastify--animate Toastify__slide-enter",
    exit: "Toastify--animate Toastify__slide-exit",
    appendPosition: true
});
var Zoom = /*#__PURE__*/ cssTransition({
    enter: "Toastify--animate Toastify__zoom-enter",
    exit: "Toastify--animate Toastify__zoom-exit"
});
var Flip = /*#__PURE__*/ cssTransition({
    enter: "Toastify--animate Toastify__flip-enter",
    exit: "Toastify--animate Toastify__flip-exit"
});
var ToastContainer = function ToastContainer1(props) {
    var _useToastContainer = useToastContainer(props), getToastToRender = _useToastContainer.getToastToRender, containerRef = _useToastContainer.containerRef, isToastActive = _useToastContainer.isToastActive;
    var className = props.className, style = props.style, rtl = props.rtl, containerId = props.containerId;
    function getClassName(position) {
        var _cx;
        var defaultClassName = cx("Toastify__toast-container", "Toastify__toast-container--" + position, (_cx = {
        }, _cx["Toastify" + "__toast-container--rtl"] = rtl, _cx));
        return isFn(className) ? className({
            position: position,
            rtl: rtl,
            defaultClassName: defaultClassName
        }) : cx(defaultClassName, parseClassName(className));
    }
    return React.createElement("div", {
        ref: containerRef,
        className: "Toastify",
        id: containerId
    }, getToastToRender(function(position, toastList) {
        var containerStyle = toastList.length === 0 ? _extends({
        }, style, {
            pointerEvents: 'none'
        }) : _extends({
        }, style);
        return React.createElement("div", {
            className: getClassName(position),
            style: containerStyle,
            key: "container-" + position
        }, toastList.map(function(_ref) {
            var content = _ref.content, toastProps = _ref.props;
            return React.createElement(Toast, Object.assign({
            }, toastProps, {
                isIn: isToastActive(toastProps.toastId),
                key: "toast-" + toastProps.key,
                closeButton: toastProps.closeButton === true ? CloseButton : toastProps.closeButton
            }), content);
        }));
    }));
};
ToastContainer.defaultProps = {
    position: POSITION.TOP_RIGHT,
    transition: Bounce,
    rtl: false,
    autoClose: 5000,
    hideProgressBar: false,
    closeButton: CloseButton,
    pauseOnHover: true,
    pauseOnFocusLoss: true,
    closeOnClick: true,
    newestOnTop: false,
    draggable: true,
    draggablePercent: 80,
    draggableDirection: "x",
    role: 'alert'
};
var containers = /*#__PURE__*/ new Map();
var latestInstance;
var containerDomNode;
var containerConfig;
var queue = [];
var lazy = false;
/**
 * Check whether any container is currently mounted in the DOM
 */ function isAnyContainerMounted() {
    return containers.size > 0;
}
/**
 * Get the toast by id, given it's in the DOM, otherwise returns null
 */ function getToast(toastId, _ref) {
    var containerId = _ref.containerId;
    var container = containers.get(containerId || latestInstance);
    if (!container) return null;
    return container.getToast(toastId);
}
/**
 * Generate a random toastId
 */ function generateToastId() {
    return Math.random().toString(36).substr(2, 9);
}
/**
 * Generate a toastId or use the one provided
 */ function getToastId(options) {
    if (options && (isStr(options.toastId) || isNum(options.toastId))) return options.toastId;
    return generateToastId();
}
/**
 * If the container is not mounted, the toast is enqueued and
 * the container lazy mounted
 */ function dispatchToast(content, options) {
    if (isAnyContainerMounted()) eventManager.emit(0, content, options);
    else {
        queue.push({
            content: content,
            options: options
        });
        if (lazy && canUseDom) {
            lazy = false;
            containerDomNode = document.createElement('div');
            document.body.appendChild(containerDomNode);
            reactDom.render(React.createElement(ToastContainer, Object.assign({
            }, containerConfig)), containerDomNode);
        }
    }
    return options.toastId;
}
/**
 * Merge provided options with the defaults settings and generate the toastId
 */ function mergeOptions(type, options) {
    return _extends({
    }, options, {
        type: options && options.type || type,
        toastId: getToastId(options)
    });
}
var createToastByType = function createToastByType1(type) {
    return function(content, options) {
        return dispatchToast(content, mergeOptions(type, options));
    };
};
var toast = function toast1(content, options) {
    return dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));
};
toast.success = /*#__PURE__*/ createToastByType(TYPE.SUCCESS);
toast.info = /*#__PURE__*/ createToastByType(TYPE.INFO);
toast.error = /*#__PURE__*/ createToastByType(TYPE.ERROR);
toast.warning = /*#__PURE__*/ createToastByType(TYPE.WARNING);
toast.dark = /*#__PURE__*/ createToastByType(TYPE.DARK);
toast.warn = toast.warning;
/**
 * Remove toast programmaticaly
 */ toast.dismiss = function(id) {
    return eventManager.emit(1, id);
};
/**
 * Clear waiting queue when limit is used
 */ toast.clearWaitingQueue = function(params) {
    if (params === void 0) params = {
    };
    return eventManager.emit(5, params);
};
/**
 * return true if one container is displaying the toast
 */ toast.isActive = function(id) {
    var isToastActive = false;
    containers.forEach(function(container) {
        if (container.isToastActive && container.isToastActive(id)) isToastActive = true;
    });
    return isToastActive;
};
toast.update = function(toastId, options) {
    if (options === void 0) options = {
    };
    // if you call toast and toast.update directly nothing will be displayed
    // this is why I defered the update
    setTimeout(function() {
        var toast2 = getToast(toastId, options);
        if (toast2) {
            var oldOptions = toast2.props, oldContent = toast2.content;
            var nextOptions = _extends({
            }, oldOptions, options, {
                toastId: options.toastId || toastId,
                updateId: generateToastId()
            });
            if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;
            var content = nextOptions.render || oldContent;
            delete nextOptions.render;
            dispatchToast(content, nextOptions);
        }
    }, 0);
};
/**
 * Used for controlled progress bar.
 */ toast.done = function(id) {
    toast.update(id, {
        progress: 1
    });
};
/**
 * Track changes. The callback get the number of toast displayed
 *
 */ toast.onChange = function(callback) {
    if (isFn(callback)) eventManager.on(4, callback);
    return function() {
        isFn(callback) && eventManager.off(4, callback);
    };
};
/**
 * Configure the ToastContainer when lazy mounted
 */ toast.configure = function(config) {
    if (config === void 0) config = {
    };
    lazy = true;
    containerConfig = config;
};
toast.POSITION = POSITION;
toast.TYPE = TYPE;
/**
 * Wait until the ToastContainer is mounted to dispatch the toast
 * and attach isActive method
 */ eventManager.on(2, function(containerInstance) {
    latestInstance = containerInstance.containerId || containerInstance;
    containers.set(latestInstance, containerInstance);
    queue.forEach(function(item) {
        eventManager.emit(0, item.content, item.options);
    });
    queue = [];
}).on(3, function(containerInstance) {
    containers["delete"](containerInstance.containerId || containerInstance);
    if (containers.size === 0) eventManager.off(0).off(1).off(5);
    if (canUseDom && containerDomNode) document.body.removeChild(containerDomNode);
});
exports.Bounce = Bounce;
exports.Flip = Flip;
exports.Slide = Slide;
exports.ToastContainer = ToastContainer;
exports.Zoom = Zoom;
exports.collapseToast = collapseToast;
exports.cssTransition = cssTransition;
exports.toast = toast;
exports.useToast = useToast;
exports.useToastContainer = useToastContainer;

},{"react":"3b2NM","clsx":"29lTl","react-dom":"2sg1U"}],"29lTl":[function(require,module,exports) {
function toVal(mix) {
    var k, y, str = '';
    if (typeof mix === 'string' || typeof mix === 'number') str += mix;
    else if (typeof mix === 'object') {
        if (Array.isArray(mix)) for(k = 0; k < mix.length; k++){
            if (mix[k]) {
                if (y = toVal(mix[k])) {
                    str && (str += ' ');
                    str += y;
                }
            }
        }
        else {
            for(k in mix)if (mix[k]) {
                str && (str += ' ');
                str += k;
            }
        }
    }
    return str;
}
module.exports = function() {
    var i = 0, tmp, x, str = '';
    while(i < arguments.length){
        if (tmp = arguments[i++]) {
            if (x = toVal(tmp)) {
                str && (str += ' ');
                str += x;
            }
        }
    }
    return str;
};

},{}],"7rA65":[function(require,module,exports) {
module.exports = require('./lib/axios');

},{"./lib/axios":"4qfhW"}],"4qfhW":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Factory for creating new instances
axios.create = function create(instanceConfig) {
    return createInstance(mergeConfig(axios.defaults, instanceConfig));
};
// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require('./helpers/spread');
// Expose isAxiosError
axios.isAxiosError = require('./helpers/isAxiosError');
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./utils":"7J9rV","./helpers/bind":"78Fwk","./core/Axios":"26bz2","./core/mergeConfig":"42z1a","./defaults":"5j10E","./cancel/Cancel":"1Ql7i","./cancel/CancelToken":"hHamf","./cancel/isCancel":"3MAgn","./helpers/spread":"9FoXt","./helpers/isAxiosError":"1bzv8"}],"7J9rV":[function(require,module,exports) {
'use strict';
var bind = require('./helpers/bind');
/*global toString:true*/ // utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return toString.call(val) === '[object Array]';
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === 'undefined';
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ function isArrayBuffer(val) {
    return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(val) {
    return typeof FormData !== 'undefined' && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && val.buffer instanceof ArrayBuffer;
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === 'number';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === 'object';
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */ function isPlainObject(val) {
    if (toString.call(val) !== '[object Object]') return false;
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ function isDate(val) {
    return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ function isFile(val) {
    return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ function isBlob(val) {
    return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ function isURLSearchParams(val) {
    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.replace(/^\s*/, '').replace(/\s*$/, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) return false;
    return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') return;
    // Force an array if not already something iterable
    if (typeof obj !== 'object') /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {
    };
    function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val);
        else if (isPlainObject(val)) result[key] = merge({
        }, val);
        else if (isArray(val)) result[key] = val.slice();
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */ function stripBOM(content) {
    if (content.charCodeAt(0) === 65279) content = content.slice(1);
    return content;
}
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM
};

},{"./helpers/bind":"78Fwk"}],"78Fwk":[function(require,module,exports) {
'use strict';
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"26bz2":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof config === 'string') {
        config = arguments[1] || {
        };
        config.url = arguments[0];
    } else config = config || {
    };
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = 'get';
    // Hook up interceptors middleware
    var chain = [
        dispatchRequest,
        undefined
    ];
    var promise = Promise.resolve(config);
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
    });
    while(chain.length)promise = promise.then(chain.shift(), chain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};
// Provide aliases for supported request methods
utils.forEach([
    'delete',
    'get',
    'head',
    'options'
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {
        }, {
            method: method,
            url: url,
            data: (config || {
            }).data
        }));
    };
});
utils.forEach([
    'post',
    'put',
    'patch'
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {
        }, {
            method: method,
            url: url,
            data: data
        }));
    };
});
module.exports = Axios;

},{"./../utils":"7J9rV","../helpers/buildURL":"25KfR","./InterceptorManager":"33sRR","./dispatchRequest":"1mCjo","./mergeConfig":"42z1a"}],"25KfR":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === 'undefined') return;
            if (utils.isArray(val)) key = key + '[]';
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + '=' + encode(v));
            });
        });
        serializedParams = parts.join('&');
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }
    return url;
};

},{"./../utils":"7J9rV"}],"33sRR":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"./../utils":"7J9rV"}],"1mCjo":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {
    };
    // Transform request data
    config.data = transformData(config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {
    }, config.headers[config.method] || {
    }, config.headers);
    utils.forEach([
        'delete',
        'get',
        'head',
        'post',
        'put',
        'patch',
        'common'
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData(response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"./../utils":"7J9rV","./transformData":"1ueU6","../cancel/isCancel":"3MAgn","../defaults":"5j10E"}],"1ueU6":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
    });
    return data;
};

},{"./../utils":"7J9rV"}],"3MAgn":[function(require,module,exports) {
'use strict';
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"5j10E":[function(require,module,exports) {
var process = require("process");
'use strict';
var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');
var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded'
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) headers['Content-Type'] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== 'undefined') // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
    else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') // For node use HTTP adapter
    adapter = require('./adapters/http');
    return adapter;
}
var defaults = {
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, 'Accept');
            normalizeHeaderName(headers, 'Content-Type');
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                return data.toString();
            }
            if (utils.isObject(data)) {
                setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                return JSON.stringify(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            /*eslint no-param-reassign:0*/ if (typeof data === 'string') try {
                data = JSON.parse(data);
            } catch (e) {
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    }
};
defaults.headers = {
    common: {
        'Accept': 'application/json, text/plain, */*'
    }
};
utils.forEach([
    'delete',
    'get',
    'head'
], function forEachMethodNoData(method) {
    defaults.headers[method] = {
    };
});
utils.forEach([
    'post',
    'put',
    'patch'
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"process":"7AgFc","./utils":"7J9rV","./helpers/normalizeHeaderName":"5yMqL","./adapters/xhr":"6pJqL","./adapters/http":"6pJqL"}],"7AgFc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while((++queueIndex) < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"5yMqL":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"../utils":"7J9rV"}],"6pJqL":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
var settle = require('./../core/settle');
var cookies = require('./../helpers/cookies');
var buildURL = require('./../helpers/buildURL');
var buildFullPath = require('../core/buildFullPath');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if (utils.isFormData(requestData)) delete requestHeaders['Content-Type']; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || '';
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
            requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        // Listen for ready state
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) return;
            // Prepare the response
            var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(resolve, reject, response);
            // Clean up request
            request = null;
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(createError('Request aborted', config, 'ECONNABORTED', request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(createError('Network Error', config, null, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ('setRequestHeader' in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (config.responseType) try {
            request.responseType = config.responseType;
        } catch (e) {
            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
            if (config.responseType !== 'json') throw e;
        }
        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') request.addEventListener('progress', config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) request.upload.addEventListener('progress', config.onUploadProgress);
        if (config.cancelToken) // Handle cancellation
        config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) return;
            request.abort();
            reject(cancel);
            // Clean up request
            request = null;
        });
        if (!requestData) requestData = null;
        // Send the request
        request.send(requestData);
    });
};

},{"./../utils":"7J9rV","./../core/settle":"72M6J","./../helpers/cookies":"1m0F1","./../helpers/buildURL":"25KfR","../core/buildFullPath":"5fWja","./../helpers/parseHeaders":"1KizL","./../helpers/isURLSameOrigin":"6Gtz3","../core/createError":"7ETv1"}],"72M6J":[function(require,module,exports) {
'use strict';
var createError = require('./createError');
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
};

},{"./createError":"7ETv1"}],"7ETv1":[function(require,module,exports) {
'use strict';
var enhanceError = require('./enhanceError');
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ module.exports = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":"2O2Ud"}],"2O2Ud":[function(require,module,exports) {
'use strict';
/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */ module.exports = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) error.code = code;
    error.request = request;
    error.response = response;
    error.isAxiosError = true;
    error.toJSON = function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code
        };
    };
    return error;
};

},{}],"1m0F1":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
(function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + '=' + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push('expires=' + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push('path=' + path);
            if (utils.isString(domain)) cookie.push('domain=' + domain);
            if (secure === true) cookie.push('secure');
            document.cookie = cookie.join('; ');
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
        }
    };
})() : // Non standard browser env (web workers, react-native) lack needed support.
(function nonStandardBrowserEnv() {
    return {
        write: function write() {
        },
        read: function read() {
            return null;
        },
        remove: function remove() {
        }
    };
})();

},{"./../utils":"7J9rV"}],"5fWja":[function(require,module,exports) {
'use strict';
var isAbsoluteURL = require('../helpers/isAbsoluteURL');
var combineURLs = require('../helpers/combineURLs');
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"../helpers/isAbsoluteURL":"4FcN1","../helpers/combineURLs":"qMap4"}],"4FcN1":[function(require,module,exports) {
'use strict';
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],"qMap4":[function(require,module,exports) {
'use strict';
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

},{}],"1KizL":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    'age',
    'authorization',
    'content-length',
    'content-type',
    'etag',
    'expires',
    'from',
    'host',
    'if-modified-since',
    'if-unmodified-since',
    'last-modified',
    'location',
    'max-forwards',
    'proxy-authorization',
    'referer',
    'retry-after',
    'user-agent'
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {
    };
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === 'set-cookie') parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
    });
    return parsed;
};

},{"./../utils":"7J9rV"}],"6Gtz3":[function(require,module,exports) {
'use strict';
var utils = require('./../utils');
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
(function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute('href', href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
})() : // Non standard browser envs (web workers, react-native) lack needed support.
(function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
})();

},{"./../utils":"7J9rV"}],"42z1a":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {
    };
    var config = {
    };
    var valueFromConfig2Keys = [
        'url',
        'method',
        'data'
    ];
    var mergeDeepPropertiesKeys = [
        'headers',
        'auth',
        'proxy',
        'params'
    ];
    var defaultToConfig2Keys = [
        'baseURL',
        'transformRequest',
        'transformResponse',
        'paramsSerializer',
        'timeout',
        'timeoutMessage',
        'withCredentials',
        'adapter',
        'responseType',
        'xsrfCookieName',
        'xsrfHeaderName',
        'onUploadProgress',
        'onDownloadProgress',
        'decompress',
        'maxContentLength',
        'maxBodyLength',
        'maxRedirects',
        'transport',
        'httpAgent',
        'httpsAgent',
        'cancelToken',
        'socketPath',
        'responseEncoding'
    ];
    var directMergeKeys = [
        'validateStatus'
    ];
    function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        else if (utils.isPlainObject(source)) return utils.merge({
        }, source);
        else if (utils.isArray(source)) return source.slice();
        return source;
    }
    function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(config1[prop], config2[prop]);
        else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(undefined, config1[prop]);
    }
    utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(undefined, config2[prop]);
    });
    utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
    utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(undefined, config2[prop]);
        else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(undefined, config1[prop]);
    });
    utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) config[prop] = getMergedValue(config1[prop], config2[prop]);
        else if (prop in config1) config[prop] = getMergedValue(undefined, config1[prop]);
    });
    var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
    var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
    });
    utils.forEach(otherKeys, mergeDeepProperties);
    return config;
};

},{"../utils":"7J9rV"}],"1Ql7i":[function(require,module,exports) {
'use strict';
/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function Cancel(message) {
    this.message = message;
}
Cancel.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
};
Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

},{}],"hHamf":[function(require,module,exports) {
'use strict';
var Cancel = require('./Cancel');
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== 'function') throw new TypeError('executor must be a function.');
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"./Cancel":"1Ql7i"}],"9FoXt":[function(require,module,exports) {
'use strict';
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"1bzv8":[function(require,module,exports) {
'use strict';
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ module.exports = function isAxiosError(payload) {
    return typeof payload === 'object' && payload.isAxiosError === true;
};

},{}],"367CR":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"4Jj4f":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args;
    var timeout = undefined;
    return function(args1) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args1);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"592mh"}],"4Voyx":[function(require,module,exports) {
var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _formik = require("formik");
var _yup = require("yup");
var _reactToastify = require("react-toastify");
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _s = $RefreshSig$();
const Login = (props)=>{
    _s();
    const formik = _formik.useFormik({
        initialValues: {
            email: '',
            password: ''
        },
        validationSchema: _yup.object({
            email: _yup.string().email('Enter valid email address').strict().trim().required('This field is required'),
            password: _yup.string().strict().trim().required('This field is required')
        }),
        onSubmit: (data)=>{
            _axiosDefault.default.post('http://localhost:5000/api/login', data).then((res)=>{
                _reactToastify.toast.success("login sucessfully");
                localStorage.setItem('auth', JSON.stringify(res.data));
                props.history.push('./Navbar');
            }).catch((err)=>{
                _reactToastify.toast.error(err.response.data);
            });
        }
    });
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "container mt-4",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 51
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "jumbotron",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 52
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("h4", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 53
        },
        __self: undefined
    }, "Login"), /*#__PURE__*/ _reactDefault.default.createElement("form", {
        autoComplete: "off",
        onSubmit: formik.handleSubmit,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 54
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "form-group",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 57
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("label", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 58
        },
        __self: undefined
    }, "Email"), /*#__PURE__*/ _reactDefault.default.createElement("input", {
        name: "email",
        className: "form-control",
        type: "text",
        onChange: formik.handleChange,
        value: formik.values.email,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 59
        },
        __self: undefined
    }), formik.errors.email ? /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "text-danger",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 60
        },
        __self: undefined
    }, formik.errors.email) : null), /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "form-group",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 63
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("label", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 64
        },
        __self: undefined
    }, "Password"), /*#__PURE__*/ _reactDefault.default.createElement("input", {
        name: "password",
        className: "form-control",
        type: "text",
        onChange: formik.handleChange,
        value: formik.values.password,
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 65
        },
        __self: undefined
    }), formik.errors.password ? /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "text-danger",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 66
        },
        __self: undefined
    }, formik.errors.password) : null), /*#__PURE__*/ _reactDefault.default.createElement("br", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 69
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "d-flex justify-content-between",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 71
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("button", {
        className: "btn btn-secondary",
        type: "submit",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 72
        },
        __self: undefined
    }, " Submit"), /*#__PURE__*/ _reactDefault.default.createElement("a", {
        href: "#",
        onClick: ()=>{
            window.location.href = 'register';
        },
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\login.jsx",
            lineNumber: 74
        },
        __self: undefined
    }, "Register"))))));
};
_s(Login, "B/4rI4IXClQ7sG7psKj+pOuRe5Q=", false, function() {
    return [_formik.useFormik];
});
_c = Login;
exports.default = Login;
var _c;
$RefreshReg$(_c, "Login");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","formik":"67atH","yup":"0BxMn","react-toastify":"0AT5S","axios":"7rA65","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"2IKEr":[function(require,module,exports) {
var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _navbar = require("./Navbar");
var _navbarDefault = parcelHelpers.interopDefault(_navbar);
const Home = (props)=>{
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\home.jsx",
            lineNumber: 6
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_navbarDefault.default, {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\home.jsx",
            lineNumber: 7
        },
        __self: undefined
    }), "helooooo"));
};
_c = Home;
exports.default = Home;
var _c;
$RefreshReg$(_c, "Home");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","./Navbar":"57UFM","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"57UFM":[function(require,module,exports) {
var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRouterDom = require("react-router-dom");
const Navbar = (props)=>{
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 7
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("nav", {
        className: "navbar navbar-dark bg-dark navbar-expand-lg",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 8
        },
        __self: undefined
    }, "Welcome to Admin Page", /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "collapse navbar-collapse",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 10
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("ul", {
        className: "navbar-nav",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 11
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("li", {
        className: "navbar-item",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 12
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Link, {
        to: "/home",
        className: "nav-link",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 13
        },
        __self: undefined
    }, "View Conference")), /*#__PURE__*/ _reactDefault.default.createElement("li", {
        className: "navbar-item",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 15
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Link, {
        to: "/template",
        className: "nav-link",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 16
        },
        __self: undefined
    }, "Add Template")), /*#__PURE__*/ _reactDefault.default.createElement("li", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 20
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("button", {
        onClick: ()=>{
            localStorage.clear();
            props.history.push('/login');
        },
        className: "btn btn-primary",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\Navbar.jsx",
            lineNumber: 21
        },
        __self: undefined
    }, "Logout")))))));
};
_c = Navbar;
exports.default = Navbar;
var _c;
$RefreshReg$(_c, "Navbar");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","react-router-dom":"1PMSK","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"1PMSK":[function(require,module,exports) {
"use strict";
module.exports = require("./cjs/react-router-dom.js");

},{"./cjs/react-router-dom.js":"GyxyM"}],"GyxyM":[function(require,module,exports) {
'use strict';
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var reactRouter = require('react-router');
var React = _interopDefault(require('react'));
var history = require('history');
var PropTypes = _interopDefault(require('prop-types'));
var warning = _interopDefault(require('tiny-warning'));
var invariant = _interopDefault(require('tiny-invariant'));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * The public API for a <Router> that uses HTML5 history.
 */ var BrowserRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(BrowserRouter2, _React$Component);
    function BrowserRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.history = history.createBrowserHistory(_this.props);
        return _this;
    }
    var _proto = BrowserRouter2.prototype;
    _proto.render = function render() {
        return React.createElement(reactRouter.Router, {
            history: this.history,
            children: this.props.children
        });
    };
    return BrowserRouter2;
}(React.Component);
BrowserRouter1.propTypes = {
    basename: PropTypes.string,
    children: PropTypes.node,
    forceRefresh: PropTypes.bool,
    getUserConfirmation: PropTypes.func,
    keyLength: PropTypes.number
};
BrowserRouter1.prototype.componentDidMount = function() {
    warning(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.");
};
/**
 * The public API for a <Router> that uses window.location.hash.
 */ var HashRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(HashRouter2, _React$Component);
    function HashRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.history = history.createHashHistory(_this.props);
        return _this;
    }
    var _proto = HashRouter2.prototype;
    _proto.render = function render() {
        return React.createElement(reactRouter.Router, {
            history: this.history,
            children: this.props.children
        });
    };
    return HashRouter2;
}(React.Component);
HashRouter1.propTypes = {
    basename: PropTypes.string,
    children: PropTypes.node,
    getUserConfirmation: PropTypes.func,
    hashType: PropTypes.oneOf([
        "hashbang",
        "noslash",
        "slash"
    ])
};
HashRouter1.prototype.componentDidMount = function() {
    warning(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.");
};
var resolveToLocation = function resolveToLocation1(to, currentLocation) {
    return typeof to === "function" ? to(currentLocation) : to;
};
var normalizeToLocation = function normalizeToLocation1(to, currentLocation) {
    return typeof to === "string" ? history.createLocation(to, null, null, currentLocation) : to;
};
var forwardRefShim = function forwardRefShim1(C) {
    return C;
};
var forwardRef = React.forwardRef;
if (typeof forwardRef === "undefined") forwardRef = forwardRefShim;
function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var LinkAnchor = forwardRef(function(_ref, forwardedRef) {
    var innerRef = _ref.innerRef, navigate = _ref.navigate, _onClick = _ref.onClick, rest = _objectWithoutPropertiesLoose(_ref, [
        "innerRef",
        "navigate",
        "onClick"
    ]);
    var target = rest.target;
    var props = _extends({
    }, rest, {
        onClick: function onClick(event) {
            try {
                if (_onClick) _onClick(event);
            } catch (ex) {
                event.preventDefault();
                throw ex;
            }
            if (!event.defaultPrevented && event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event)) {
                event.preventDefault();
                navigate();
            }
        }
    }); // React 15 compat
    if (forwardRefShim !== forwardRef) props.ref = forwardedRef || innerRef;
    else props.ref = innerRef;
    /* eslint-disable-next-line jsx-a11y/anchor-has-content */ return React.createElement("a", props);
});
LinkAnchor.displayName = "LinkAnchor";
/**
 * The public API for rendering a history-aware <a>.
 */ var Link = forwardRef(function(_ref2, forwardedRef) {
    var _ref2$component = _ref2.component, component = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace = _ref2.replace, to = _ref2.to, innerRef = _ref2.innerRef, rest = _objectWithoutPropertiesLoose(_ref2, [
        "component",
        "replace",
        "to",
        "innerRef"
    ]);
    return React.createElement(reactRouter.__RouterContext.Consumer, null, function(context) {
        !context && invariant(false, "You should not use <Link> outside a <Router>");
        var history1 = context.history;
        var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
        var href = location ? history1.createHref(location) : "";
        var props = _extends({
        }, rest, {
            href: href,
            navigate: function navigate() {
                var location1 = resolveToLocation(to, context.location);
                var method = replace ? history1.replace : history1.push;
                method(location1);
            }
        }); // React 15 compat
        if (forwardRefShim !== forwardRef) props.ref = forwardedRef || innerRef;
        else props.innerRef = innerRef;
        return React.createElement(component, props);
    });
});
var toType = PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.object,
    PropTypes.func
]);
var refType = PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.func,
    PropTypes.shape({
        current: PropTypes.any
    })
]);
Link.displayName = "Link";
Link.propTypes = {
    innerRef: refType,
    onClick: PropTypes.func,
    replace: PropTypes.bool,
    target: PropTypes.string,
    to: toType.isRequired
};
var forwardRefShim$1 = function forwardRefShim2(C) {
    return C;
};
var forwardRef$1 = React.forwardRef;
if (typeof forwardRef$1 === "undefined") forwardRef$1 = forwardRefShim$1;
function joinClassnames() {
    for(var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++)classnames[_key] = arguments[_key];
    return classnames.filter(function(i) {
        return i;
    }).join(" ");
}
/**
 * A <Link> wrapper that knows if it's "active" or not.
 */ var NavLink = forwardRef$1(function(_ref, forwardedRef) {
    var _ref$ariaCurrent = _ref["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref.activeStyle, classNameProp = _ref.className, exact = _ref.exact, isActiveProp = _ref.isActive, locationProp = _ref.location, sensitive = _ref.sensitive, strict = _ref.strict, styleProp = _ref.style, to = _ref.to, innerRef = _ref.innerRef, rest = _objectWithoutPropertiesLoose(_ref, [
        "aria-current",
        "activeClassName",
        "activeStyle",
        "className",
        "exact",
        "isActive",
        "location",
        "sensitive",
        "strict",
        "style",
        "to",
        "innerRef"
    ]);
    return React.createElement(reactRouter.__RouterContext.Consumer, null, function(context) {
        !context && invariant(false, "You should not use <NavLink> outside a <Router>");
        var currentLocation = locationProp || context.location;
        var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
        var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202
        var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
        var match = escapedPath ? reactRouter.matchPath(currentLocation.pathname, {
            path: escapedPath,
            exact: exact,
            sensitive: sensitive,
            strict: strict
        }) : null;
        var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
        var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
        var style = isActive ? _extends({
        }, styleProp, {
        }, activeStyle) : styleProp;
        var props = _extends({
            "aria-current": isActive && ariaCurrent || null,
            className: className,
            style: style,
            to: toLocation
        }, rest); // React 15 compat
        if (forwardRefShim$1 !== forwardRef$1) props.ref = forwardedRef || innerRef;
        else props.innerRef = innerRef;
        return React.createElement(Link, props);
    });
});
NavLink.displayName = "NavLink";
var ariaCurrentType = PropTypes.oneOf([
    "page",
    "step",
    "location",
    "date",
    "time",
    "true"
]);
NavLink.propTypes = _extends({
}, Link.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: PropTypes.string,
    activeStyle: PropTypes.object,
    className: PropTypes.string,
    exact: PropTypes.bool,
    isActive: PropTypes.func,
    location: PropTypes.object,
    sensitive: PropTypes.bool,
    strict: PropTypes.bool,
    style: PropTypes.object
});
Object.defineProperty(exports, 'MemoryRouter', {
    enumerable: true,
    get: function() {
        return reactRouter.MemoryRouter;
    }
});
Object.defineProperty(exports, 'Prompt', {
    enumerable: true,
    get: function() {
        return reactRouter.Prompt;
    }
});
Object.defineProperty(exports, 'Redirect', {
    enumerable: true,
    get: function() {
        return reactRouter.Redirect;
    }
});
Object.defineProperty(exports, 'Route', {
    enumerable: true,
    get: function() {
        return reactRouter.Route;
    }
});
Object.defineProperty(exports, 'Router', {
    enumerable: true,
    get: function() {
        return reactRouter.Router;
    }
});
Object.defineProperty(exports, 'StaticRouter', {
    enumerable: true,
    get: function() {
        return reactRouter.StaticRouter;
    }
});
Object.defineProperty(exports, 'Switch', {
    enumerable: true,
    get: function() {
        return reactRouter.Switch;
    }
});
Object.defineProperty(exports, 'generatePath', {
    enumerable: true,
    get: function() {
        return reactRouter.generatePath;
    }
});
Object.defineProperty(exports, 'matchPath', {
    enumerable: true,
    get: function() {
        return reactRouter.matchPath;
    }
});
Object.defineProperty(exports, 'useHistory', {
    enumerable: true,
    get: function() {
        return reactRouter.useHistory;
    }
});
Object.defineProperty(exports, 'useLocation', {
    enumerable: true,
    get: function() {
        return reactRouter.useLocation;
    }
});
Object.defineProperty(exports, 'useParams', {
    enumerable: true,
    get: function() {
        return reactRouter.useParams;
    }
});
Object.defineProperty(exports, 'useRouteMatch', {
    enumerable: true,
    get: function() {
        return reactRouter.useRouteMatch;
    }
});
Object.defineProperty(exports, 'withRouter', {
    enumerable: true,
    get: function() {
        return reactRouter.withRouter;
    }
});
exports.BrowserRouter = BrowserRouter1;
exports.HashRouter = HashRouter1;
exports.Link = Link;
exports.NavLink = NavLink;

},{"react-router":"3v97x","react":"3b2NM","history":"RV0qD","prop-types":"4dfy5","tiny-warning":"3B527","tiny-invariant":"4v3Kg"}],"3v97x":[function(require,module,exports) {
"use strict";
module.exports = require("./cjs/react-router.js");

},{"./cjs/react-router.js":"6hyRN"}],"6hyRN":[function(require,module,exports) {
'use strict';
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var history = require('history');
var warning = _interopDefault(require('tiny-warning'));
var createContext = _interopDefault(require('mini-create-react-context'));
var invariant = _interopDefault(require('tiny-invariant'));
var pathToRegexp = _interopDefault(require('path-to-regexp'));
var reactIs = require('react-is');
var hoistStatics = _interopDefault(require('hoist-non-react-statics'));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
// TODO: Replace with React.createContext once we can assume React 16+
var createNamedContext = function createNamedContext1(name) {
    var context = createContext();
    context.displayName = name;
    return context;
};
var historyContext = /*#__PURE__*/ createNamedContext("Router-History");
// TODO: Replace with React.createContext once we can assume React 16+
var createNamedContext$1 = function createNamedContext2(name) {
    var context = createContext();
    context.displayName = name;
    return context;
};
var context = /*#__PURE__*/ createNamedContext$1("Router");
/**
 * The public API for putting history on context.
 */ var Router1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(Router2, _React$Component);
    Router2.computeRootMatch = function computeRootMatch(pathname) {
        return {
            path: "/",
            url: "/",
            params: {
            },
            isExact: pathname === "/"
        };
    };
    function Router2(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _this.state = {
            location: props.history.location
        }; // This is a bit of a hack. We have to start listening for location
        // changes here in the constructor in case there are any <Redirect>s
        // on the initial render. If there are, they will replace/push when
        // they mount and since cDM fires in children before parents, we may
        // get a new location before the <Router> is mounted.
        _this._isMounted = false;
        _this._pendingLocation = null;
        if (!props.staticContext) _this.unlisten = props.history.listen(function(location) {
            if (_this._isMounted) _this.setState({
                location: location
            });
            else _this._pendingLocation = location;
        });
        return _this;
    }
    var _proto = Router2.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this._isMounted = true;
        if (this._pendingLocation) this.setState({
            location: this._pendingLocation
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.unlisten) this.unlisten();
    };
    _proto.render = function render() {
        return React.createElement(context.Provider, {
            value: {
                history: this.props.history,
                location: this.state.location,
                match: Router2.computeRootMatch(this.state.location.pathname),
                staticContext: this.props.staticContext
            }
        }, React.createElement(historyContext.Provider, {
            children: this.props.children || null,
            value: this.props.history
        }));
    };
    return Router2;
}(React.Component);
Router1.propTypes = {
    children: PropTypes.node,
    history: PropTypes.object.isRequired,
    staticContext: PropTypes.object
};
Router1.prototype.componentDidUpdate = function(prevProps) {
    warning(prevProps.history === this.props.history, "You cannot change <Router history>");
};
/**
 * The public API for a <Router> that stores location in memory.
 */ var MemoryRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(MemoryRouter2, _React$Component);
    function MemoryRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.history = history.createMemoryHistory(_this.props);
        return _this;
    }
    var _proto = MemoryRouter2.prototype;
    _proto.render = function render() {
        return React.createElement(Router1, {
            history: this.history,
            children: this.props.children
        });
    };
    return MemoryRouter2;
}(React.Component);
MemoryRouter1.propTypes = {
    initialEntries: PropTypes.array,
    initialIndex: PropTypes.number,
    getUserConfirmation: PropTypes.func,
    keyLength: PropTypes.number,
    children: PropTypes.node
};
MemoryRouter1.prototype.componentDidMount = function() {
    warning(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.");
};
var Lifecycle1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(Lifecycle2, _React$Component);
    function Lifecycle2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Lifecycle2.prototype;
    _proto.componentDidMount = function componentDidMount() {
        if (this.props.onMount) this.props.onMount.call(this, this);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.props.onUnmount) this.props.onUnmount.call(this, this);
    };
    _proto.render = function render() {
        return null;
    };
    return Lifecycle2;
}(React.Component);
/**
 * The public API for prompting the user before navigating away from a screen.
 */ function Prompt(_ref) {
    var message = _ref.message, _ref$when = _ref.when, when = _ref$when === void 0 ? true : _ref$when;
    return React.createElement(context.Consumer, null, function(context1) {
        !context1 && invariant(false, "You should not use <Prompt> outside a <Router>");
        if (!when || context1.staticContext) return null;
        var method = context1.history.block;
        return React.createElement(Lifecycle1, {
            onMount: function onMount(self) {
                self.release = method(message);
            },
            onUpdate: function onUpdate(self, prevProps) {
                if (prevProps.message !== message) {
                    self.release();
                    self.release = method(message);
                }
            },
            onUnmount: function onUnmount(self) {
                self.release();
            },
            message: message
        });
    });
}
var messageType = PropTypes.oneOfType([
    PropTypes.func,
    PropTypes.string
]);
Prompt.propTypes = {
    when: PropTypes.bool,
    message: messageType.isRequired
};
var cache = {
};
var cacheLimit = 10000;
var cacheCount = 0;
function compilePath(path) {
    if (cache[path]) return cache[path];
    var generator = pathToRegexp.compile(path);
    if (cacheCount < cacheLimit) {
        cache[path] = generator;
        cacheCount++;
    }
    return generator;
}
/**
 * Public API for generating a URL pathname from a path and parameters.
 */ function generatePath(path, params) {
    if (path === void 0) path = "/";
    if (params === void 0) params = {
    };
    return path === "/" ? path : compilePath(path)(params, {
        pretty: true
    });
}
/**
 * The public API for navigating programmatically with a component.
 */ function Redirect(_ref) {
    var computedMatch = _ref.computedMatch, to = _ref.to, _ref$push = _ref.push, push = _ref$push === void 0 ? false : _ref$push;
    return React.createElement(context.Consumer, null, function(context1) {
        !context1 && invariant(false, "You should not use <Redirect> outside a <Router>");
        var history$1 = context1.history, staticContext = context1.staticContext;
        var method = push ? history$1.push : history$1.replace;
        var location = history.createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({
        }, to, {
            pathname: generatePath(to.pathname, computedMatch.params)
        }) : to); // When rendering in a static context,
        // set the new location immediately.
        if (staticContext) {
            method(location);
            return null;
        }
        return React.createElement(Lifecycle1, {
            onMount: function onMount() {
                method(location);
            },
            onUpdate: function onUpdate(self, prevProps) {
                var prevLocation = history.createLocation(prevProps.to);
                if (!history.locationsAreEqual(prevLocation, _extends({
                }, location, {
                    key: prevLocation.key
                }))) method(location);
            },
            to: to
        });
    });
}
Redirect.propTypes = {
    push: PropTypes.bool,
    from: PropTypes.string,
    to: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.object
    ]).isRequired
};
var cache$1 = {
};
var cacheLimit$1 = 10000;
var cacheCount$1 = 0;
function compilePath$1(path, options) {
    var cacheKey = "" + options.end + options.strict + options.sensitive;
    var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {
    });
    if (pathCache[path]) return pathCache[path];
    var keys = [];
    var regexp = pathToRegexp(path, keys, options);
    var result = {
        regexp: regexp,
        keys: keys
    };
    if (cacheCount$1 < cacheLimit$1) {
        pathCache[path] = result;
        cacheCount$1++;
    }
    return result;
}
/**
 * Public API for matching a URL pathname to a path.
 */ function matchPath(pathname, options) {
    if (options === void 0) options = {
    };
    if (typeof options === "string" || Array.isArray(options)) options = {
        path: options
    };
    var _options = options, path = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
    var paths = [].concat(path);
    return paths.reduce(function(matched, path1) {
        if (!path1 && path1 !== "") return null;
        if (matched) return matched;
        var _compilePath = compilePath$1(path1, {
            end: exact,
            strict: strict,
            sensitive: sensitive
        }), regexp = _compilePath.regexp, keys = _compilePath.keys;
        var match = regexp.exec(pathname);
        if (!match) return null;
        var url = match[0], values = match.slice(1);
        var isExact = pathname === url;
        if (exact && !isExact) return null;
        return {
            path: path1,
            // the path used to match
            url: path1 === "/" && url === "" ? "/" : url,
            // the matched portion of the URL
            isExact: isExact,
            // whether or not we matched exactly
            params: keys.reduce(function(memo, key, index) {
                memo[key.name] = values[index];
                return memo;
            }, {
            })
        };
    }, null);
}
function isEmptyChildren(children) {
    return React.Children.count(children) === 0;
}
function evalChildrenDev(children, props, path) {
    var value = children(props);
    warning(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`");
    return value || null;
}
/**
 * The public API for matching a single path and rendering.
 */ var Route1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(Route2, _React$Component);
    function Route2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Route2.prototype;
    _proto.render = function render() {
        var _this = this;
        return React.createElement(context.Consumer, null, function(context$1) {
            !context$1 && invariant(false, "You should not use <Route> outside a <Router>");
            var location = _this.props.location || context$1.location;
            var match = _this.props.computedMatch ? _this.props.computedMatch : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;
            var props = _extends({
            }, context$1, {
                location: location,
                match: match
            });
            var _this$props = _this.props, children = _this$props.children, component = _this$props.component, render1 = _this$props.render; // Preact uses an empty array as children by
            // default, so use null if that's the case.
            if (Array.isArray(children) && children.length === 0) children = null;
            return React.createElement(context.Provider, {
                value: props
            }, props.match ? children ? typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : children : component ? React.createElement(component, props) : render1 ? render1(props) : null : typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : null);
        });
    };
    return Route2;
}(React.Component);
Route1.propTypes = {
    children: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.node
    ]),
    component: function component(props, propName) {
        if (props[propName] && !reactIs.isValidElementType(props[propName])) return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
    },
    exact: PropTypes.bool,
    location: PropTypes.object,
    path: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string)
    ]),
    render: PropTypes.func,
    sensitive: PropTypes.bool,
    strict: PropTypes.bool
};
Route1.prototype.componentDidMount = function() {
    warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored");
    warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored");
    warning(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
};
Route1.prototype.componentDidUpdate = function(prevProps) {
    warning(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    warning(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
};
function addLeadingSlash(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
}
function addBasename(basename, location) {
    if (!basename) return location;
    return _extends({
    }, location, {
        pathname: addLeadingSlash(basename) + location.pathname
    });
}
function stripBasename(basename, location) {
    if (!basename) return location;
    var base = addLeadingSlash(basename);
    if (location.pathname.indexOf(base) !== 0) return location;
    return _extends({
    }, location, {
        pathname: location.pathname.substr(base.length)
    });
}
function createURL(location) {
    return typeof location === "string" ? location : history.createPath(location);
}
function staticHandler(methodName) {
    return function() {
        invariant(false, "You cannot %s with <StaticRouter>", methodName);
    };
}
function noop() {
}
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */ var StaticRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(StaticRouter2, _React$Component);
    function StaticRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.handlePush = function(location) {
            return _this.navigateTo(location, "PUSH");
        };
        _this.handleReplace = function(location) {
            return _this.navigateTo(location, "REPLACE");
        };
        _this.handleListen = function() {
            return noop;
        };
        _this.handleBlock = function() {
            return noop;
        };
        return _this;
    }
    var _proto = StaticRouter2.prototype;
    _proto.navigateTo = function navigateTo(location, action) {
        var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context1 = _this$props$context === void 0 ? {
        } : _this$props$context;
        context1.action = action;
        context1.location = addBasename(basename, history.createLocation(location));
        context1.url = createURL(context1.location);
    };
    _proto.render = function render() {
        var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context1 = _this$props2$context === void 0 ? {
        } : _this$props2$context, _this$props2$location = _this$props2.location, location = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = _objectWithoutPropertiesLoose(_this$props2, [
            "basename",
            "context",
            "location"
        ]);
        var history$1 = {
            createHref: function createHref(path) {
                return addLeadingSlash(basename + createURL(path));
            },
            action: "POP",
            location: stripBasename(basename, history.createLocation(location)),
            push: this.handlePush,
            replace: this.handleReplace,
            go: staticHandler("go"),
            goBack: staticHandler("goBack"),
            goForward: staticHandler("goForward"),
            listen: this.handleListen,
            block: this.handleBlock
        };
        return React.createElement(Router1, _extends({
        }, rest, {
            history: history$1,
            staticContext: context1
        }));
    };
    return StaticRouter2;
}(React.Component);
StaticRouter1.propTypes = {
    basename: PropTypes.string,
    context: PropTypes.object,
    location: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.object
    ])
};
StaticRouter1.prototype.componentDidMount = function() {
    warning(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.");
};
/**
 * The public API for rendering the first <Route> that matches.
 */ var Switch1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(Switch2, _React$Component);
    function Switch2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Switch2.prototype;
    _proto.render = function render() {
        var _this = this;
        return React.createElement(context.Consumer, null, function(context1) {
            !context1 && invariant(false, "You should not use <Switch> outside a <Router>");
            var location = _this.props.location || context1.location;
            var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
            // here because toArray adds keys to all child elements and we do not want
            // to trigger an unmount/remount for two <Route>s that render the same
            // component at different URLs.
            React.Children.forEach(_this.props.children, function(child) {
                if (match == null && React.isValidElement(child)) {
                    element = child;
                    var path = child.props.path || child.props.from;
                    match = path ? matchPath(location.pathname, _extends({
                    }, child.props, {
                        path: path
                    })) : context1.match;
                }
            });
            return match ? React.cloneElement(element, {
                location: location,
                computedMatch: match
            }) : null;
        });
    };
    return Switch2;
}(React.Component);
Switch1.propTypes = {
    children: PropTypes.node,
    location: PropTypes.object
};
Switch1.prototype.componentDidUpdate = function(prevProps) {
    warning(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    warning(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
};
/**
 * A public higher-order component to access the imperative API
 */ function withRouter(Component) {
    var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
    var C = function C1(props) {
        var wrappedComponentRef = props.wrappedComponentRef, remainingProps = _objectWithoutPropertiesLoose(props, [
            "wrappedComponentRef"
        ]);
        return React.createElement(context.Consumer, null, function(context1) {
            !context1 && invariant(false, "You should not use <" + displayName + " /> outside a <Router>");
            return React.createElement(Component, _extends({
            }, remainingProps, context1, {
                ref: wrappedComponentRef
            }));
        });
    };
    C.displayName = displayName;
    C.WrappedComponent = Component;
    C.propTypes = {
        wrappedComponentRef: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.func,
            PropTypes.object
        ])
    };
    return hoistStatics(C, Component);
}
var useContext = React.useContext;
function useHistory() {
    !(typeof useContext === "function") && invariant(false, "You must use React >= 16.8 in order to use useHistory()");
    return useContext(historyContext);
}
function useLocation() {
    !(typeof useContext === "function") && invariant(false, "You must use React >= 16.8 in order to use useLocation()");
    return useContext(context).location;
}
function useParams() {
    !(typeof useContext === "function") && invariant(false, "You must use React >= 16.8 in order to use useParams()");
    var match = useContext(context).match;
    return match ? match.params : {
    };
}
function useRouteMatch(path) {
    !(typeof useContext === "function") && invariant(false, "You must use React >= 16.8 in order to use useRouteMatch()");
    var location = useLocation();
    var match = useContext(context).match;
    return path ? matchPath(location.pathname, path) : match;
}
if (typeof window !== "undefined") {
    var global = window;
    var key = "__react_router_build__";
    var buildNames = {
        cjs: "CommonJS",
        esm: "ES modules",
        umd: "UMD"
    };
    if (global[key] && global[key] !== "cjs") {
        var initialBuildName = buildNames[global[key]];
        var secondaryBuildName = buildNames["cjs"]; // TODO: Add link to article that explains in detail how to avoid
        // loading 2 different builds.
        throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }
    global[key] = "cjs";
}
exports.MemoryRouter = MemoryRouter1;
exports.Prompt = Prompt;
exports.Redirect = Redirect;
exports.Route = Route1;
exports.Router = Router1;
exports.StaticRouter = StaticRouter1;
exports.Switch = Switch1;
exports.__HistoryContext = historyContext;
exports.__RouterContext = context;
exports.generatePath = generatePath;
exports.matchPath = matchPath;
exports.useHistory = useHistory;
exports.useLocation = useLocation;
exports.useParams = useParams;
exports.useRouteMatch = useRouteMatch;
exports.withRouter = withRouter;

},{"react":"3b2NM","prop-types":"4dfy5","history":"RV0qD","tiny-warning":"3B527","mini-create-react-context":"g8cqP","tiny-invariant":"4v3Kg","path-to-regexp":"2JudW","react-is":"68QIU","hoist-non-react-statics":"3nUHV"}],"4dfy5":[function(require,module,exports) {
var ReactIs = require('react-is');
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);

},{"react-is":"68QIU","./factoryWithTypeCheckers":"1PVBO"}],"1PVBO":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactIs = require('react-is');
var assign = require('object-assign');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');
var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {
};
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message) {
        this.message = message;
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {
        };
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i = 0; i < arrayOfTypeCheckers.length; i++){
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            for(var i1 = 0; i1 < arrayOfTypeCheckers.length; i1++){
                var checker = arrayOfTypeCheckers[i1];
                if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) return null;
            }
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (!checker) continue;
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            // We need to check all keys in case some are required but missing from
            // props.
            var allKeys = assign({
            }, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"react-is":"68QIU","object-assign":"3eM6x","./lib/ReactPropTypesSecret":"3OVnw","./checkPropTypes":"R8SC7"}],"3OVnw":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"R8SC7":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function() {
};
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var loggedTypeFailures = {
};
var has = Function.call.bind(Object.prototype.hasOwnProperty);
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {
    };
};
module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":"3OVnw"}],"RV0qD":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/history.js');

},{"./cjs/history.js":"4vZxn"}],"4vZxn":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var resolvePathname = _interopDefault(require('resolve-pathname'));
var valueEqual = _interopDefault(require('value-equal'));
var warning = _interopDefault(require('tiny-warning'));
var invariant = _interopDefault(require('tiny-invariant'));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function addLeadingSlash(path) {
    return path.charAt(0) === '/' ? path : '/' + path;
}
function stripLeadingSlash(path) {
    return path.charAt(0) === '/' ? path.substr(1) : path;
}
function hasBasename(path, prefix) {
    return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
}
function stripBasename(path, prefix) {
    return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}
function stripTrailingSlash(path) {
    return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}
function parsePath(path) {
    var pathname = path || '/';
    var search = '';
    var hash = '';
    var hashIndex = pathname.indexOf('#');
    if (hashIndex !== -1) {
        hash = pathname.substr(hashIndex);
        pathname = pathname.substr(0, hashIndex);
    }
    var searchIndex = pathname.indexOf('?');
    if (searchIndex !== -1) {
        search = pathname.substr(searchIndex);
        pathname = pathname.substr(0, searchIndex);
    }
    return {
        pathname: pathname,
        search: search === '?' ? '' : search,
        hash: hash === '#' ? '' : hash
    };
}
function createPath(location) {
    var pathname = location.pathname, search = location.search, hash = location.hash;
    var path = pathname || '/';
    if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
    if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
    return path;
}
function createLocation(path, state, key, currentLocation) {
    var location;
    if (typeof path === 'string') {
        // Two-arg form: push(path, state)
        location = parsePath(path);
        location.state = state;
    } else {
        // One-arg form: push(location)
        location = _extends({
        }, path);
        if (location.pathname === undefined) location.pathname = '';
        if (location.search) {
            if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
        } else location.search = '';
        if (location.hash) {
            if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
        } else location.hash = '';
        if (state !== undefined && location.state === undefined) location.state = state;
    }
    try {
        location.pathname = decodeURI(location.pathname);
    } catch (e) {
        if (e instanceof URIError) throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
        else throw e;
    }
    if (key) location.key = key;
    if (currentLocation) {
        // Resolve incomplete/relative pathname relative to current location.
        if (!location.pathname) location.pathname = currentLocation.pathname;
        else if (location.pathname.charAt(0) !== '/') location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
    } else // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) location.pathname = '/';
    return location;
}
function locationsAreEqual(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
}
function createTransitionManager() {
    var prompt = null;
    function setPrompt(nextPrompt) {
        warning(prompt == null, 'A history supports only one prompt at a time');
        prompt = nextPrompt;
        return function() {
            if (prompt === nextPrompt) prompt = null;
        };
    }
    function confirmTransitionTo(location, action, getUserConfirmation, callback) {
        // TODO: If another transition starts while we're still confirming
        // the previous one, we may end up in a weird state. Figure out the
        // best way to handle this.
        if (prompt != null) {
            var result = typeof prompt === 'function' ? prompt(location, action) : prompt;
            if (typeof result === 'string') {
                if (typeof getUserConfirmation === 'function') getUserConfirmation(result, callback);
                else {
                    warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
                    callback(true);
                }
            } else // Return false from a transition hook to cancel the transition.
            callback(result !== false);
        } else callback(true);
    }
    var listeners = [];
    function appendListener(fn) {
        var isActive = true;
        function listener() {
            if (isActive) fn.apply(void 0, arguments);
        }
        listeners.push(listener);
        return function() {
            isActive = false;
            listeners = listeners.filter(function(item) {
                return item !== listener;
            });
        };
    }
    function notifyListeners() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        listeners.forEach(function(listener) {
            return listener.apply(void 0, args);
        });
    }
    return {
        setPrompt: setPrompt,
        confirmTransitionTo: confirmTransitionTo,
        appendListener: appendListener,
        notifyListeners: notifyListeners
    };
}
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function getConfirmation(message, callback) {
    callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */ function supportsHistory() {
    var ua = window.navigator.userAgent;
    if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
    return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */ function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */ function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */ function isExtraneousPopstateEvent(event) {
    return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}
var PopStateEvent1 = 'popstate';
var HashChangeEvent1 = 'hashchange';
function getHistoryState() {
    try {
        return window.history.state || {
        };
    } catch (e) {
        // IE 11 sometimes throws when accessing window.history.state
        // See https://github.com/ReactTraining/history/pull/289
        return {
        };
    }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */ function createBrowserHistory(props) {
    if (props === void 0) props = {
    };
    !canUseDOM && invariant(false, 'Browser history needs a DOM');
    var globalHistory = window.history;
    var canUseHistory = supportsHistory();
    var needsHashChangeListener = !supportsPopStateOnHashChange();
    var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
    function getDOMLocation(historyState) {
        var _ref = historyState || {
        }, key = _ref.key, state = _ref.state;
        var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
        var path = pathname + search + hash;
        warning(!basename || hasBasename(path, basename), "You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path \"" + path + '" to begin with "' + basename + '".');
        if (basename) path = stripBasename(path, basename);
        return createLocation(path, state, key);
    }
    function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
        _extends(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    function handlePopState(event) {
        // Ignore extraneous popstate events in WebKit.
        if (isExtraneousPopstateEvent(event)) return;
        handlePop(getDOMLocation(event.state));
    }
    function handleHashChange() {
        handlePop(getDOMLocation(getHistoryState()));
    }
    var forceNextPop = false;
    function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        } else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
                if (ok) setState({
                    action: action,
                    location: location
                });
                else revertPop(location);
            });
        }
    }
    function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of keys we've seen in sessionStorage.
        // Instead, we just default to 0 for keys we don't know.
        var toIndex = allKeys.indexOf(toLocation.key);
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allKeys.indexOf(fromLocation.key);
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    }
    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [
        initialLocation.key
    ]; // Public interface
    function createHref(location) {
        return basename + createPath(location);
    }
    function push(path, state) {
        warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var href = createHref(location);
            var key = location.key, state1 = location.state;
            if (canUseHistory) {
                globalHistory.pushState({
                    key: key,
                    state: state1
                }, null, href);
                if (forceRefresh) window.location.href = href;
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    var nextKeys = allKeys.slice(0, prevIndex + 1);
                    nextKeys.push(location.key);
                    allKeys = nextKeys;
                    setState({
                        action: action,
                        location: location
                    });
                }
            } else {
                warning(state1 === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
                window.location.href = href;
            }
        });
    }
    function replace(path, state) {
        warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var href = createHref(location);
            var key = location.key, state1 = location.state;
            if (canUseHistory) {
                globalHistory.replaceState({
                    key: key,
                    state: state1
                }, null, href);
                if (forceRefresh) window.location.replace(href);
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    if (prevIndex !== -1) allKeys[prevIndex] = location.key;
                    setState({
                        action: action,
                        location: location
                    });
                }
            } else {
                warning(state1 === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
                window.location.replace(href);
            }
        });
    }
    function go(n) {
        globalHistory.go(n);
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1 && delta === 1) {
            window.addEventListener(PopStateEvent1, handlePopState);
            if (needsHashChangeListener) window.addEventListener(HashChangeEvent1, handleHashChange);
        } else if (listenerCount === 0) {
            window.removeEventListener(PopStateEvent1, handlePopState);
            if (needsHashChangeListener) window.removeEventListener(HashChangeEvent1, handleHashChange);
        }
    }
    var isBlocked = false;
    function block(prompt) {
        if (prompt === void 0) prompt = false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function() {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    }
    function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function() {
            checkDOMListeners(-1);
            unlisten();
        };
    }
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
}
var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
    hashbang: {
        encodePath: function encodePath(path) {
            return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
        },
        decodePath: function decodePath(path) {
            return path.charAt(0) === '!' ? path.substr(1) : path;
        }
    },
    noslash: {
        encodePath: stripLeadingSlash,
        decodePath: addLeadingSlash
    },
    slash: {
        encodePath: addLeadingSlash,
        decodePath: addLeadingSlash
    }
};
function stripHash(url) {
    var hashIndex = url.indexOf('#');
    return hashIndex === -1 ? url : url.slice(0, hashIndex);
}
function getHashPath() {
    // We can't use window.location.hash here because it's not
    // consistent across browsers - Firefox will pre-decode it!
    var href = window.location.href;
    var hashIndex = href.indexOf('#');
    return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}
function pushHashPath(path) {
    window.location.hash = path;
}
function replaceHashPath(path) {
    window.location.replace(stripHash(window.location.href) + '#' + path);
}
function createHashHistory(props) {
    if (props === void 0) props = {
    };
    !canUseDOM && invariant(false, 'Hash history needs a DOM');
    var globalHistory = window.history;
    var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
    var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
    var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath = _HashPathCoders$hashT.encodePath, decodePath = _HashPathCoders$hashT.decodePath;
    function getDOMLocation() {
        var path = decodePath(getHashPath());
        warning(!basename || hasBasename(path, basename), "You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path \"" + path + '" to begin with "' + basename + '".');
        if (basename) path = stripBasename(path, basename);
        return createLocation(path);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
        _extends(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    var forceNextPop = false;
    var ignorePath = null;
    function locationsAreEqual$$1(a, b) {
        return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
    }
    function handleHashChange() {
        var path = getHashPath();
        var encodedPath = encodePath(path);
        if (path !== encodedPath) // Ensure we always have a properly-encoded hash.
        replaceHashPath(encodedPath);
        else {
            var location = getDOMLocation();
            var prevLocation = history.location;
            if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.
            if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.
            ignorePath = null;
            handlePop(location);
        }
    }
    function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        } else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
                if (ok) setState({
                    action: action,
                    location: location
                });
                else revertPop(location);
            });
        }
    }
    function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of paths we've seen in sessionStorage.
        // Instead, we just default to 0 for paths we don't know.
        var toIndex = allPaths.lastIndexOf(createPath(toLocation));
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    } // Ensure the hash is encoded properly before doing anything else.
    var path = getHashPath();
    var encodedPath = encodePath(path);
    if (path !== encodedPath) replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [
        createPath(initialLocation)
    ]; // Public interface
    function createHref(location) {
        var baseTag = document.querySelector('base');
        var href = '';
        if (baseTag && baseTag.getAttribute('href')) href = stripHash(window.location.href);
        return href + '#' + encodePath(basename + createPath(location));
    }
    function push(path1, state) {
        warning(state === undefined, 'Hash history cannot push state; it is ignored');
        var action = 'PUSH';
        var location = createLocation(path1, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var path2 = createPath(location);
            var encodedPath1 = encodePath(basename + path2);
            var hashChanged = getHashPath() !== encodedPath1;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a PUSH, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path2;
                pushHashPath(encodedPath1);
                var prevIndex = allPaths.lastIndexOf(createPath(history.location));
                var nextPaths = allPaths.slice(0, prevIndex + 1);
                nextPaths.push(path2);
                allPaths = nextPaths;
                setState({
                    action: action,
                    location: location
                });
            } else {
                warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
                setState();
            }
        });
    }
    function replace(path1, state) {
        warning(state === undefined, 'Hash history cannot replace state; it is ignored');
        var action = 'REPLACE';
        var location = createLocation(path1, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var path2 = createPath(location);
            var encodedPath1 = encodePath(basename + path2);
            var hashChanged = getHashPath() !== encodedPath1;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a REPLACE, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path2;
                replaceHashPath(encodedPath1);
            }
            var prevIndex = allPaths.indexOf(createPath(history.location));
            if (prevIndex !== -1) allPaths[prevIndex] = path2;
            setState({
                action: action,
                location: location
            });
        });
    }
    function go(n) {
        warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
        globalHistory.go(n);
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1 && delta === 1) window.addEventListener(HashChangeEvent$1, handleHashChange);
        else if (listenerCount === 0) window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
    var isBlocked = false;
    function block(prompt) {
        if (prompt === void 0) prompt = false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function() {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    }
    function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function() {
            checkDOMListeners(-1);
            unlisten();
        };
    }
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
}
function clamp(n, lowerBound, upperBound) {
    return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */ function createMemoryHistory(props) {
    if (props === void 0) props = {
    };
    var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? [
        '/'
    ] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var transitionManager = createTransitionManager();
    function setState(nextState) {
        _extends(history, nextState);
        history.length = history.entries.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    }
    var index = clamp(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function(entry) {
        return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
    }); // Public interface
    var createHref = createPath;
    function push(path, state) {
        warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var prevIndex = history.index;
            var nextIndex = prevIndex + 1;
            var nextEntries = history.entries.slice(0);
            if (nextEntries.length > nextIndex) nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
            else nextEntries.push(location);
            setState({
                action: action,
                location: location,
                index: nextIndex,
                entries: nextEntries
            });
        });
    }
    function replace(path, state) {
        warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            history.entries[history.index] = location;
            setState({
                action: action,
                location: location
            });
        });
    }
    function go(n) {
        var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
        var action = 'POP';
        var location = history.entries[nextIndex];
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (ok) setState({
                action: action,
                location: location,
                index: nextIndex
            });
            else // Mimic the behavior of DOM histories by
            // causing a render after a cancelled POP.
            setState();
        });
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    function canGo(n) {
        var nextIndex = history.index + n;
        return nextIndex >= 0 && nextIndex < history.entries.length;
    }
    function block(prompt) {
        if (prompt === void 0) prompt = false;
        return transitionManager.setPrompt(prompt);
    }
    function listen(listener) {
        return transitionManager.appendListener(listener);
    }
    var history = {
        length: entries.length,
        action: 'POP',
        location: entries[index],
        index: index,
        entries: entries,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        canGo: canGo,
        block: block,
        listen: listen
    };
    return history;
}
exports.createBrowserHistory = createBrowserHistory;
exports.createHashHistory = createHashHistory;
exports.createMemoryHistory = createMemoryHistory;
exports.createLocation = createLocation;
exports.locationsAreEqual = locationsAreEqual;
exports.parsePath = parsePath;
exports.createPath = createPath;

},{"resolve-pathname":"6t3oq","value-equal":"231GI","tiny-warning":"3B527","tiny-invariant":"4v3Kg"}],"6t3oq":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/resolve-pathname.js');

},{"./cjs/resolve-pathname.js":"PP9FI"}],"PP9FI":[function(require,module,exports) {
'use strict';
function isAbsolute(pathname) {
    return pathname.charAt(0) === '/';
}
// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
    for(var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)list[i] = list[k];
    list.pop();
}
// This implementation is based heavily on node's url.parse
function resolvePathname(to, from) {
    if (from === undefined) from = '';
    var toParts = to && to.split('/') || [];
    var fromParts = from && from.split('/') || [];
    var isToAbs = to && isAbsolute(to);
    var isFromAbs = from && isAbsolute(from);
    var mustEndAbs = isToAbs || isFromAbs;
    if (to && isAbsolute(to)) // to is absolute
    fromParts = toParts;
    else if (toParts.length) {
        // to is relative, drop the filename
        fromParts.pop();
        fromParts = fromParts.concat(toParts);
    }
    if (!fromParts.length) return '/';
    var hasTrailingSlash;
    if (fromParts.length) {
        var last = fromParts[fromParts.length - 1];
        hasTrailingSlash = last === '.' || last === '..' || last === '';
    } else hasTrailingSlash = false;
    var up = 0;
    for(var i = fromParts.length; i >= 0; i--){
        var part = fromParts[i];
        if (part === '.') spliceOne(fromParts, i);
        else if (part === '..') {
            spliceOne(fromParts, i);
            up++;
        } else if (up) {
            spliceOne(fromParts, i);
            up--;
        }
    }
    if (!mustEndAbs) for(; up--;)fromParts.unshift('..');
    if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
    var result = fromParts.join('/');
    if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
    return result;
}
module.exports = resolvePathname;

},{}],"231GI":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/value-equal.js');

},{"./cjs/value-equal.js":"6bQJP"}],"6bQJP":[function(require,module,exports) {
'use strict';
function valueOf(obj) {
    return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
}
function valueEqual(a, b) {
    // Test for strict equality first.
    if (a === b) return true;
    // Otherwise, if either of them == null they are not equal.
    if (a == null || b == null) return false;
    if (Array.isArray(a)) return Array.isArray(b) && a.length === b.length && a.every(function(item, index) {
        return valueEqual(item, b[index]);
    });
    if (typeof a === 'object' || typeof b === 'object') {
        var aValue = valueOf(a);
        var bValue = valueOf(b);
        if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
        return Object.keys(Object.assign({
        }, a, b)).every(function(key) {
            return valueEqual(a[key], b[key]);
        });
    }
    return false;
}
module.exports = valueEqual;

},{}],"4v3Kg":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
var isProduction = false;
var prefix = 'Invariant failed';
function invariant(condition, message) {
    if (condition) return;
    if (isProduction) throw new Error(prefix);
    throw new Error(prefix + ": " + (message || ''));
}
exports.default = invariant;

},{}],"g8cqP":[function(require,module,exports) {
var global = arguments[3];
'use strict';
var React = require('react'), _inheritsLoose = require('@babel/runtime/helpers/inheritsLoose'), PropTypes = require('prop-types'), warning = require('tiny-warning');
function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
        'default': e
    };
}
var React__default = /*#__PURE__*/ _interopDefaultLegacy(React);
var _inheritsLoose__default = /*#__PURE__*/ _interopDefaultLegacy(_inheritsLoose);
var PropTypes__default = /*#__PURE__*/ _interopDefaultLegacy(PropTypes);
var warning__default = /*#__PURE__*/ _interopDefaultLegacy(warning);
var MAX_SIGNED_31_BIT_INT = 1073741823;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {
};
function getUniqueId() {
    var key = '__global_unique_id__';
    return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
}
function objectIs(x, y) {
    if (x === y) return x !== 0 || 1 / x === 1 / y;
    else return x !== x && y !== y;
}
function createEventEmitter(value) {
    var handlers = [];
    return {
        on: function on(handler) {
            handlers.push(handler);
        },
        off: function off(handler) {
            handlers = handlers.filter(function(h) {
                return h !== handler;
            });
        },
        get: function get() {
            return value;
        },
        set: function set(newValue, changedBits) {
            value = newValue;
            handlers.forEach(function(handler) {
                return handler(value, changedBits);
            });
        }
    };
}
function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
}
function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;
    var contextProp = '__create-react-context-' + getUniqueId() + '__';
    var Provider1 = /*#__PURE__*/ function(_Component) {
        _inheritsLoose__default['default'](Provider2, _Component);
        function Provider2() {
            var _this;
            _this = _Component.apply(this, arguments) || this;
            _this.emitter = createEventEmitter(_this.props.value);
            return _this;
        }
        var _proto = Provider2.prototype;
        _proto.getChildContext = function getChildContext() {
            var _ref;
            return _ref = {
            }, _ref[contextProp] = this.emitter, _ref;
        };
        _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            if (this.props.value !== nextProps.value) {
                var oldValue = this.props.value;
                var newValue = nextProps.value;
                var changedBits;
                if (objectIs(oldValue, newValue)) changedBits = 0;
                else {
                    changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                    warning__default['default']((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: " + changedBits);
                    changedBits |= 0;
                    if (changedBits !== 0) this.emitter.set(nextProps.value, changedBits);
                }
            }
        };
        _proto.render = function render() {
            return this.props.children;
        };
        return Provider2;
    }(React.Component);
    Provider1.childContextTypes = (_Provider$childContex = {
    }, _Provider$childContex[contextProp] = PropTypes__default['default'].object.isRequired, _Provider$childContex);
    var Consumer1 = /*#__PURE__*/ function(_Component2) {
        _inheritsLoose__default['default'](Consumer2, _Component2);
        function Consumer2() {
            var _this2;
            _this2 = _Component2.apply(this, arguments) || this;
            _this2.state = {
                value: _this2.getValue()
            };
            _this2.onUpdate = function(newValue, changedBits) {
                var observedBits = _this2.observedBits | 0;
                if ((observedBits & changedBits) !== 0) _this2.setState({
                    value: _this2.getValue()
                });
            };
            return _this2;
        }
        var _proto2 = Consumer2.prototype;
        _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            var observedBits = nextProps.observedBits;
            this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };
        _proto2.componentDidMount = function componentDidMount() {
            if (this.context[contextProp]) this.context[contextProp].on(this.onUpdate);
            var observedBits = this.props.observedBits;
            this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };
        _proto2.componentWillUnmount = function componentWillUnmount() {
            if (this.context[contextProp]) this.context[contextProp].off(this.onUpdate);
        };
        _proto2.getValue = function getValue() {
            if (this.context[contextProp]) return this.context[contextProp].get();
            else return defaultValue;
        };
        _proto2.render = function render() {
            return onlyChild(this.props.children)(this.state.value);
        };
        return Consumer2;
    }(React.Component);
    Consumer1.contextTypes = (_Consumer$contextType = {
    }, _Consumer$contextType[contextProp] = PropTypes__default['default'].object, _Consumer$contextType);
    return {
        Provider: Provider1,
        Consumer: Consumer1
    };
}
var index = React__default['default'].createContext || createReactContext;
module.exports = index;

},{"react":"3b2NM","@babel/runtime/helpers/inheritsLoose":"01QUt","prop-types":"4dfy5","tiny-warning":"3B527"}],"01QUt":[function(require,module,exports) {
var setPrototypeOf = require("./setPrototypeOf.js");
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
}
module.exports = _inheritsLoose;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{"./setPrototypeOf.js":"37Yld"}],"37Yld":[function(require,module,exports) {
function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    return _setPrototypeOf(o, p);
}
module.exports = _setPrototypeOf;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"2JudW":[function(require,module,exports) {
var isarray = require('isarray');
/**
 * Expose `pathToRegexp`.
 */ module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */ var PATH_REGEXP = new RegExp([
    // Match escaped characters that would otherwise appear in future matches.
    // This allows the user to escape special characters that won't transform.
    '(\\\\.)',
    // Match Express-style parameters and un-named parameters with a prefix
    // and optional suffixes. Matches appear as:
    //
    // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
    // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
    // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
    '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */ function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;
    while((res = PATH_REGEXP.exec(str)) != null){
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;
        // Ignore already escaped sequences.
        if (escaped) {
            path += escaped[1];
            continue;
        }
        var next = str[index];
        var prefix = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var modifier = res[6];
        var asterisk = res[7];
        // Push the current path onto the tokens.
        if (path) {
            tokens.push(path);
            path = '';
        }
        var partial = prefix != null && next != null && next !== prefix;
        var repeat = modifier === '+' || modifier === '*';
        var optional = modifier === '?' || modifier === '*';
        var delimiter = res[2] || defaultDelimiter;
        var pattern = capture || group;
        tokens.push({
            name: name || key++,
            prefix: prefix || '',
            delimiter: delimiter,
            optional: optional,
            repeat: repeat,
            partial: partial,
            asterisk: !!asterisk,
            pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
        });
    }
    // Match any characters still remaining.
    if (index < str.length) path += str.substr(index);
    // If the path exists, push it onto the end.
    if (path) tokens.push(path);
    return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */ function compile(str, options) {
    return tokensToFunction(parse(str, options), options);
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */ function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */ function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
/**
 * Expose a method for transforming tokens into the path function.
 */ function tokensToFunction(tokens, options) {
    // Compile all the tokens into regexps.
    var matches = new Array(tokens.length);
    // Compile all the patterns before compilation.
    for(var i = 0; i < tokens.length; i++)if (typeof tokens[i] === 'object') matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
    return function(obj, opts) {
        var path = '';
        var data = obj || {
        };
        var options1 = opts || {
        };
        var encode = options1.pretty ? encodeURIComponentPretty : encodeURIComponent;
        for(var i1 = 0; i1 < tokens.length; i1++){
            var token = tokens[i1];
            if (typeof token === 'string') {
                path += token;
                continue;
            }
            var value = data[token.name];
            var segment;
            if (value == null) {
                if (token.optional) {
                    // Prepend partial segment prefixes.
                    if (token.partial) path += token.prefix;
                    continue;
                } else throw new TypeError('Expected "' + token.name + '" to be defined');
            }
            if (isarray(value)) {
                if (!token.repeat) throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
                if (value.length === 0) {
                    if (token.optional) continue;
                    else throw new TypeError('Expected "' + token.name + '" to not be empty');
                }
                for(var j = 0; j < value.length; j++){
                    segment = encode(value[j]);
                    if (!matches[i1].test(segment)) throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
                    path += (j === 0 ? token.prefix : token.delimiter) + segment;
                }
                continue;
            }
            segment = token.asterisk ? encodeAsterisk(value) : encode(value);
            if (!matches[i1].test(segment)) throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
            path += token.prefix + segment;
        }
        return path;
    };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */ function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */ function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */ function attachKeys(re, keys) {
    re.keys = keys;
    return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */ function flags(options) {
    return options && options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */ function regexpToRegexp(path, keys) {
    // Use a negative lookahead to match only capturing groups.
    var groups = path.source.match(/\((?!\?)/g);
    if (groups) for(var i = 0; i < groups.length; i++)keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
    });
    return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */ function arrayToRegexp(path, keys, options) {
    var parts = [];
    for(var i = 0; i < path.length; i++)parts.push(pathToRegexp(path[i], keys, options).source);
    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */ function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */ function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
        options = keys || options;
        keys = [];
    }
    options = options || {
    };
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';
    // Iterate over the tokens and create our regexp string.
    for(var i = 0; i < tokens.length; i++){
        var token = tokens[i];
        if (typeof token === 'string') route += escapeString(token);
        else {
            var prefix = escapeString(token.prefix);
            var capture = '(?:' + token.pattern + ')';
            keys.push(token);
            if (token.repeat) capture += '(?:' + prefix + capture + ')*';
            if (token.optional) {
                if (!token.partial) capture = '(?:' + prefix + '(' + capture + '))?';
                else capture = prefix + '(' + capture + ')?';
            } else capture = prefix + '(' + capture + ')';
            route += capture;
        }
    }
    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
    // In non-strict mode we allow a slash at the end of match. If the path to
    // match already ends with a slash, we remove it for consistency. The slash
    // is valid at the end of a path match, not in the middle. This is important
    // in non-ending mode, where "/test/" shouldn't match "/test//route".
    if (!strict) route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    if (end) route += '$';
    else // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */ function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
        options = keys || options;
        keys = [];
    }
    options = options || {
    };
    if (path instanceof RegExp) return regexpToRegexp(path, keys);
    if (isarray(path)) return arrayToRegexp(path, keys, options);
    return stringToRegexp(path, keys, options);
}

},{"isarray":"1Mr3a"}],"1Mr3a":[function(require,module,exports) {
module.exports = Array.isArray || function(arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],"iUPaQ":[function(require,module,exports) {
var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactRouterDom = require("react-router-dom");
const ProtectedRouter = ({ component , ...rest })=>{
    let RenderComponents = component;
    let hasToken = JSON.parse(localStorage.getItem('auth'));
    return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
        ...rest,
        render: (props)=>{
            return hasToken !== null ? /*#__PURE__*/ _reactDefault.default.createElement(RenderComponents, props) : /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Redirect, {
                to: {
                    pathname: '/login'
                }
            });
        },
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\protected.jsx",
            lineNumber: 10
        },
        __self: undefined
    }));
};
_c = ProtectedRouter;
exports.default = ProtectedRouter;
var _c;
$RefreshReg$(_c, "ProtectedRouter");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","react-router-dom":"1PMSK","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"4miEf":[function(require,module,exports) {
var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _navbar = require("./Navbar");
var _navbarDefault = parcelHelpers.interopDefault(_navbar);
class CreateTemplate extends _react.Component {
    constructor(props){
        super();
        this.state = {
            templatename: "",
            selectedFile: null
        };
        this.onFileChange = this.onFileChange.bind(this);
        this.onFileUpload = this.onFileUpload.bind(this);
        this.onChangeTemplatename = this.onChangeTemplatename.bind(this);
    }
    onChangeTemplatename(e) {
        this.setState({
            templatename: e.target.value
        });
    }
    onFileChange = (event)=>{
        // Update the state
        this.setState({
            selectedFile: event.target.files[0]
        });
    };
    // On file upload (click the upload button)
    onFileUpload = ()=>{
        const formdata = new FormData();
        formdata.append("file", this.state.selectedFile);
        formdata.append("templatename", this.state.templatename);
        console.log(this.state.selectedFile);
        _axiosDefault.default.post("http://localhost:5000/api/template", formdata).then((res)=>console.log(res)
        );
        window.location = "/";
    };
    render() {
        return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 47
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_navbarDefault.default, {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 48
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement("div", {
            className: "container",
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 49
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("br", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 50
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement("br", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 51
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement("h3", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 52
            },
            __self: this
        }, "Create New Template"), /*#__PURE__*/ _reactDefault.default.createElement("div", {
            className: "form-group",
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 53
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("label", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 54
            },
            __self: this
        }, "Template name: "), /*#__PURE__*/ _reactDefault.default.createElement("input", {
            type: "text",
            required: true,
            className: "form-control",
            value: this.state.templatename,
            onChange: this.onChangeTemplatename,
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 55
            },
            __self: this
        })), /*#__PURE__*/ _reactDefault.default.createElement("br", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 62
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement("div", {
            className: "form-group",
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 65
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("input", {
            type: "file",
            onChange: this.onFileChange,
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 66
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement("br", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 67
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement("br", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 68
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement("button", {
            onClick: this.onFileUpload,
            className: "btn btn-info",
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\CreateTemplate.jsx",
                lineNumber: 69
            },
            __self: this
        }, "Submit")))));
    }
}
exports.default = CreateTemplate;

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","axios":"7rA65","./Navbar":"57UFM","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"2xfOi":[function() {},{}],"MUF1i":[function(require,module,exports) {
var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _button = require("react-bootstrap/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _table = require("react-bootstrap/Table");
var _tableDefault = parcelHelpers.interopDefault(_table);
class DownloadPage extends _react.Component {
    constructor(props){
        super(props);
        this.getAll = this.getAll.bind(this);
        this.state = {
            templates: []
        };
    }
    async componentDidMount() {
        _axiosDefault.default.get("http://localhost:5000/api/").then((res)=>{
            this.setState({
                templates: res.data
            });
            console.log(res.data);
        });
    }
    getAll() {
        return this.state.templates.map((file)=>{
            return(/*#__PURE__*/ _reactDefault.default.createElement("tr", {
                key: file._id,
                __source: {
                    fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                    lineNumber: 27
                },
                __self: this
            }, /*#__PURE__*/ _reactDefault.default.createElement("td", {
                __source: {
                    fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                    lineNumber: 28
                },
                __self: this
            }, file.templatename), /*#__PURE__*/ _reactDefault.default.createElement("td", {
                __source: {
                    fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                    lineNumber: 29
                },
                __self: this
            }, /*#__PURE__*/ _reactDefault.default.createElement("a", {
                href: "http://localhost:5000/" + file.filePath,
                target: "_blank",
                __source: {
                    fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                    lineNumber: 29
                },
                __self: this
            }, file.fileName))));
        });
    }
    render() {
        return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 37
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("h4", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 38
            },
            __self: this
        }, "Download Templates"), /*#__PURE__*/ _reactDefault.default.createElement("br", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 39
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement("container", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 40
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_tableDefault.default, {
            striped: true,
            bordered: true,
            hover: true,
            variant: "light",
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 41
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("thead", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 43
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("tr", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 44
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("th", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 45
            },
            __self: this
        }, "Template Name"), /*#__PURE__*/ _reactDefault.default.createElement("th", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 46
            },
            __self: this
        }, "Templates"))), /*#__PURE__*/ _reactDefault.default.createElement("tbody", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\DownloadPage.jsx",
                lineNumber: 50
            },
            __self: this
        }, this.getAll())))));
    }
}
exports.default = DownloadPage;

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","react-bootstrap/Button":"1ru0l","axios":"7rA65","react-bootstrap/Table":"34yor","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"1ru0l":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireDefault(require("react"));
var _ThemeProvider = require("./ThemeProvider");
var _SafeAnchor = _interopRequireDefault(require("./SafeAnchor"));
var defaultProps = {
    variant: 'primary',
    active: false,
    disabled: false
};
var Button = /*#__PURE__*/ _react.default.forwardRef(function(_ref, ref) {
    var bsPrefix = _ref.bsPrefix, variant = _ref.variant, size = _ref.size, active = _ref.active, className = _ref.className, block = _ref.block, type = _ref.type, as = _ref.as, props = _objectWithoutPropertiesLoose2.default(_ref, [
        "bsPrefix",
        "variant",
        "size",
        "active",
        "className",
        "block",
        "type",
        "as"
    ]);
    var prefix = _ThemeProvider.useBootstrapPrefix(bsPrefix, 'btn');
    var classes = _classnames.default(className, prefix, active && 'active', variant && prefix + "-" + variant, block && prefix + "-block", size && prefix + "-" + size);
    if (props.href) return(/*#__PURE__*/ _react.default.createElement(_SafeAnchor.default, _extends2.default({
    }, props, {
        as: as,
        ref: ref,
        className: _classnames.default(classes, props.disabled && 'disabled')
    })));
    if (ref) props.ref = ref;
    if (type) props.type = type;
    else if (!as) props.type = 'button';
    var Component = as || 'button';
    return(/*#__PURE__*/ _react.default.createElement(Component, _extends2.default({
    }, props, {
        className: classes
    })));
});
Button.displayName = 'Button';
Button.defaultProps = defaultProps;
var _default = Button;
exports.default = _default;
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/extends":"3krLJ","@babel/runtime/helpers/objectWithoutPropertiesLoose":"3Yx9V","classnames":"5aJRc","react":"3b2NM","./ThemeProvider":"4rz1S","./SafeAnchor":"5VP5o"}],"4ttVj":[function(require,module,exports) {
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
module.exports = _interopRequireDefault;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"3krLJ":[function(require,module,exports) {
function _extends() {
    module.exports = _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    return _extends.apply(this, arguments);
}
module.exports = _extends;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"3Yx9V":[function(require,module,exports) {
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
module.exports = _objectWithoutPropertiesLoose;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"5aJRc":[function(require,module,exports) {
(function() {
    var hasOwn = {
    }.hasOwnProperty;
    function classNames() {
        var classes = [];
        for(var i = 0; i < arguments.length; i++){
            var arg = arguments[i];
            if (!arg) continue;
            var argType = typeof arg;
            if (argType === 'string' || argType === 'number') classes.push(arg);
            else if (Array.isArray(arg)) {
                if (arg.length) {
                    var inner = classNames.apply(null, arg);
                    if (inner) classes.push(inner);
                }
            } else if (argType === 'object') {
                if (arg.toString === Object.prototype.toString) {
                    for(var key in arg)if (hasOwn.call(arg, key) && arg[key]) classes.push(key);
                } else classes.push(arg.toString());
            }
        }
        return classes.join(' ');
    }
    if (typeof module !== 'undefined' && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
    } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) // register as 'classnames', consistent with npm package name
    define('classnames', [], function() {
        return classNames;
    });
    else window.classNames = classNames;
})();

},{}],"4rz1S":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.useBootstrapPrefix = useBootstrapPrefix;
exports.createBootstrapComponent = createBootstrapComponent;
exports.default = exports.ThemeConsumer = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache1(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var ThemeContext = /*#__PURE__*/ _react.default.createContext({
});
var Consumer = ThemeContext.Consumer, Provider = ThemeContext.Provider;
exports.ThemeConsumer = Consumer;
function ThemeProvider(_ref) {
    var prefixes = _ref.prefixes, children = _ref.children;
    var copiedPrefixes = _react.useMemo(function() {
        return _extends2.default({
        }, prefixes);
    }, [
        prefixes
    ]);
    return(/*#__PURE__*/ _react.default.createElement(Provider, {
        value: copiedPrefixes
    }, children));
}
function useBootstrapPrefix(prefix, defaultPrefix) {
    var prefixes = _react.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || defaultPrefix;
}
function createBootstrapComponent(Component, opts) {
    if (typeof opts === 'string') opts = {
        prefix: opts
    };
    var isClassy = Component.prototype && Component.prototype.isReactComponent; // If it's a functional component make sure we don't break it with a ref
    var _opts = opts, prefix = _opts.prefix, _opts$forwardRefAs = _opts.forwardRefAs, forwardRefAs = _opts$forwardRefAs === void 0 ? isClassy ? 'ref' : 'innerRef' : _opts$forwardRefAs;
    var Wrapped = /*#__PURE__*/ _react.default.forwardRef(function(_ref2, ref) {
        var props = _extends2.default({
        }, _ref2);
        props[forwardRefAs] = ref;
        var bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);
        return(/*#__PURE__*/ _react.default.createElement(Component, _extends2.default({
        }, props, {
            bsPrefix: bsPrefix
        })));
    });
    Wrapped.displayName = "Bootstrap(" + (Component.displayName || Component.name) + ")";
    return Wrapped;
}
var _default = ThemeProvider;
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/extends":"3krLJ","react":"3b2NM"}],"5VP5o":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _react = _interopRequireDefault(require("react"));
var _createChainedFunction = _interopRequireDefault(require("./createChainedFunction"));
function isTrivialHref(href) {
    return !href || href.trim() === '#';
}
/**
 * There are situations due to browser quirks or Bootstrap CSS where
 * an anchor tag is needed, when semantically a button tag is the
 * better choice. SafeAnchor ensures that when an anchor is used like a
 * button its accessible. It also emulates input `disabled` behavior for
 * links, which is usually desirable for Buttons, NavItems, DropdownItems, etc.
 */ var SafeAnchor = /*#__PURE__*/ _react.default.forwardRef(function(_ref, ref) {
    var _ref$as = _ref.as, Component = _ref$as === void 0 ? 'a' : _ref$as, disabled = _ref.disabled, onKeyDown = _ref.onKeyDown, props = _objectWithoutPropertiesLoose2.default(_ref, [
        "as",
        "disabled",
        "onKeyDown"
    ]);
    var handleClick = function handleClick1(event) {
        var href = props.href, onClick = props.onClick;
        if (disabled || isTrivialHref(href)) event.preventDefault();
        if (disabled) {
            event.stopPropagation();
            return;
        }
        if (onClick) onClick(event);
    };
    var handleKeyDown = function handleKeyDown1(event) {
        if (event.key === ' ') {
            event.preventDefault();
            handleClick(event);
        }
    };
    if (isTrivialHref(props.href)) {
        props.role = props.role || 'button'; // we want to make sure there is a href attribute on the node
        // otherwise, the cursor incorrectly styled (except with role='button')
        props.href = props.href || '#';
    }
    if (disabled) {
        props.tabIndex = -1;
        props['aria-disabled'] = true;
    }
    return(/*#__PURE__*/ _react.default.createElement(Component, _extends2.default({
        ref: ref
    }, props, {
        onClick: handleClick,
        onKeyDown: _createChainedFunction.default(handleKeyDown, onKeyDown)
    })));
});
SafeAnchor.displayName = 'SafeAnchor';
var _default = SafeAnchor;
exports.default = _default;
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/extends":"3krLJ","@babel/runtime/helpers/objectWithoutPropertiesLoose":"3Yx9V","react":"3b2NM","./createChainedFunction":"4RHiz"}],"4RHiz":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = void 0;
/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */ function createChainedFunction() {
    for(var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++)funcs[_key] = arguments[_key];
    return funcs.filter(function(f) {
        return f != null;
    }).reduce(function(acc, f) {
        if (typeof f !== 'function') throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
        if (acc === null) return f;
        return function chainedFunction() {
            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
            // @ts-ignore
            acc.apply(this, args); // @ts-ignore
            f.apply(this, args);
        };
    }, null);
}
var _default = createChainedFunction;
exports.default = _default;
module.exports = exports["default"];

},{}],"34yor":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireDefault(require("react"));
var _ThemeProvider = require("./ThemeProvider");
var Table = /*#__PURE__*/ _react.default.forwardRef(function(_ref, ref) {
    var bsPrefix = _ref.bsPrefix, className = _ref.className, striped = _ref.striped, bordered = _ref.bordered, borderless = _ref.borderless, hover = _ref.hover, size = _ref.size, variant = _ref.variant, responsive = _ref.responsive, props = _objectWithoutPropertiesLoose2.default(_ref, [
        "bsPrefix",
        "className",
        "striped",
        "bordered",
        "borderless",
        "hover",
        "size",
        "variant",
        "responsive"
    ]);
    var decoratedBsPrefix = _ThemeProvider.useBootstrapPrefix(bsPrefix, 'table');
    var classes = _classnames.default(className, decoratedBsPrefix, variant && decoratedBsPrefix + "-" + variant, size && decoratedBsPrefix + "-" + size, striped && decoratedBsPrefix + "-striped", bordered && decoratedBsPrefix + "-bordered", borderless && decoratedBsPrefix + "-borderless", hover && decoratedBsPrefix + "-hover");
    var table = /*#__PURE__*/ _react.default.createElement("table", _extends2.default({
    }, props, {
        className: classes,
        ref: ref
    }));
    if (responsive) {
        var responsiveClass = decoratedBsPrefix + "-responsive";
        if (typeof responsive === 'string') responsiveClass = responsiveClass + "-" + responsive;
        return(/*#__PURE__*/ _react.default.createElement("div", {
            className: responsiveClass
        }, table));
    }
    return table;
});
var _default = Table;
exports.default = _default;
module.exports = exports["default"];

},{"@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/extends":"3krLJ","@babel/runtime/helpers/objectWithoutPropertiesLoose":"3Yx9V","classnames":"5aJRc","react":"3b2NM","./ThemeProvider":"4rz1S"}],"2AMVw":[function(require,module,exports) {
var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _button = require("react-bootstrap/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _table = require("react-bootstrap/Table");
var _tableDefault = parcelHelpers.interopDefault(_table);
var _templateModel = require("../../../backend/models/template.model");
var _templateModelDefault = parcelHelpers.interopDefault(_templateModel);
const Template = (props)=>/*#__PURE__*/ _reactDefault.default.createElement("tr", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
            lineNumber: 9
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("td", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
            lineNumber: 10
        },
        __self: undefined
    }, props.file.templatename), /*#__PURE__*/ _reactDefault.default.createElement("td", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
            lineNumber: 11
        },
        __self: undefined
    }, props.file.fileName), /*#__PURE__*/ _reactDefault.default.createElement("td", {
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
            lineNumber: 12
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement("button", {
        className: "btn btn-secondary",
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
            lineNumber: 13
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(Link, {
        to: "/edit/" + props.file._id,
        style: {
            color: "white"
        },
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
            lineNumber: 13
        },
        __self: undefined
    }, "Edit")), " | ", /*#__PURE__*/ _reactDefault.default.createElement("button", {
        className: "btn btn-danger",
        onClick: ()=>{
            props.deleteExercise(props.file._id);
        },
        __source: {
            fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
            lineNumber: 13
        },
        __self: undefined
    }, "Delete")))
;
_c = _templateModelDefault.default;
class ViewTemplate extends _react.Component {
    constructor(props){
        super(props);
        this.getAll = this.getAll.bind(this);
        this.state = {
            templates: []
        };
        this.deleteExercise = this.deleteExercise.bind(this);
    }
    componentDidMount() {
        _axiosDefault.default.get("http://localhost:5000/api/").then((res)=>{
            this.setState({
                templates: res.data
            });
            console.log(res.data);
        });
    }
    deleteExercise(id) {
        _axiosDefault.default.delete('http://localhost:5000/api/' + id).then((res)=>console.log(res.data)
        );
        this.setState({
            templates: this.state.templates.filter((el)=>el._id !== id
            )
        });
    }
    getAll() {
        return this.state.templates.map((file)=>{
            return(/*#__PURE__*/ _reactDefault.default.createElement("tr", {
                key: file._id,
                __source: {
                    fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                    lineNumber: 48
                },
                __self: this
            }, /*#__PURE__*/ _reactDefault.default.createElement("td", {
                __source: {
                    fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                    lineNumber: 49
                },
                __self: this
            }, file.templatename), /*#__PURE__*/ _reactDefault.default.createElement("td", {
                __source: {
                    fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                    lineNumber: 50
                },
                __self: this
            }, /*#__PURE__*/ _reactDefault.default.createElement("a", {
                href: "http://localhost:5000/" + file.filePath,
                target: "_blank",
                __source: {
                    fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                    lineNumber: 50
                },
                __self: this
            }, file.fileName))));
        });
    }
    templateList() {
        return this.state.templates.map((currenttemplate)=>{
            return(/*#__PURE__*/ _reactDefault.default.createElement(_templateModelDefault.default, {
                template: currenttemplate,
                deleteTemplate: this.deleteTemplate,
                key: currenttemplate._id,
                __source: {
                    fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                    lineNumber: 59
                },
                __self: this
            }));
        });
    }
    render() {
        return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 65
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("h4", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 66
            },
            __self: this
        }, "Templates"), /*#__PURE__*/ _reactDefault.default.createElement("br", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 67
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement("container", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 68
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_tableDefault.default, {
            striped: true,
            bordered: true,
            hover: true,
            variant: "dark",
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 69
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("thead", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 71
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("tr", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 72
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement("th", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 73
            },
            __self: this
        }, "Template Name"), /*#__PURE__*/ _reactDefault.default.createElement("th", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 74
            },
            __self: this
        }, "Templates"))), /*#__PURE__*/ _reactDefault.default.createElement("tbody", {
            __source: {
                fileName: "C:\\Users\\DELL\\Desktop\\CMS-AF-master\\CMS-AF-master\\frontend\\Components\\Shanghavi\\ViewTemplate.jsx",
                lineNumber: 78
            },
            __self: this
        }, this.getAll())))));
    }
}
exports.default = ViewTemplate;
var _c;
$RefreshReg$(_c, "Template");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3b2NM","react-bootstrap/Button":"1ru0l","axios":"7rA65","react-bootstrap/Table":"34yor","../../../backend/models/template.model":"7d1Gr","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"7d1Gr":[function(require,module,exports) {
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const templateSchema = new Schema({
    templatename: {
        type: String,
        required: true
    },
    fileName: {
        type: String,
        required: true
    },
    filePath: {
        type: String,
        required: true
    },
    fileType: {
        type: String,
        required: true
    },
    fileSize: {
        type: String,
        required: true
    }
}, {
    timestamps: true
});
const Template = mongoose.model('Template', templateSchema);
module.exports = Template;

},{"mongoose":"4YGLI"}],"4YGLI":[function(require,module,exports) {
(function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.mongoose = e() : t.mongoose = e();
})("undefined" != typeof self ? self : this, function() {
    return (function(t) {
        var e = {
        };
        function r(n) {
            if (e[n]) return e[n].exports;
            var o = e[n] = {
                i: n,
                l: false,
                exports: {
                }
            };
            return t[n].call(o.exports, o, o.exports, r), o.l = true, o.exports;
        }
        return r.m = t, r.c = e, r.d = function(t1, e1, n) {
            r.o(t1, e1) || Object.defineProperty(t1, e1, {
                enumerable: true,
                get: n
            });
        }, r.r = function(t1) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t1, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(t1, "__esModule", {
                value: true
            });
        }, r.t = function(t1, e1) {
            if (1 & e1 && (t1 = r(t1)), 8 & e1) return t1;
            if (4 & e1 && "object" == typeof t1 && t1 && t1.__esModule) return t1;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: true,
                value: t1
            }), 2 & e1 && "string" != typeof t1) for(var o in t1)r.d(n, o, (function(e2) {
                return t1[e2];
            }).bind(null, o));
            return n;
        }, r.n = function(t1) {
            var e1 = t1 && t1.__esModule ? function() {
                return t1.default;
            } : function() {
                return t1;
            };
            return r.d(e1, "a", e1), e1;
        }, r.o = function(t1, e1) {
            return Object.prototype.hasOwnProperty.call(t1, e1);
        }, r.p = "", r(r.s = 95);
    })([
        function(t, e, r) {
            "use strict";
            e.arrayAtomicsSymbol = Symbol("mongoose#Array#_atomics"), e.arrayParentSymbol = Symbol("mongoose#Array#_parent"), e.arrayPathSymbol = Symbol("mongoose#Array#_path"), e.arraySchemaSymbol = Symbol("mongoose#Array#_schema"), e.documentArrayParent = Symbol("mongoose:documentArrayParent"), e.documentIsSelected = Symbol("mongoose#Document#isSelected"), e.documentIsModified = Symbol("mongoose#Document#isModified"), e.documentModifiedPaths = Symbol("mongoose#Document#modifiedPaths"), e.documentSchemaSymbol = Symbol("mongoose#Document#schema"), e.getSymbol = Symbol("mongoose#Document#get"), e.modelSymbol = Symbol("mongoose#Model"), e.objectIdSymbol = Symbol("mongoose#ObjectId"), e.populateModelSymbol = Symbol("mongoose.PopulateOptions#Model"), e.schemaTypeSymbol = Symbol("mongoose#schemaType"), e.sessionNewDocuments = Symbol("mongoose:ClientSession#newDocuments"), e.scopeSymbol = Symbol("mongoose#Document#scope"), e.validatorErrorSymbol = Symbol("mongoose:validatorError");
        },
        function(t, e, r) {
            "use strict";
            (function(t1) {
                /*!
 * Module dependencies.
 */ function n(t2, e1) {
                    var r1 = "undefined" != typeof Symbol && t2[Symbol.iterator] || t2["@@iterator"];
                    if (!r1) {
                        if (Array.isArray(t2) || (r1 = (function(t3, e2) {
                            if (!t3) return;
                            if ("string" == typeof t3) return o(t3, e2);
                            var r2 = Object.prototype.toString.call(t3).slice(8, -1);
                            "Object" === r2 && t3.constructor && (r2 = t3.constructor.name);
                            if ("Map" === r2 || "Set" === r2) return Array.from(t3);
                            if ("Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2)) return o(t3, e2);
                        })(t2)) || e1 && t2 && "number" == typeof t2.length) {
                            r1 && (t2 = r1);
                            var n1 = 0, i = function() {
                            };
                            return {
                                s: i,
                                n: function() {
                                    return n1 >= t2.length ? {
                                        done: true
                                    } : {
                                        done: false,
                                        value: t2[n1++]
                                    };
                                },
                                e: function(t3) {
                                    throw t3;
                                },
                                f: i
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var s, a = true, u = false;
                    return {
                        s: function() {
                            r1 = r1.call(t2);
                        },
                        n: function() {
                            var t3 = r1.next();
                            return a = t3.done, t3;
                        },
                        e: function(t3) {
                            u = true, s = t3;
                        },
                        f: function() {
                            try {
                                a || null == r1.return || r1.return();
                            } finally{
                                if (u) throw s;
                            }
                        }
                    };
                }
                function o(t2, e1) {
                    (null == e1 || e1 > t2.length) && (e1 = t2.length);
                    for(var r1 = 0, n2 = new Array(e1); r1 < e1; r1++)n2[r1] = t2[r1];
                    return n2;
                }
                function i(t2) {
                    return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
                        return typeof t3;
                    } : function(t3) {
                        return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
                    })(t2);
                }
                var s, a = r(113), u = r(48), c = r(62), l = r(63).Buffer, f = r(20), p2 = r(8), h = r(116), y = r(28), d = r(21), _ = r(66), v = r(65), m = r(29), g = r(24), b = r(71), w = r(49);
                function O(t2) {
                    if (Array.isArray(t2.populate)) {
                        var r1 = [];
                        t2.populate.forEach(function(t3) {
                            if (/[\s]/.test(t3.path)) {
                                var n2 = Object.assign({
                                }, t3);
                                n2.path.split(" ").forEach(function(t4) {
                                    n2.path = t4, r1.push(e.populate(n2)[0]);
                                });
                            } else r1.push(e.populate(t3)[0]);
                        }), t2.populate = e.populate(r1);
                    } else null != t2.populate && "object" === i(t2.populate) && (t2.populate = e.populate(t2.populate));
                    var o1 = [], s1 = t2.path.split(" ");
                    null != t2.options && (t2.options = e.clone(t2.options));
                    var a1, u1 = n(s1);
                    try {
                        for(u1.s(); !(a1 = u1.n()).done;){
                            var c1 = a1.value;
                            o1.push(new h(Object.assign({
                            }, t2, {
                                path: c1
                            })));
                        }
                    } catch (t3) {
                        u1.e(t3);
                    } finally{
                        u1.f();
                    }
                    return o1;
                }
                /*!
 * Return the value of `obj` at the given `path`.
 *
 * @param {String} path
 * @param {Object} obj
 */ e.specialProperties = w, /*!
 * Produces a collection name from model `name`. By default, just returns
 * the model name
 *
 * @param {String} name a model name
 * @param {Function} pluralize function that pluralizes the collection name
 * @return {String} a collection name
 * @api private
 */ e.toCollectionName = function(t2, e1) {
                    return "system.profile" === t2 || "system.indexes" === t2 ? t2 : "function" == typeof e1 ? e1(t2) : t2;
                }, /*!
 * Determines if `a` and `b` are deep equal.
 *
 * Modified from node/lib/assert.js
 *
 * @param {any} a a value to compare to `b`
 * @param {any} b a value to compare to `a`
 * @return {Boolean}
 * @api private
 */ e.deepEqual = function t2(r2, n3) {
                    if (r2 === n3) return true;
                    if ("object" !== i(r2) && "object" !== i(n3)) return r2 === n3;
                    if (r2 instanceof Date && n3 instanceof Date) return r2.getTime() === n3.getTime();
                    if (_(r2, "ObjectID") && _(n3, "ObjectID") || _(r2, "Decimal128") && _(n3, "Decimal128")) return r2.toString() === n3.toString();
                    if (r2 instanceof RegExp && n3 instanceof RegExp) return r2.source === n3.source && r2.ignoreCase === n3.ignoreCase && r2.multiline === n3.multiline && r2.global === n3.global;
                    if (null == r2 || null == n3) return false;
                    if (r2.prototype !== n3.prototype) return false;
                    if (r2 instanceof Map && n3 instanceof Map) return t2(Array.from(r2.keys()), Array.from(n3.keys())) && t2(Array.from(r2.values()), Array.from(n3.values()));
                    if (r2 instanceof Number && n3 instanceof Number) return r2.valueOf() === n3.valueOf();
                    if (l.isBuffer(r2)) return e.buffer.areEqual(r2, n3);
                    if (Array.isArray(r2) && Array.isArray(n3)) {
                        var o1 = r2.length;
                        if (o1 !== n3.length) return false;
                        for(var s1 = 0; s1 < o1; ++s1)if (!t2(r2[s1], n3[s1])) return false;
                        return true;
                    }
                    null != r2.$__ ? r2 = r2._doc : m(r2) && (r2 = r2.toObject()), null != n3.$__ ? n3 = n3._doc : m(n3) && (n3 = n3.toObject());
                    var a1 = Object.keys(r2), u1 = Object.keys(n3), c2 = a1.length;
                    if (c2 !== u1.length) return false;
                    a1.sort(), u1.sort();
                    for(var f1 = c2 - 1; f1 >= 0; f1--)if (a1[f1] !== u1[f1]) return false;
                    for(var p1 = 0, h1 = a1; p1 < h1.length; p1++){
                        var y1 = h1[p1];
                        if (!t2(r2[y1], n3[y1])) return false;
                    }
                    return true;
                }, /*!
 * Get the last element of an array
 */ e.last = function(t3) {
                    if (t3.length > 0) return t3[t3.length - 1];
                }, e.clone = y, /*!
 * ignore
 */ e.promiseOrCallback = g, /*!
 * ignore
 */ e.omit = function(t3, e1) {
                    if (null == e1) return Object.assign({
                    }, t3);
                    Array.isArray(e1) || (e1 = [
                        e1
                    ]);
                    var r2, o2 = Object.assign({
                    }, t3), i1 = n(e1);
                    try {
                        for(i1.s(); !(r2 = i1.n()).done;)delete o2[r2.value];
                    } catch (t4) {
                        i1.e(t4);
                    } finally{
                        i1.f();
                    }
                    return o2;
                }, /*!
 * Shallow copies defaults into options.
 *
 * @param {Object} defaults
 * @param {Object} options
 * @return {Object} the merged object
 * @api private
 */ e.options = function(t3, e1) {
                    var r2, n3 = Object.keys(t3), o2 = n3.length;
                    for(e1 = e1 || {
                    }; o2--;)(r2 = n3[o2]) in e1 || (e1[r2] = t3[r2]);
                    return e1;
                }, /*!
 * Generates a random string
 *
 * @api private
 */ e.random = function() {
                    return Math.random().toString().substr(3);
                }, /*!
 * Merges `from` into `to` without overwriting existing properties.
 *
 * @param {Object} to
 * @param {Object} from
 * @api private
 */ e.merge = function t3(r2, n3, o2, i1) {
                    o2 = o2 || {
                    };
                    var s2, a1 = Object.keys(n3), u1 = 0, c2 = a1.length;
                    i1 = i1 || "";
                    for(var l1 = o2.omitNested || {
                    }; u1 < c2;)if (s2 = a1[u1++], !(o2.omit && o2.omit[s2] || l1[i1] || w.has(s2))) {
                        if (null == r2[s2]) r2[s2] = n3[s2];
                        else if (e.isObject(n3[s2])) {
                            if (e.isObject(r2[s2]) || (r2[s2] = {
                            }), null != n3[s2]) {
                                if (o2.isDiscriminatorSchemaMerge && n3[s2].$isSingleNested && r2[s2].$isMongooseDocumentArray || n3[s2].$isMongooseDocumentArray && r2[s2].$isSingleNested) continue;
                                if (n3[s2].instanceOfSchema) {
                                    r2[s2].instanceOfSchema ? b(r2[s2], n3[s2].clone(), o2.isDiscriminatorSchemaMerge) : r2[s2] = n3[s2].clone();
                                    continue;
                                }
                                if (n3[s2] instanceof p2) {
                                    r2[s2] = new p2(n3[s2]);
                                    continue;
                                }
                            }
                            t3(r2[s2], n3[s2], o2, i1 ? i1 + "." + s2 : s2);
                        } else o2.overwrite && (r2[s2] = n3[s2]);
                    }
                }, /*!
 * Applies toObject recursively.
 *
 * @param {Document|Array|Object} obj
 * @return {Object}
 * @api private
 */ e.toObject = function t4(o2) {
                    var i1;
                    if (s || (s = r(12)), null == o2) return o2;
                    if (o2 instanceof s) return o2.toObject();
                    if (Array.isArray(o2)) {
                        i1 = [];
                        var a1, u1 = n(o2);
                        try {
                            for(u1.s(); !(a1 = u1.n()).done;){
                                var c2 = a1.value;
                                i1.push(t4(c2));
                            }
                        } catch (t5) {
                            u1.e(t5);
                        } finally{
                            u1.f();
                        }
                        return i1;
                    }
                    if (e.isPOJO(o2)) {
                        i1 = {
                        };
                        for(var l1 = 0, f1 = Object.keys(o2); l1 < f1.length; l1++){
                            var p1 = f1[l1];
                            w.has(p1) || (i1[p1] = t4(o2[p1]));
                        }
                        return i1;
                    }
                    return o2;
                }, e.isObject = d, /*!
 * Determines if `arg` is a plain old JavaScript object (POJO). Specifically,
 * `arg` must be an object but not an instance of any special class, like String,
 * ObjectId, etc.
 *
 * `Object.getPrototypeOf()` is part of ES5: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf
 *
 * @param {Object|Array|String|Function|RegExp|any} arg
 * @api private
 * @return {Boolean}
 */ e.isPOJO = function(t5) {
                    if (null == t5 || "object" !== i(t5)) return false;
                    var e1 = Object.getPrototypeOf(t5);
                    return !e1 || "Object" === e1.constructor.name;
                }, /*!
 * Determines if `obj` is a built-in object like an array, date, boolean,
 * etc.
 */ e.isNativeObject = function(t5) {
                    return Array.isArray(t5) || t5 instanceof Date || t5 instanceof Boolean || t5 instanceof Number || t5 instanceof String;
                }, /*!
 * Determines if `val` is an object that has no own keys
 */ e.isEmptyObject = function(t5) {
                    return null != t5 && "object" === i(t5) && 0 === Object.keys(t5).length;
                }, /*!
 * Search if `obj` or any POJOs nested underneath `obj` has a property named
 * `key`
 */ e.hasKey = function(t5, r2) {
                    for(var n3 = 0, o2 = Object.keys(t5); n3 < o2.length; n3++){
                        var i1 = o2[n3];
                        if (i1 === r2) return true;
                        if (e.isPOJO(t5[i1]) && e.hasKey(t5[i1], r2)) return true;
                    }
                    return false;
                }, /*!
 * A faster Array.prototype.slice.call(arguments) alternative
 * @api private
 */ e.args = c, /*!
 * process.nextTick helper.
 *
 * Wraps `callback` in a try/catch + nextTick.
 *
 * node-mongodb-native has a habit of state corruption when an error is immediately thrown from within a collection callback.
 *
 * @param {Function} callback
 * @api private
 */ e.tick = function(e1) {
                    if ("function" == typeof e1) return function() {
                        try {
                            e1.apply(this, arguments);
                        } catch (e2) {
                            t1.nextTick(function() {
                                throw e2;
                            });
                        }
                    };
                }, /*!
 * Returns true if `v` is an object that can be serialized as a primitive in
 * MongoDB
 */ e.isMongooseType = function(t5) {
                    return t5 instanceof p2 || t5 instanceof f || t5 instanceof l;
                }, e.isMongooseObject = m, /*!
 * Converts `expires` options of index objects to `expiresAfterSeconds` options for MongoDB.
 *
 * @param {Object} object
 * @api private
 */ e.expires = function(t5) {
                    var e1;
                    t5 && "Object" === t5.constructor.name && "expires" in t5 && (e1 = "string" != typeof t5.expires ? t5.expires : Math.round(a(t5.expires) / 1000), t5.expireAfterSeconds = e1, delete t5.expires);
                }, /*!
 * populate helper
 */ e.populate = function(t5, r2, n3, o2, s2, a2, u2, c3) {
                    var l2 = null;
                    if (1 === arguments.length) {
                        if (t5 instanceof h) return [
                            t5
                        ];
                        if (Array.isArray(t5)) {
                            var f2 = p3(t5);
                            return f2.map(function(t6) {
                                return e.populate(t6)[0];
                            });
                        }
                        l2 = e.isObject(t5) ? Object.assign({
                        }, t5) : {
                            path: t5
                        };
                    } else l2 = "object" === i(n3) ? {
                        path: t5,
                        select: r2,
                        match: n3,
                        options: o2
                    } : {
                        path: t5,
                        select: r2,
                        model: n3,
                        match: o2,
                        options: s2,
                        populate: a2,
                        justOne: u2,
                        count: c3
                    };
                    if ("string" != typeof l2.path) throw new TypeError("utils.populate: invalid path. Expected string. Got typeof `" + i(t5) + "`");
                    function p3(t6) {
                        var e1 = [];
                        return t6.forEach(function(t7) {
                            /[\s]/.test(t7.path) ? t7.path.split(" ").forEach(function(r3) {
                                var n4 = Object.assign({
                                }, t7);
                                n4.path = r3, e1.push(n4);
                            }) : e1.push(t7);
                        }), e1;
                    }
                    return O(l2);
                }, e.getValue = function(t5, e1, r2) {
                    return u.get(t5, e1, "_doc", r2);
                }, /*!
 * Sets the value of `obj` at the given `path`.
 *
 * @param {String} path
 * @param {Anything} val
 * @param {Object} obj
 */ e.setValue = function(t5, e1, r2, n3, o2) {
                    u.set(t5, e1, r2, "_doc", n3, o2);
                }, /*!
 * Returns an array of values from object `o`.
 *
 * @param {Object} o
 * @return {Array}
 * @private
 */ e.object = {
                }, e.object.vals = function(t5) {
                    for(var e1 = Object.keys(t5), r2 = e1.length, n3 = []; r2--;)n3.push(t5[e1[r2]]);
                    return n3;
                }, /*!
 * @see exports.options
 */ e.object.shallowCopy = e.options;
                /*!
 * Safer helper for hasOwnProperty checks
 *
 * @param {Object} obj
 * @param {String} prop
 */ var S = Object.prototype.hasOwnProperty;
                e.object.hasOwnProperty = function(t5, e1) {
                    return S.call(t5, e1);
                }, /*!
 * Determine if `val` is null or undefined
 *
 * @return {Boolean}
 */ e.isNullOrUndefined = function(t5) {
                    return null == t5;
                }, /*!
 * ignore
 */ e.array = {
                }, /*!
 * Flattens an array.
 *
 * [ 1, [ 2, 3, [4] ]] -> [1,2,3,4]
 *
 * @param {Array} arr
 * @param {Function} [filter] If passed, will be invoked with each item in the array. If `filter` returns a falsy value, the item will not be included in the results.
 * @return {Array}
 * @private
 */ e.array.flatten = function t5(e1, r2, n3) {
                    return n3 || (n3 = []), e1.forEach(function(e2) {
                        Array.isArray(e2) ? t5(e2, r2, n3) : r2 && !r2(e2) || n3.push(e2);
                    }), n3;
                };
                /*!
 * ignore
 */ var A = Object.prototype.hasOwnProperty;
                e.hasUserDefinedProperty = function(t6, r2) {
                    if (null == t6) return false;
                    if (Array.isArray(r2)) {
                        var o2, s2 = n(r2);
                        try {
                            for(s2.s(); !(o2 = s2.n()).done;){
                                var a2 = o2.value;
                                if (e.hasUserDefinedProperty(t6, a2)) return true;
                            }
                        } catch (t7) {
                            s2.e(t7);
                        } finally{
                            s2.f();
                        }
                        return false;
                    }
                    if (A.call(t6, r2)) return true;
                    if ("object" === i(t6) && r2 in t6) {
                        var u2 = t6[r2];
                        return u2 !== Object.prototype[r2] && u2 !== Array.prototype[r2];
                    }
                    return false;
                };
                /*!
 * ignore
 */ var $ = Math.pow(2, 32) - 1;
                e.isArrayIndex = function(t6) {
                    return "number" == typeof t6 ? t6 >= 0 && t6 <= $ : "string" == typeof t6 && !!/^\d+$/.test(t6) && (t6 = +t6) >= 0 && t6 <= $;
                }, /*!
 * Removes duplicate values from an array
 *
 * [1, 2, 3, 3, 5] => [1, 2, 3, 5]
 * [ ObjectId("550988ba0c19d57f697dc45e"), ObjectId("550988ba0c19d57f697dc45e") ]
 *    => [ObjectId("550988ba0c19d57f697dc45e")]
 *
 * @param {Array} arr
 * @return {Array}
 * @private
 */ e.array.unique = function(t6) {
                    var e1, r2 = new Set, o3 = new Set, i2 = [], s3 = n(t6);
                    try {
                        for(s3.s(); !(e1 = s3.n()).done;){
                            var a3 = e1.value;
                            if ("number" == typeof a3 || "string" == typeof a3 || null == a3) {
                                if (r2.has(a3)) continue;
                                i2.push(a3), r2.add(a3);
                            } else if (a3 instanceof p2) {
                                if (o3.has(a3.toString())) continue;
                                i2.push(a3), o3.add(a3.toString());
                            } else i2.push(a3);
                        }
                    } catch (t7) {
                        s3.e(t7);
                    } finally{
                        s3.f();
                    }
                    return i2;
                }, /*!
 * Determines if two buffers are equal.
 *
 * @param {Buffer} a
 * @param {Object} b
 */ e.buffer = {
                }, e.buffer.areEqual = function(t6, e1) {
                    if (!l.isBuffer(t6)) return false;
                    if (!l.isBuffer(e1)) return false;
                    if (t6.length !== e1.length) return false;
                    for(var r2 = 0, n3 = t6.length; r2 < n3; ++r2)if (t6[r2] !== e1[r2]) return false;
                    return true;
                }, e.getFunctionName = v, /*!
 * Decorate buffers
 */ e.decorate = function(t6, e1) {
                    for(var r2 in e1)w.has(r2) || (t6[r2] = e1[r2]);
                }, e.mergeClone = function(t6, r2) {
                    m(r2) && (r2 = r2.toObject({
                        transform: false,
                        virtuals: false,
                        depopulate: true,
                        getters: false,
                        flattenDecimals: false
                    }));
                    for(var n3, o3 = Object.keys(r2), i2 = o3.length, s3 = 0; s3 < i2;)if (n3 = o3[s3++], !w.has(n3)) {
                        if ((void 0) === t6[n3]) t6[n3] = e.clone(r2[n3], {
                            transform: false,
                            virtuals: false,
                            depopulate: true,
                            getters: false,
                            flattenDecimals: false
                        });
                        else {
                            var a4 = r2[n3];
                            if (null == a4 || !a4.valueOf || a4 instanceof Date || (a4 = a4.valueOf()), e.isObject(a4)) {
                                var u3 = a4;
                                m(a4) && !a4.isMongooseBuffer && (u3 = u3.toObject({
                                    transform: false,
                                    virtuals: false,
                                    depopulate: true,
                                    getters: false,
                                    flattenDecimals: false
                                })), a4.isMongooseBuffer && (u3 = l.from(u3)), e.mergeClone(t6[n3], u3);
                            } else t6[n3] = e.clone(a4, {
                                flattenDecimals: false
                            });
                        }
                    }
                }, e.each = function(t6, e1) {
                    var r2, o3 = n(t6);
                    try {
                        for(o3.s(); !(r2 = o3.n()).done;)e1(r2.value);
                    } catch (t7) {
                        o3.e(t7);
                    } finally{
                        o3.f();
                    }
                }, /*!
 * ignore
 */ e.getOption = function(t6) {
                    var e1, r2 = Array.prototype.slice.call(arguments, 1), o3 = n(r2);
                    try {
                        for(o3.s(); !(e1 = o3.n()).done;){
                            var i2 = e1.value;
                            if (null != i2[t6]) return i2[t6];
                        }
                    } catch (t7) {
                        o3.e(t7);
                    } finally{
                        o3.f();
                    }
                    return null;
                }, /*!
 * ignore
 */ e.noop = function() {
                }, e.errorToPOJO = function(t6) {
                    if (!(t6 instanceof Error)) throw new Error("`error` must be `instanceof Error`.");
                    var e1, r2 = {
                    }, o3 = n(Object.getOwnPropertyNames(t6));
                    try {
                        for(o3.s(); !(e1 = o3.n()).done;){
                            var i3 = e1.value;
                            r2[i3] = t6[i3];
                        }
                    } catch (t7) {
                        o3.e(t7);
                    } finally{
                        o3.f();
                    }
                    return r2;
                };
            }).call(this, r(7));
        },
        function(t, e, r2) {
            "use strict";
            (function(t1) {
                /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */ var n3 = r2(97), o3 = r2(98), i4 = r2(99);
                function s3() {
                    return u4.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
                }
                function a5(t2, e1) {
                    if (s3() < e1) throw new RangeError("Invalid typed array length");
                    return u4.TYPED_ARRAY_SUPPORT ? (t2 = new Uint8Array(e1)).__proto__ = u4.prototype : (null === t2 && (t2 = new u4(e1)), t2.length = e1), t2;
                }
                function u4(t2, e1, r3) {
                    if (!(u4.TYPED_ARRAY_SUPPORT || this instanceof u4)) return new u4(t2, e1, r3);
                    if ("number" == typeof t2) {
                        if ("string" == typeof e1) throw new Error("If encoding is specified then the first argument must be a string");
                        return f3(this, t2);
                    }
                    return c3(this, t2, e1, r3);
                }
                function c3(t2, e1, r3, n4) {
                    if ("number" == typeof e1) throw new TypeError('"value" argument must not be a number');
                    return "undefined" != typeof ArrayBuffer && e1 instanceof ArrayBuffer ? (function(t3, e2, r4, n5) {
                        if (e2.byteLength, r4 < 0 || e2.byteLength < r4) throw new RangeError("'offset' is out of bounds");
                        if (e2.byteLength < r4 + (n5 || 0)) throw new RangeError("'length' is out of bounds");
                        e2 = (void 0) === r4 && (void 0) === n5 ? new Uint8Array(e2) : (void 0) === n5 ? new Uint8Array(e2, r4) : new Uint8Array(e2, r4, n5);
                        u4.TYPED_ARRAY_SUPPORT ? (t3 = e2).__proto__ = u4.prototype : t3 = p2(t3, e2);
                        return t3;
                    })(t2, e1, r3, n4) : "string" == typeof e1 ? (function(t3, e2, r4) {
                        "string" == typeof r4 && "" !== r4 || (r4 = "utf8");
                        if (!u4.isEncoding(r4)) throw new TypeError('"encoding" must be a valid string encoding');
                        var n5 = 0 | y2(e2, r4), o4 = (t3 = a5(t3, n5)).write(e2, r4);
                        o4 !== n5 && (t3 = t3.slice(0, o4));
                        return t3;
                    })(t2, e1, r3) : (function(t3, e2) {
                        if (u4.isBuffer(e2)) {
                            var r4 = 0 | h(e2.length);
                            return 0 === (t3 = a5(t3, r4)).length || e2.copy(t3, 0, 0, r4), t3;
                        }
                        if (e2) {
                            if ("undefined" != typeof ArrayBuffer && e2.buffer instanceof ArrayBuffer || "length" in e2) return "number" != typeof e2.length || (n5 = e2.length) != n5 ? a5(t3, 0) : p2(t3, e2);
                            if ("Buffer" === e2.type && i4(e2.data)) return p2(t3, e2.data);
                        }
                        var n5;
                        throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
                    })(t2, e1);
                }
                function l2(t2) {
                    if ("number" != typeof t2) throw new TypeError('"size" argument must be a number');
                    if (t2 < 0) throw new RangeError('"size" argument must not be negative');
                }
                function f3(t2, e1) {
                    if (l2(e1), t2 = a5(t2, e1 < 0 ? 0 : 0 | h(e1)), !u4.TYPED_ARRAY_SUPPORT) for(var r3 = 0; r3 < e1; ++r3)t2[r3] = 0;
                    return t2;
                }
                function p2(t2, e1) {
                    var r3 = e1.length < 0 ? 0 : 0 | h(e1.length);
                    t2 = a5(t2, r3);
                    for(var n4 = 0; n4 < r3; n4 += 1)t2[n4] = 255 & e1[n4];
                    return t2;
                }
                function h(t2) {
                    if (t2 >= s3()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s3().toString(16) + " bytes");
                    return 0 | t2;
                }
                function y2(t2, e1) {
                    if (u4.isBuffer(t2)) return t2.length;
                    if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t2) || t2 instanceof ArrayBuffer)) return t2.byteLength;
                    "string" != typeof t2 && (t2 = "" + t2);
                    var r3 = t2.length;
                    if (0 === r3) return 0;
                    for(var n4 = false;;)switch(e1){
                        case "ascii":
                        case "latin1":
                        case "binary":
                            return r3;
                        case "utf8":
                        case "utf-8":
                        case void 0:
                            return L(t2).length;
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return 2 * r3;
                        case "hex":
                            return r3 >>> 1;
                        case "base64":
                            return U(t2).length;
                        default:
                            if (n4) return L(t2).length;
                            e1 = ("" + e1).toLowerCase(), n4 = true;
                    }
                }
                function d(t2, e1, r3) {
                    var n4 = false;
                    if (((void 0) === e1 || e1 < 0) && (e1 = 0), e1 > this.length) return "";
                    if (((void 0) === r3 || r3 > this.length) && (r3 = this.length), r3 <= 0) return "";
                    if ((r3 >>>= 0) <= (e1 >>>= 0)) return "";
                    for(t2 || (t2 = "utf8");;)switch(t2){
                        case "hex":
                            return x(this, e1, r3);
                        case "utf8":
                        case "utf-8":
                            return E(this, e1, r3);
                        case "ascii":
                            return j(this, e1, r3);
                        case "latin1":
                        case "binary":
                            return P(this, e1, r3);
                        case "base64":
                            return $(this, e1, r3);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return T(this, e1, r3);
                        default:
                            if (n4) throw new TypeError("Unknown encoding: " + t2);
                            t2 = (t2 + "").toLowerCase(), n4 = true;
                    }
                }
                function _(t2, e1, r3) {
                    var n4 = t2[e1];
                    t2[e1] = t2[r3], t2[r3] = n4;
                }
                function v(t2, e1, r3, n4, o4) {
                    if (0 === t2.length) return -1;
                    if ("string" == typeof r3 ? (n4 = r3, r3 = 0) : r3 > 2147483647 ? r3 = 2147483647 : r3 < -2147483648 && (r3 = -2147483648), r3 = +r3, isNaN(r3) && (r3 = o4 ? 0 : t2.length - 1), r3 < 0 && (r3 = t2.length + r3), r3 >= t2.length) {
                        if (o4) return -1;
                        r3 = t2.length - 1;
                    } else if (r3 < 0) {
                        if (!o4) return -1;
                        r3 = 0;
                    }
                    if ("string" == typeof e1 && (e1 = u4.from(e1, n4)), u4.isBuffer(e1)) return 0 === e1.length ? -1 : m(t2, e1, r3, n4, o4);
                    if ("number" == typeof e1) return e1 &= 255, u4.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? o4 ? Uint8Array.prototype.indexOf.call(t2, e1, r3) : Uint8Array.prototype.lastIndexOf.call(t2, e1, r3) : m(t2, [
                        e1
                    ], r3, n4, o4);
                    throw new TypeError("val must be string, number or Buffer");
                }
                function m(t2, e1, r3, n4, o4) {
                    var i5, s4 = 1, a6 = t2.length, u5 = e1.length;
                    if ((void 0) !== n4 && ("ucs2" === (n4 = String(n4).toLowerCase()) || "ucs-2" === n4 || "utf16le" === n4 || "utf-16le" === n4)) {
                        if (t2.length < 2 || e1.length < 2) return -1;
                        s4 = 2, a6 /= 2, u5 /= 2, r3 /= 2;
                    }
                    function c4(t3, e2) {
                        return 1 === s4 ? t3[e2] : t3.readUInt16BE(e2 * s4);
                    }
                    if (o4) {
                        var l3 = -1;
                        for(i5 = r3; i5 < a6; i5++)if (c4(t2, i5) === c4(e1, -1 === l3 ? 0 : i5 - l3)) {
                            if (-1 === l3 && (l3 = i5), i5 - l3 + 1 === u5) return l3 * s4;
                        } else -1 !== l3 && (i5 -= i5 - l3), l3 = -1;
                    } else for(r3 + u5 > a6 && (r3 = a6 - u5), i5 = r3; i5 >= 0; i5--){
                        for(var f4 = true, p3 = 0; p3 < u5; p3++)if (c4(t2, i5 + p3) !== c4(e1, p3)) {
                            f4 = false;
                            break;
                        }
                        if (f4) return i5;
                    }
                    return -1;
                }
                function g(t2, e1, r3, n4) {
                    r3 = Number(r3) || 0;
                    var o4 = t2.length - r3;
                    n4 ? (n4 = Number(n4)) > o4 && (n4 = o4) : n4 = o4;
                    var i5 = e1.length;
                    if (i5 % 2 != 0) throw new TypeError("Invalid hex string");
                    n4 > i5 / 2 && (n4 = i5 / 2);
                    for(var s4 = 0; s4 < n4; ++s4){
                        var a6 = parseInt(e1.substr(2 * s4, 2), 16);
                        if (isNaN(a6)) return s4;
                        t2[r3 + s4] = a6;
                    }
                    return s4;
                }
                function b(t2, e1, r3, n4) {
                    return V(L(e1, t2.length - r3), t2, r3, n4);
                }
                function w(t2, e1, r3, n4) {
                    return V(function(t3) {
                        for(var e2 = [], r5 = 0; r5 < t3.length; ++r5)e2.push(255 & t3.charCodeAt(r5));
                        return e2;
                    }(e1), t2, r3, n4);
                }
                function O(t2, e1, r3, n4) {
                    return w(t2, e1, r3, n4);
                }
                function S(t2, e1, r3, n4) {
                    return V(U(e1), t2, r3, n4);
                }
                function A(t2, e1, r3, n4) {
                    return V(function(t3, e2) {
                        for(var r5, n5, o4, i5 = [], s4 = 0; s4 < t3.length && !((e2 -= 2) < 0); ++s4)r5 = t3.charCodeAt(s4), n5 = r5 >> 8, o4 = r5 % 256, i5.push(o4), i5.push(n5);
                        return i5;
                    }(e1, t2.length - r3), t2, r3, n4);
                }
                function $(t2, e1, r3) {
                    return 0 === e1 && r3 === t2.length ? n3.fromByteArray(t2) : n3.fromByteArray(t2.slice(e1, r3));
                }
                function E(t2, e1, r3) {
                    r3 = Math.min(t2.length, r3);
                    for(var n4 = [], o4 = e1; o4 < r3;){
                        var i5, s4, a7, u5, c4 = t2[o4], l4 = null, f5 = c4 > 239 ? 4 : c4 > 223 ? 3 : c4 > 191 ? 2 : 1;
                        if (o4 + f5 <= r3) switch(f5){
                            case 1:
                                c4 < 128 && (l4 = c4);
                                break;
                            case 2:
                                128 == (192 & (i5 = t2[o4 + 1])) && (u5 = (31 & c4) << 6 | 63 & i5) > 127 && (l4 = u5);
                                break;
                            case 3:
                                i5 = t2[o4 + 1], s4 = t2[o4 + 2], 128 == (192 & i5) && 128 == (192 & s4) && (u5 = (15 & c4) << 12 | (63 & i5) << 6 | 63 & s4) > 2047 && (u5 < 55296 || u5 > 57343) && (l4 = u5);
                                break;
                            case 4:
                                i5 = t2[o4 + 1], s4 = t2[o4 + 2], a7 = t2[o4 + 3], 128 == (192 & i5) && 128 == (192 & s4) && 128 == (192 & a7) && (u5 = (15 & c4) << 18 | (63 & i5) << 12 | (63 & s4) << 6 | 63 & a7) > 65535 && u5 < 1114112 && (l4 = u5);
                        }
                        null === l4 ? (l4 = 65533, f5 = 1) : l4 > 65535 && (l4 -= 65536, n4.push(l4 >>> 10 & 1023 | 55296), l4 = 56320 | 1023 & l4), n4.push(l4), o4 += f5;
                    }
                    return (function(t3) {
                        var e2 = t3.length;
                        if (e2 <= 4096) return String.fromCharCode.apply(String, t3);
                        var r5 = "", n5 = 0;
                        for(; n5 < e2;)r5 += String.fromCharCode.apply(String, t3.slice(n5, n5 += 4096));
                        return r5;
                    })(n4);
                }
                e.Buffer = u4, e.SlowBuffer = function(t2) {
                    +t2 != t2 && (t2 = 0);
                    return u4.alloc(+t2);
                }, e.INSPECT_MAX_BYTES = 50, u4.TYPED_ARRAY_SUPPORT = (void 0) !== t1.TYPED_ARRAY_SUPPORT ? t1.TYPED_ARRAY_SUPPORT : (function() {
                    try {
                        var t2 = new Uint8Array(1);
                        return t2.__proto__ = {
                            __proto__: Uint8Array.prototype,
                            foo: function() {
                                return 42;
                            }
                        }, 42 === t2.foo() && "function" == typeof t2.subarray && 0 === t2.subarray(1, 1).byteLength;
                    } catch (t3) {
                        return false;
                    }
                })(), e.kMaxLength = s3(), u4.poolSize = 8192, u4._augment = function(t2) {
                    return t2.__proto__ = u4.prototype, t2;
                }, u4.from = function(t2, e1, r3) {
                    return c3(null, t2, e1, r3);
                }, u4.TYPED_ARRAY_SUPPORT && (u4.prototype.__proto__ = Uint8Array.prototype, u4.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && u4[Symbol.species] === u4 && Object.defineProperty(u4, Symbol.species, {
                    value: null,
                    configurable: true
                })), u4.alloc = function(t2, e1, r3) {
                    return (function(t3, e2, r5, n4) {
                        return l2(e2), e2 <= 0 ? a5(t3, e2) : (void 0) !== r5 ? "string" == typeof n4 ? a5(t3, e2).fill(r5, n4) : a5(t3, e2).fill(r5) : a5(t3, e2);
                    })(null, t2, e1, r3);
                }, u4.allocUnsafe = function(t2) {
                    return f3(null, t2);
                }, u4.allocUnsafeSlow = function(t2) {
                    return f3(null, t2);
                }, u4.isBuffer = function(t2) {
                    return !(null == t2 || !t2._isBuffer);
                }, u4.compare = function(t2, e1) {
                    if (!u4.isBuffer(t2) || !u4.isBuffer(e1)) throw new TypeError("Arguments must be Buffers");
                    if (t2 === e1) return 0;
                    for(var r3 = t2.length, n4 = e1.length, o4 = 0, i6 = Math.min(r3, n4); o4 < i6; ++o4)if (t2[o4] !== e1[o4]) {
                        r3 = t2[o4], n4 = e1[o4];
                        break;
                    }
                    return r3 < n4 ? -1 : n4 < r3 ? 1 : 0;
                }, u4.isEncoding = function(t2) {
                    switch(String(t2).toLowerCase()){
                        case "hex":
                        case "utf8":
                        case "utf-8":
                        case "ascii":
                        case "latin1":
                        case "binary":
                        case "base64":
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return true;
                        default:
                            return false;
                    }
                }, u4.concat = function(t2, e1) {
                    if (!i4(t2)) throw new TypeError('"list" argument must be an Array of Buffers');
                    if (0 === t2.length) return u4.alloc(0);
                    var r3;
                    if ((void 0) === e1) for(e1 = 0, r3 = 0; r3 < t2.length; ++r3)e1 += t2[r3].length;
                    var n4 = u4.allocUnsafe(e1), o4 = 0;
                    for(r3 = 0; r3 < t2.length; ++r3){
                        var s5 = t2[r3];
                        if (!u4.isBuffer(s5)) throw new TypeError('"list" argument must be an Array of Buffers');
                        s5.copy(n4, o4), o4 += s5.length;
                    }
                    return n4;
                }, u4.byteLength = y2, u4.prototype._isBuffer = true, u4.prototype.swap16 = function() {
                    var t2 = this.length;
                    if (t2 % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                    for(var e1 = 0; e1 < t2; e1 += 2)_(this, e1, e1 + 1);
                    return this;
                }, u4.prototype.swap32 = function() {
                    var t2 = this.length;
                    if (t2 % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                    for(var e1 = 0; e1 < t2; e1 += 4)_(this, e1, e1 + 3), _(this, e1 + 1, e1 + 2);
                    return this;
                }, u4.prototype.swap64 = function() {
                    var t2 = this.length;
                    if (t2 % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                    for(var e1 = 0; e1 < t2; e1 += 8)_(this, e1, e1 + 7), _(this, e1 + 1, e1 + 6), _(this, e1 + 2, e1 + 5), _(this, e1 + 3, e1 + 4);
                    return this;
                }, u4.prototype.toString = function() {
                    var t2 = 0 | this.length;
                    return 0 === t2 ? "" : 0 === arguments.length ? E(this, 0, t2) : d.apply(this, arguments);
                }, u4.prototype.equals = function(t2) {
                    if (!u4.isBuffer(t2)) throw new TypeError("Argument must be a Buffer");
                    return this === t2 || 0 === u4.compare(this, t2);
                }, u4.prototype.inspect = function() {
                    var t2 = "", r3 = e.INSPECT_MAX_BYTES;
                    return this.length > 0 && (t2 = this.toString("hex", 0, r3).match(/.{2}/g).join(" "), this.length > r3 && (t2 += " ... ")), "<Buffer " + t2 + ">";
                }, u4.prototype.compare = function(t2, e1, r3, n4, o4) {
                    if (!u4.isBuffer(t2)) throw new TypeError("Argument must be a Buffer");
                    if ((void 0) === e1 && (e1 = 0), (void 0) === r3 && (r3 = t2 ? t2.length : 0), (void 0) === n4 && (n4 = 0), (void 0) === o4 && (o4 = this.length), e1 < 0 || r3 > t2.length || n4 < 0 || o4 > this.length) throw new RangeError("out of range index");
                    if (n4 >= o4 && e1 >= r3) return 0;
                    if (n4 >= o4) return -1;
                    if (e1 >= r3) return 1;
                    if (this === t2) return 0;
                    for(var i6 = (o4 >>>= 0) - (n4 >>>= 0), s6 = (r3 >>>= 0) - (e1 >>>= 0), a8 = Math.min(i6, s6), c5 = this.slice(n4, o4), l5 = t2.slice(e1, r3), f6 = 0; f6 < a8; ++f6)if (c5[f6] !== l5[f6]) {
                        i6 = c5[f6], s6 = l5[f6];
                        break;
                    }
                    return i6 < s6 ? -1 : s6 < i6 ? 1 : 0;
                }, u4.prototype.includes = function(t2, e1, r3) {
                    return -1 !== this.indexOf(t2, e1, r3);
                }, u4.prototype.indexOf = function(t2, e1, r3) {
                    return v(this, t2, e1, r3, true);
                }, u4.prototype.lastIndexOf = function(t2, e1, r3) {
                    return v(this, t2, e1, r3, false);
                }, u4.prototype.write = function(t2, e1, r3, n4) {
                    if ((void 0) === e1) n4 = "utf8", r3 = this.length, e1 = 0;
                    else if ((void 0) === r3 && "string" == typeof e1) n4 = e1, r3 = this.length, e1 = 0;
                    else {
                        if (!isFinite(e1)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                        e1 |= 0, isFinite(r3) ? (r3 |= 0, (void 0) === n4 && (n4 = "utf8")) : (n4 = r3, r3 = void 0);
                    }
                    var o4 = this.length - e1;
                    if (((void 0) === r3 || r3 > o4) && (r3 = o4), t2.length > 0 && (r3 < 0 || e1 < 0) || e1 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
                    n4 || (n4 = "utf8");
                    for(var i6 = false;;)switch(n4){
                        case "hex":
                            return g(this, t2, e1, r3);
                        case "utf8":
                        case "utf-8":
                            return b(this, t2, e1, r3);
                        case "ascii":
                            return w(this, t2, e1, r3);
                        case "latin1":
                        case "binary":
                            return O(this, t2, e1, r3);
                        case "base64":
                            return S(this, t2, e1, r3);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return A(this, t2, e1, r3);
                        default:
                            if (i6) throw new TypeError("Unknown encoding: " + n4);
                            n4 = ("" + n4).toLowerCase(), i6 = true;
                    }
                }, u4.prototype.toJSON = function() {
                    return {
                        type: "Buffer",
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    };
                };
                function j(t2, e1, r3) {
                    var n4 = "";
                    r3 = Math.min(t2.length, r3);
                    for(var o4 = e1; o4 < r3; ++o4)n4 += String.fromCharCode(127 & t2[o4]);
                    return n4;
                }
                function P(t2, e1, r3) {
                    var n4 = "";
                    r3 = Math.min(t2.length, r3);
                    for(var o4 = e1; o4 < r3; ++o4)n4 += String.fromCharCode(t2[o4]);
                    return n4;
                }
                function x(t2, e1, r3) {
                    var n4 = t2.length;
                    (!e1 || e1 < 0) && (e1 = 0), (!r3 || r3 < 0 || r3 > n4) && (r3 = n4);
                    for(var o4 = "", i6 = e1; i6 < r3; ++i6)o4 += F(t2[i6]);
                    return o4;
                }
                function T(t2, e1, r3) {
                    for(var n4 = t2.slice(e1, r3), o4 = "", i6 = 0; i6 < n4.length; i6 += 2)o4 += String.fromCharCode(n4[i6] + 256 * n4[i6 + 1]);
                    return o4;
                }
                function N(t2, e1, r3) {
                    if (t2 % 1 != 0 || t2 < 0) throw new RangeError("offset is not uint");
                    if (t2 + e1 > r3) throw new RangeError("Trying to access beyond buffer length");
                }
                function k(t2, e1, r3, n4, o4, i6) {
                    if (!u4.isBuffer(t2)) throw new TypeError('"buffer" argument must be a Buffer instance');
                    if (e1 > o4 || e1 < i6) throw new RangeError('"value" argument is out of bounds');
                    if (r3 + n4 > t2.length) throw new RangeError("Index out of range");
                }
                function B(t2, e1, r3, n4) {
                    e1 < 0 && (e1 = 65535 + e1 + 1);
                    for(var o4 = 0, i6 = Math.min(t2.length - r3, 2); o4 < i6; ++o4)t2[r3 + o4] = (e1 & 255 << 8 * (n4 ? o4 : 1 - o4)) >>> 8 * (n4 ? o4 : 1 - o4);
                }
                function R(t2, e1, r3, n4) {
                    e1 < 0 && (e1 = 4294967295 + e1 + 1);
                    for(var o4 = 0, i6 = Math.min(t2.length - r3, 4); o4 < i6; ++o4)t2[r3 + o4] = e1 >>> 8 * (n4 ? o4 : 3 - o4) & 255;
                }
                function C(t2, e1, r3, n4, o4, i6) {
                    if (r3 + n4 > t2.length) throw new RangeError("Index out of range");
                    if (r3 < 0) throw new RangeError("Index out of range");
                }
                function D(t2, e1, r3, n4, i6) {
                    return i6 || C(t2, 0, r3, 4), o3.write(t2, e1, r3, n4, 23, 4), r3 + 4;
                }
                function M(t2, e1, r3, n4, i6) {
                    return i6 || C(t2, 0, r3, 8), o3.write(t2, e1, r3, n4, 52, 8), r3 + 8;
                }
                u4.prototype.slice = function(t2, e1) {
                    var r3, n4 = this.length;
                    if ((t2 = ~~t2) < 0 ? (t2 += n4) < 0 && (t2 = 0) : t2 > n4 && (t2 = n4), (e1 = (void 0) === e1 ? n4 : ~~e1) < 0 ? (e1 += n4) < 0 && (e1 = 0) : e1 > n4 && (e1 = n4), e1 < t2 && (e1 = t2), u4.TYPED_ARRAY_SUPPORT) (r3 = this.subarray(t2, e1)).__proto__ = u4.prototype;
                    else {
                        var o4 = e1 - t2;
                        r3 = new u4(o4, void 0);
                        for(var i6 = 0; i6 < o4; ++i6)r3[i6] = this[i6 + t2];
                    }
                    return r3;
                }, u4.prototype.readUIntLE = function(t2, e1, r3) {
                    t2 |= 0, e1 |= 0, r3 || N(t2, e1, this.length);
                    for(var n4 = this[t2], o5 = 1, i7 = 0; (++i7) < e1 && (o5 *= 256);)n4 += this[t2 + i7] * o5;
                    return n4;
                }, u4.prototype.readUIntBE = function(t2, e1, r3) {
                    t2 |= 0, e1 |= 0, r3 || N(t2, e1, this.length);
                    for(var n4 = this[t2 + --e1], o5 = 1; e1 > 0 && (o5 *= 256);)n4 += this[t2 + --e1] * o5;
                    return n4;
                }, u4.prototype.readUInt8 = function(t2, e1) {
                    return e1 || N(t2, 1, this.length), this[t2];
                }, u4.prototype.readUInt16LE = function(t2, e1) {
                    return e1 || N(t2, 2, this.length), this[t2] | this[t2 + 1] << 8;
                }, u4.prototype.readUInt16BE = function(t2, e1) {
                    return e1 || N(t2, 2, this.length), this[t2] << 8 | this[t2 + 1];
                }, u4.prototype.readUInt32LE = function(t2, e1) {
                    return e1 || N(t2, 4, this.length), (this[t2] | this[t2 + 1] << 8 | this[t2 + 2] << 16) + 16777216 * this[t2 + 3];
                }, u4.prototype.readUInt32BE = function(t2, e1) {
                    return e1 || N(t2, 4, this.length), 16777216 * this[t2] + (this[t2 + 1] << 16 | this[t2 + 2] << 8 | this[t2 + 3]);
                }, u4.prototype.readIntLE = function(t2, e1, r3) {
                    t2 |= 0, e1 |= 0, r3 || N(t2, e1, this.length);
                    for(var n4 = this[t2], o5 = 1, i7 = 0; (++i7) < e1 && (o5 *= 256);)n4 += this[t2 + i7] * o5;
                    return n4 >= (o5 *= 128) && (n4 -= Math.pow(2, 8 * e1)), n4;
                }, u4.prototype.readIntBE = function(t2, e1, r3) {
                    t2 |= 0, e1 |= 0, r3 || N(t2, e1, this.length);
                    for(var n4 = e1, o5 = 1, i7 = this[t2 + --n4]; n4 > 0 && (o5 *= 256);)i7 += this[t2 + --n4] * o5;
                    return i7 >= (o5 *= 128) && (i7 -= Math.pow(2, 8 * e1)), i7;
                }, u4.prototype.readInt8 = function(t2, e1) {
                    return e1 || N(t2, 1, this.length), 128 & this[t2] ? -1 * (255 - this[t2] + 1) : this[t2];
                }, u4.prototype.readInt16LE = function(t2, e1) {
                    e1 || N(t2, 2, this.length);
                    var r3 = this[t2] | this[t2 + 1] << 8;
                    return 32768 & r3 ? 4294901760 | r3 : r3;
                }, u4.prototype.readInt16BE = function(t2, e1) {
                    e1 || N(t2, 2, this.length);
                    var r3 = this[t2 + 1] | this[t2] << 8;
                    return 32768 & r3 ? 4294901760 | r3 : r3;
                }, u4.prototype.readInt32LE = function(t2, e1) {
                    return e1 || N(t2, 4, this.length), this[t2] | this[t2 + 1] << 8 | this[t2 + 2] << 16 | this[t2 + 3] << 24;
                }, u4.prototype.readInt32BE = function(t2, e1) {
                    return e1 || N(t2, 4, this.length), this[t2] << 24 | this[t2 + 1] << 16 | this[t2 + 2] << 8 | this[t2 + 3];
                }, u4.prototype.readFloatLE = function(t2, e1) {
                    return e1 || N(t2, 4, this.length), o3.read(this, t2, true, 23, 4);
                }, u4.prototype.readFloatBE = function(t2, e1) {
                    return e1 || N(t2, 4, this.length), o3.read(this, t2, false, 23, 4);
                }, u4.prototype.readDoubleLE = function(t2, e1) {
                    return e1 || N(t2, 8, this.length), o3.read(this, t2, true, 52, 8);
                }, u4.prototype.readDoubleBE = function(t2, e1) {
                    return e1 || N(t2, 8, this.length), o3.read(this, t2, false, 52, 8);
                }, u4.prototype.writeUIntLE = function(t2, e1, r3, n4) {
                    (t2 = +t2, e1 |= 0, r3 |= 0, n4) || k(this, t2, e1, r3, Math.pow(2, 8 * r3) - 1, 0);
                    var o5 = 1, i7 = 0;
                    for(this[e1] = 255 & t2; (++i7) < r3 && (o5 *= 256);)this[e1 + i7] = t2 / o5 & 255;
                    return e1 + r3;
                }, u4.prototype.writeUIntBE = function(t2, e1, r3, n4) {
                    (t2 = +t2, e1 |= 0, r3 |= 0, n4) || k(this, t2, e1, r3, Math.pow(2, 8 * r3) - 1, 0);
                    var o5 = r3 - 1, i7 = 1;
                    for(this[e1 + o5] = 255 & t2; (--o5) >= 0 && (i7 *= 256);)this[e1 + o5] = t2 / i7 & 255;
                    return e1 + r3;
                }, u4.prototype.writeUInt8 = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 1, 255, 0), u4.TYPED_ARRAY_SUPPORT || (t2 = Math.floor(t2)), this[e1] = 255 & t2, e1 + 1;
                }, u4.prototype.writeUInt16LE = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 2, 65535, 0), u4.TYPED_ARRAY_SUPPORT ? (this[e1] = 255 & t2, this[e1 + 1] = t2 >>> 8) : B(this, t2, e1, true), e1 + 2;
                }, u4.prototype.writeUInt16BE = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 2, 65535, 0), u4.TYPED_ARRAY_SUPPORT ? (this[e1] = t2 >>> 8, this[e1 + 1] = 255 & t2) : B(this, t2, e1, false), e1 + 2;
                }, u4.prototype.writeUInt32LE = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 4, 4294967295, 0), u4.TYPED_ARRAY_SUPPORT ? (this[e1 + 3] = t2 >>> 24, this[e1 + 2] = t2 >>> 16, this[e1 + 1] = t2 >>> 8, this[e1] = 255 & t2) : R(this, t2, e1, true), e1 + 4;
                }, u4.prototype.writeUInt32BE = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 4, 4294967295, 0), u4.TYPED_ARRAY_SUPPORT ? (this[e1] = t2 >>> 24, this[e1 + 1] = t2 >>> 16, this[e1 + 2] = t2 >>> 8, this[e1 + 3] = 255 & t2) : R(this, t2, e1, false), e1 + 4;
                }, u4.prototype.writeIntLE = function(t2, e1, r3, n4) {
                    if (t2 = +t2, e1 |= 0, !n4) {
                        var o5 = Math.pow(2, 8 * r3 - 1);
                        k(this, t2, e1, r3, o5 - 1, -o5);
                    }
                    var i7 = 0, s6 = 1, a8 = 0;
                    for(this[e1] = 255 & t2; (++i7) < r3 && (s6 *= 256);)t2 < 0 && 0 === a8 && 0 !== this[e1 + i7 - 1] && (a8 = 1), this[e1 + i7] = (t2 / s6 >> 0) - a8 & 255;
                    return e1 + r3;
                }, u4.prototype.writeIntBE = function(t2, e1, r3, n4) {
                    if (t2 = +t2, e1 |= 0, !n4) {
                        var o6 = Math.pow(2, 8 * r3 - 1);
                        k(this, t2, e1, r3, o6 - 1, -o6);
                    }
                    var i7 = r3 - 1, s6 = 1, a8 = 0;
                    for(this[e1 + i7] = 255 & t2; (--i7) >= 0 && (s6 *= 256);)t2 < 0 && 0 === a8 && 0 !== this[e1 + i7 + 1] && (a8 = 1), this[e1 + i7] = (t2 / s6 >> 0) - a8 & 255;
                    return e1 + r3;
                }, u4.prototype.writeInt8 = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 1, 127, -128), u4.TYPED_ARRAY_SUPPORT || (t2 = Math.floor(t2)), t2 < 0 && (t2 = 255 + t2 + 1), this[e1] = 255 & t2, e1 + 1;
                }, u4.prototype.writeInt16LE = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 2, 32767, -32768), u4.TYPED_ARRAY_SUPPORT ? (this[e1] = 255 & t2, this[e1 + 1] = t2 >>> 8) : B(this, t2, e1, true), e1 + 2;
                }, u4.prototype.writeInt16BE = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 2, 32767, -32768), u4.TYPED_ARRAY_SUPPORT ? (this[e1] = t2 >>> 8, this[e1 + 1] = 255 & t2) : B(this, t2, e1, false), e1 + 2;
                }, u4.prototype.writeInt32LE = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 4, 2147483647, -2147483648), u4.TYPED_ARRAY_SUPPORT ? (this[e1] = 255 & t2, this[e1 + 1] = t2 >>> 8, this[e1 + 2] = t2 >>> 16, this[e1 + 3] = t2 >>> 24) : R(this, t2, e1, true), e1 + 4;
                }, u4.prototype.writeInt32BE = function(t2, e1, r3) {
                    return t2 = +t2, e1 |= 0, r3 || k(this, t2, e1, 4, 2147483647, -2147483648), t2 < 0 && (t2 = 4294967295 + t2 + 1), u4.TYPED_ARRAY_SUPPORT ? (this[e1] = t2 >>> 24, this[e1 + 1] = t2 >>> 16, this[e1 + 2] = t2 >>> 8, this[e1 + 3] = 255 & t2) : R(this, t2, e1, false), e1 + 4;
                }, u4.prototype.writeFloatLE = function(t2, e1, r3) {
                    return D(this, t2, e1, true, r3);
                }, u4.prototype.writeFloatBE = function(t2, e1, r3) {
                    return D(this, t2, e1, false, r3);
                }, u4.prototype.writeDoubleLE = function(t2, e1, r3) {
                    return M(this, t2, e1, true, r3);
                }, u4.prototype.writeDoubleBE = function(t2, e1, r3) {
                    return M(this, t2, e1, false, r3);
                }, u4.prototype.copy = function(t2, e1, r3, n4) {
                    if (r3 || (r3 = 0), n4 || 0 === n4 || (n4 = this.length), e1 >= t2.length && (e1 = t2.length), e1 || (e1 = 0), n4 > 0 && n4 < r3 && (n4 = r3), n4 === r3) return 0;
                    if (0 === t2.length || 0 === this.length) return 0;
                    if (e1 < 0) throw new RangeError("targetStart out of bounds");
                    if (r3 < 0 || r3 >= this.length) throw new RangeError("sourceStart out of bounds");
                    if (n4 < 0) throw new RangeError("sourceEnd out of bounds");
                    n4 > this.length && (n4 = this.length), t2.length - e1 < n4 - r3 && (n4 = t2.length - e1 + r3);
                    var o7, i7 = n4 - r3;
                    if (this === t2 && r3 < e1 && e1 < n4) for(o7 = i7 - 1; o7 >= 0; --o7)t2[o7 + e1] = this[o7 + r3];
                    else if (i7 < 1000 || !u4.TYPED_ARRAY_SUPPORT) for(o7 = 0; o7 < i7; ++o7)t2[o7 + e1] = this[o7 + r3];
                    else Uint8Array.prototype.set.call(t2, this.subarray(r3, r3 + i7), e1);
                    return i7;
                }, u4.prototype.fill = function(t2, e1, r3, n4) {
                    if ("string" == typeof t2) {
                        if ("string" == typeof e1 ? (n4 = e1, e1 = 0, r3 = this.length) : "string" == typeof r3 && (n4 = r3, r3 = this.length), 1 === t2.length) {
                            var o7 = t2.charCodeAt(0);
                            o7 < 256 && (t2 = o7);
                        }
                        if ((void 0) !== n4 && "string" != typeof n4) throw new TypeError("encoding must be a string");
                        if ("string" == typeof n4 && !u4.isEncoding(n4)) throw new TypeError("Unknown encoding: " + n4);
                    } else "number" == typeof t2 && (t2 &= 255);
                    if (e1 < 0 || this.length < e1 || this.length < r3) throw new RangeError("Out of range index");
                    if (r3 <= e1) return this;
                    var i7;
                    if (e1 >>>= 0, r3 = (void 0) === r3 ? this.length : r3 >>> 0, t2 || (t2 = 0), "number" == typeof t2) for(i7 = e1; i7 < r3; ++i7)this[i7] = t2;
                    else {
                        var s6 = u4.isBuffer(t2) ? t2 : L(new u4(t2, n4).toString()), a8 = s6.length;
                        for(i7 = 0; i7 < r3 - e1; ++i7)this[i7 + e1] = s6[i7 % a8];
                    }
                    return this;
                };
                var I = /[^+\/0-9A-Za-z-_]/g;
                function F(t2) {
                    return t2 < 16 ? "0" + t2.toString(16) : t2.toString(16);
                }
                function L(t2, e1) {
                    var r3;
                    e1 = e1 || 1 / 0;
                    for(var n4 = t2.length, o8 = null, i7 = [], s7 = 0; s7 < n4; ++s7){
                        if ((r3 = t2.charCodeAt(s7)) > 55295 && r3 < 57344) {
                            if (!o8) {
                                if (r3 > 56319) {
                                    (e1 -= 3) > -1 && i7.push(239, 191, 189);
                                    continue;
                                }
                                if (s7 + 1 === n4) {
                                    (e1 -= 3) > -1 && i7.push(239, 191, 189);
                                    continue;
                                }
                                o8 = r3;
                                continue;
                            }
                            if (r3 < 56320) {
                                (e1 -= 3) > -1 && i7.push(239, 191, 189), o8 = r3;
                                continue;
                            }
                            r3 = 65536 + (o8 - 55296 << 10 | r3 - 56320);
                        } else o8 && (e1 -= 3) > -1 && i7.push(239, 191, 189);
                        if (o8 = null, r3 < 128) {
                            if ((e1 -= 1) < 0) break;
                            i7.push(r3);
                        } else if (r3 < 2048) {
                            if ((e1 -= 2) < 0) break;
                            i7.push(r3 >> 6 | 192, 63 & r3 | 128);
                        } else if (r3 < 65536) {
                            if ((e1 -= 3) < 0) break;
                            i7.push(r3 >> 12 | 224, r3 >> 6 & 63 | 128, 63 & r3 | 128);
                        } else {
                            if (!(r3 < 1114112)) throw new Error("Invalid code point");
                            if ((e1 -= 4) < 0) break;
                            i7.push(r3 >> 18 | 240, r3 >> 12 & 63 | 128, r3 >> 6 & 63 | 128, 63 & r3 | 128);
                        }
                    }
                    return i7;
                }
                function U(t2) {
                    return n3.toByteArray(function(t3) {
                        if ((t3 = (function(t4) {
                            return t4.trim ? t4.trim() : t4.replace(/^\s+|\s+$/g, "");
                        })(t3).replace(I, "")).length < 2) return "";
                        for(; t3.length % 4 != 0;)t3 += "=";
                        return t3;
                    }(t2));
                }
                function V(t2, e1, r3, n4) {
                    for(var o8 = 0; o8 < n4 && !(o8 + r3 >= e1.length || o8 >= t2.length); ++o8)e1[o8 + r3] = t2[o8];
                    return o8;
                }
            }).call(this, r2(11));
        },
        function(t, e, r2) {
            "use strict";
            /*!
 * Simplified lodash.get to work around the annoying null quirk. See:
 * https://github.com/lodash/lodash/issues/3659
 */ function n3(t1, e1) {
                var r3 = "undefined" != typeof Symbol && t1[Symbol.iterator] || t1["@@iterator"];
                if (!r3) {
                    if (Array.isArray(t1) || (r3 = (function(t2, e2) {
                        if (!t2) return;
                        if ("string" == typeof t2) return o3(t2, e2);
                        var r5 = Object.prototype.toString.call(t2).slice(8, -1);
                        "Object" === r5 && t2.constructor && (r5 = t2.constructor.name);
                        if ("Map" === r5 || "Set" === r5) return Array.from(t2);
                        if ("Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5)) return o3(t2, e2);
                    })(t1)) || e1 && t1 && "number" == typeof t1.length) {
                        r3 && (t1 = r3);
                        var n4 = 0, i4 = function() {
                        };
                        return {
                            s: i4,
                            n: function() {
                                return n4 >= t1.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t1[n4++]
                                };
                            },
                            e: function(t2) {
                                throw t2;
                            },
                            f: i4
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s3, a5 = true, u4 = false;
                return {
                    s: function() {
                        r3 = r3.call(t1);
                    },
                    n: function() {
                        var t2 = r3.next();
                        return a5 = t2.done, t2;
                    },
                    e: function(t2) {
                        u4 = true, s3 = t2;
                    },
                    f: function() {
                        try {
                            a5 || null == r3.return || r3.return();
                        } finally{
                            if (u4) throw s3;
                        }
                    }
                };
            }
            function o3(t1, e1) {
                (null == e1 || e1 > t1.length) && (e1 = t1.length);
                for(var r3 = 0, n5 = new Array(e1); r3 < e1; r3++)n5[r3] = t1[r3];
                return n5;
            }
            function i7(t1, e1) {
                return null == t1 ? t1 : t1 instanceof Map ? t1.get(e1) : t1[e1];
            }
            t.exports = function(t1, e1, r3) {
                var o8, s3 = false;
                if ("string" == typeof e1) {
                    if (-1 === e1.indexOf(".")) {
                        var a5 = i7(t1, e1);
                        return null == a5 ? r3 : a5;
                    }
                    o8 = e1.split(".");
                } else if (s3 = true, 1 === (o8 = e1).length) {
                    var u4 = i7(t1, o8[0]);
                    return null == u4 ? r3 : u4;
                }
                var c3, l2 = e1, f3 = t1, p2 = n3(o8);
                try {
                    for(p2.s(); !(c3 = p2.n()).done;){
                        var h = c3.value;
                        if (null == f3) return r3;
                        if (!s3 && null != f3[l2]) return f3[l2];
                        f3 = i7(f3, h), s3 || (l2 = l2.substr(h.length + 1));
                    }
                } catch (t2) {
                    p2.e(t2);
                } finally{
                    p2.f();
                }
                return null == f3 ? r3 : f3;
            };
        },
        function(t, e, r2) {
            (function(t1) {
                function n3(t2) {
                    return (n3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
                        return typeof t3;
                    } : function(t3) {
                        return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
                    })(t2);
                }
                var o3 = Object.getOwnPropertyDescriptors || function(t2) {
                    for(var e1 = Object.keys(t2), r3 = {
                    }, n5 = 0; n5 < e1.length; n5++)r3[e1[n5]] = Object.getOwnPropertyDescriptor(t2, e1[n5]);
                    return r3;
                }, i7 = /%[sdj%]/g;
                e.format = function(t2) {
                    if (!m(t2)) {
                        for(var e1 = [], r3 = 0; r3 < arguments.length; r3++)e1.push(u6(arguments[r3]));
                        return e1.join(" ");
                    }
                    r3 = 1;
                    for(var n5 = arguments, o8 = n5.length, s3 = String(t2).replace(i7, function(t3) {
                        if ("%%" === t3) return "%";
                        if (r3 >= o8) return t3;
                        switch(t3){
                            case "%s":
                                return String(n5[r3++]);
                            case "%d":
                                return Number(n5[r3++]);
                            case "%j":
                                try {
                                    return JSON.stringify(n5[r3++]);
                                } catch (t4) {
                                    return "[Circular]";
                                }
                            default:
                                return t3;
                        }
                    }), a9 = n5[r3]; r3 < o8; a9 = n5[++r3])_(a9) || !w(a9) ? s3 += " " + a9 : s3 += " " + u6(a9);
                    return s3;
                }, e.deprecate = function(r5, n5) {
                    if ((void 0) !== t1 && true === t1.noDeprecation) return r5;
                    if ((void 0) === t1) return function() {
                        return e.deprecate(r5, n5).apply(this, arguments);
                    };
                    var o8 = false;
                    return function() {
                        if (!o8) {
                            if (t1.throwDeprecation) throw new Error(n5);
                            t1.traceDeprecation ? console.trace(n5) : console.error(n5), o8 = true;
                        }
                        return r5.apply(this, arguments);
                    };
                };
                var s3, a9 = {
                };
                function u6(t2, r5) {
                    var n5 = {
                        seen: [],
                        stylize: l2
                    };
                    return arguments.length >= 3 && (n5.depth = arguments[2]), arguments.length >= 4 && (n5.colors = arguments[3]), d(r5) ? n5.showHidden = r5 : r5 && e._extend(n5, r5), g(n5.showHidden) && (n5.showHidden = false), g(n5.depth) && (n5.depth = 2), g(n5.colors) && (n5.colors = false), g(n5.customInspect) && (n5.customInspect = true), n5.colors && (n5.stylize = c3), f3(n5, t2, n5.depth);
                }
                function c3(t2, e2) {
                    var r5 = u6.styles[e2];
                    return r5 ? "[" + u6.colors[r5][0] + "m" + t2 + "[" + u6.colors[r5][1] + "m" : t2;
                }
                function l2(t2, e2) {
                    return t2;
                }
                function f3(t2, r5, n5) {
                    if (t2.customInspect && r5 && A(r5.inspect) && r5.inspect !== e.inspect && (!r5.constructor || r5.constructor.prototype !== r5)) {
                        var o8 = r5.inspect(n5, t2);
                        return m(o8) || (o8 = f3(t2, o8, n5)), o8;
                    }
                    var i8 = function(t3, e2) {
                        if (g(e2)) return t3.stylize("undefined", "undefined");
                        if (m(e2)) {
                            var r6 = "'" + JSON.stringify(e2).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                            return t3.stylize(r6, "string");
                        }
                        if (v(e2)) return t3.stylize("" + e2, "number");
                        if (d(e2)) return t3.stylize("" + e2, "boolean");
                        if (_(e2)) return t3.stylize("null", "null");
                    }(t2, r5);
                    if (i8) return i8;
                    var s7 = Object.keys(r5), a10 = function(t3) {
                        var e2 = {
                        };
                        return t3.forEach(function(t4, r7) {
                            e2[t4] = true;
                        }), e2;
                    }(s7);
                    if (t2.showHidden && (s7 = Object.getOwnPropertyNames(r5)), S(r5) && (s7.indexOf("message") >= 0 || s7.indexOf("description") >= 0)) return p2(r5);
                    if (0 === s7.length) {
                        if (A(r5)) {
                            var u7 = r5.name ? ": " + r5.name : "";
                            return t2.stylize("[Function" + u7 + "]", "special");
                        }
                        if (b(r5)) return t2.stylize(RegExp.prototype.toString.call(r5), "regexp");
                        if (O(r5)) return t2.stylize(Date.prototype.toString.call(r5), "date");
                        if (S(r5)) return p2(r5);
                    }
                    var c5, l5 = "", w = false, $ = [
                        "{",
                        "}"
                    ];
                    (y2(r5) && (w = true, $ = [
                        "[",
                        "]"
                    ]), A(r5)) && (l5 = " [Function" + (r5.name ? ": " + r5.name : "") + "]");
                    return b(r5) && (l5 = " " + RegExp.prototype.toString.call(r5)), O(r5) && (l5 = " " + Date.prototype.toUTCString.call(r5)), S(r5) && (l5 = " " + p2(r5)), 0 !== s7.length || w && 0 != r5.length ? n5 < 0 ? b(r5) ? t2.stylize(RegExp.prototype.toString.call(r5), "regexp") : t2.stylize("[Object]", "special") : (t2.seen.push(r5), c5 = w ? (function(t3, e2, r7, n6, o9) {
                        for(var i9 = [], s8 = 0, a11 = e2.length; s8 < a11; ++s8)x(e2, String(s8)) ? i9.push(h(t3, e2, r7, n6, String(s8), true)) : i9.push("");
                        return o9.forEach(function(o10) {
                            o10.match(/^\d+$/) || i9.push(h(t3, e2, r7, n6, o10, true));
                        }), i9;
                    })(t2, r5, n5, a10, s7) : s7.map(function(e2) {
                        return h(t2, r5, n5, a10, e2, w);
                    }), t2.seen.pop(), (function(t3, e2, r7) {
                        if (t3.reduce(function(t4, e3) {
                            return e3.indexOf("\n"), t4 + e3.replace(/\u001b\[\d\d?m/g, "").length + 1;
                        }, 0) > 60) return r7[0] + ("" === e2 ? "" : e2 + "\n ") + " " + t3.join(",\n  ") + " " + r7[1];
                        return r7[0] + e2 + " " + t3.join(", ") + " " + r7[1];
                    })(c5, l5, $)) : $[0] + l5 + $[1];
                }
                function p2(t2) {
                    return "[" + Error.prototype.toString.call(t2) + "]";
                }
                function h(t2, e2, r5, n5, o9, i8) {
                    var s7, a10, u8;
                    if ((u8 = Object.getOwnPropertyDescriptor(e2, o9) || {
                        value: e2[o9]
                    }).get ? a10 = u8.set ? t2.stylize("[Getter/Setter]", "special") : t2.stylize("[Getter]", "special") : u8.set && (a10 = t2.stylize("[Setter]", "special")), x(n5, o9) || (s7 = "[" + o9 + "]"), a10 || (t2.seen.indexOf(u8.value) < 0 ? (a10 = _(r5) ? f3(t2, u8.value, null) : f3(t2, u8.value, r5 - 1)).indexOf("\n") > -1 && (a10 = i8 ? a10.split("\n").map(function(t3) {
                        return "  " + t3;
                    }).join("\n").substr(2) : "\n" + a10.split("\n").map(function(t3) {
                        return "   " + t3;
                    }).join("\n")) : a10 = t2.stylize("[Circular]", "special")), g(s7)) {
                        if (i8 && o9.match(/^\d+$/)) return a10;
                        (s7 = JSON.stringify("" + o9)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s7 = s7.substr(1, s7.length - 2), s7 = t2.stylize(s7, "name")) : (s7 = s7.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s7 = t2.stylize(s7, "string"));
                    }
                    return s7 + ": " + a10;
                }
                function y2(t2) {
                    return Array.isArray(t2);
                }
                function d(t2) {
                    return "boolean" == typeof t2;
                }
                function _(t2) {
                    return null === t2;
                }
                function v(t2) {
                    return "number" == typeof t2;
                }
                function m(t2) {
                    return "string" == typeof t2;
                }
                function g(t2) {
                    return (void 0) === t2;
                }
                function b(t2) {
                    return w(t2) && "[object RegExp]" === $(t2);
                }
                function w(t2) {
                    return "object" === n3(t2) && null !== t2;
                }
                function O(t2) {
                    return w(t2) && "[object Date]" === $(t2);
                }
                function S(t2) {
                    return w(t2) && ("[object Error]" === $(t2) || t2 instanceof Error);
                }
                function A(t2) {
                    return "function" == typeof t2;
                }
                function $(t2) {
                    return Object.prototype.toString.call(t2);
                }
                function E(t2) {
                    return t2 < 10 ? "0" + t2.toString(10) : t2.toString(10);
                }
                e.debuglog = function(r5) {
                    if (g(s3) && (s3 = t1.env.NODE_DEBUG || ""), r5 = r5.toUpperCase(), !a9[r5]) {
                        if (new RegExp("\\b" + r5 + "\\b", "i").test(s3)) {
                            var n5 = t1.pid;
                            a9[r5] = function() {
                                var t2 = e.format.apply(e, arguments);
                                console.error("%s %d: %s", r5, n5, t2);
                            };
                        } else a9[r5] = function() {
                        };
                    }
                    return a9[r5];
                }, e.inspect = u6, u6.colors = {
                    bold: [
                        1,
                        22
                    ],
                    italic: [
                        3,
                        23
                    ],
                    underline: [
                        4,
                        24
                    ],
                    inverse: [
                        7,
                        27
                    ],
                    white: [
                        37,
                        39
                    ],
                    grey: [
                        90,
                        39
                    ],
                    black: [
                        30,
                        39
                    ],
                    blue: [
                        34,
                        39
                    ],
                    cyan: [
                        36,
                        39
                    ],
                    green: [
                        32,
                        39
                    ],
                    magenta: [
                        35,
                        39
                    ],
                    red: [
                        31,
                        39
                    ],
                    yellow: [
                        33,
                        39
                    ]
                }, u6.styles = {
                    special: "cyan",
                    number: "yellow",
                    boolean: "yellow",
                    undefined: "grey",
                    null: "bold",
                    string: "green",
                    date: "magenta",
                    regexp: "red"
                }, e.isArray = y2, e.isBoolean = d, e.isNull = _, e.isNullOrUndefined = function(t2) {
                    return null == t2;
                }, e.isNumber = v, e.isString = m, e.isSymbol = function(t2) {
                    return "symbol" === n3(t2);
                }, e.isUndefined = g, e.isRegExp = b, e.isObject = w, e.isDate = O, e.isError = S, e.isFunction = A, e.isPrimitive = function(t2) {
                    return null === t2 || "boolean" == typeof t2 || "number" == typeof t2 || "string" == typeof t2 || "symbol" === n3(t2) || (void 0) === t2;
                }, e.isBuffer = r2(102);
                var j = [
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Oct",
                    "Nov",
                    "Dec"
                ];
                function P() {
                    var t2 = new Date, e2 = [
                        E(t2.getHours()),
                        E(t2.getMinutes()),
                        E(t2.getSeconds())
                    ].join(":");
                    return [
                        t2.getDate(),
                        j[t2.getMonth()],
                        e2
                    ].join(" ");
                }
                function x(t2, e2) {
                    return Object.prototype.hasOwnProperty.call(t2, e2);
                }
                e.log = function() {
                    console.log("%s - %s", P(), e.format.apply(e, arguments));
                }, e.inherits = r2(103), e._extend = function(t2, e2) {
                    if (!e2 || !w(e2)) return t2;
                    for(var r5 = Object.keys(e2), n6 = r5.length; n6--;)t2[r5[n6]] = e2[r5[n6]];
                    return t2;
                };
                var T = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
                function N(t2, e2) {
                    if (!t2) {
                        var r5 = new Error("Promise was rejected with a falsy value");
                        r5.reason = t2, t2 = r5;
                    }
                    return e2(t2);
                }
                e.promisify = function(t2) {
                    if ("function" != typeof t2) throw new TypeError('The "original" argument must be of type Function');
                    if (T && t2[T]) {
                        var e2;
                        if ("function" != typeof (e2 = t2[T])) throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                        return Object.defineProperty(e2, T, {
                            value: e2,
                            enumerable: false,
                            writable: false,
                            configurable: true
                        }), e2;
                    }
                    function e2() {
                        for(var e3, r7, n6 = new Promise(function(t3, n7) {
                            e3 = t3, r7 = n7;
                        }), o9 = [], i8 = 0; i8 < arguments.length; i8++)o9.push(arguments[i8]);
                        o9.push(function(t3, n7) {
                            t3 ? r7(t3) : e3(n7);
                        });
                        try {
                            t2.apply(this, o9);
                        } catch (t3) {
                            r7(t3);
                        }
                        return n6;
                    }
                    return Object.setPrototypeOf(e2, Object.getPrototypeOf(t2)), T && Object.defineProperty(e2, T, {
                        value: e2,
                        enumerable: false,
                        writable: false,
                        configurable: true
                    }), Object.defineProperties(e2, o3(t2));
                }, e.promisify.custom = T, e.callbackify = function(e3) {
                    if ("function" != typeof e3) throw new TypeError('The "original" argument must be of type Function');
                    function r7() {
                        for(var r8 = [], n6 = 0; n6 < arguments.length; n6++)r8.push(arguments[n6]);
                        var o9 = r8.pop();
                        if ("function" != typeof o9) throw new TypeError("The last argument must be of type Function");
                        var i8 = this, s7 = function() {
                            return o9.apply(i8, arguments);
                        };
                        e3.apply(this, r8).then(function(e4) {
                            t1.nextTick(s7, null, e4);
                        }, function(e4) {
                            t1.nextTick(N, e4, s7);
                        });
                    }
                    return Object.setPrototypeOf(r7, Object.getPrototypeOf(e3)), Object.defineProperties(r7, o3(e3)), r7;
                };
            }).call(this, r2(7));
        },
        function(t, e3, r2) {
            "use strict";
            var n3 = r2(14);
            /*!
 * Module exports.
 */ t.exports = n3, n3.messages = r2(129), n3.Messages = n3.messages, n3.DocumentNotFoundError = r2(130), n3.CastError = r2(13), n3.ValidationError = r2(31), n3.ValidatorError = r2(72), n3.VersionError = r2(131), n3.ParallelSaveError = r2(132), n3.OverwriteModelError = r2(133), n3.MissingSchemaError = r2(134), n3.DivergentArrayError = r2(135), n3.StrictModeError = r2(32);
        },
        function(t, e3, r2) {
            "use strict";
            (function(n3) {
                /*!
 * Module dependencies.
 */ function o3(t1) {
                    return (o3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t2) {
                        return typeof t2;
                    } : function(t2) {
                        return t2 && "function" == typeof Symbol && t2.constructor === Symbol && t2 !== Symbol.prototype ? "symbol" : typeof t2;
                    })(t1);
                }
                var i7 = r2(5), s3 = r2(9), a9 = r2(50), u6 = r2(73), c3 = r2(3), l2 = r2(136), f3 = r2(52), p2 = r2(0).schemaTypeSymbol, h = r2(4), y2 = r2(1), d = r2(0).validatorErrorSymbol, _ = r2(0).documentIsModified, v = r2(0).populateModelSymbol, m = i7.CastError, g = i7.ValidatorError;
                function b(t1, e4, r7) {
                    this[p2] = true, this.path = t1, this.instance = r7, this.validators = [], this.getters = this.constructor.hasOwnProperty("getters") ? this.constructor.getters.slice() : [], this.setters = [], e4 = e4 || {
                    };
                    for(var n6 = this.constructor.defaultOptions || {
                    }, i8 = 0, a10 = Object.keys(n6); i8 < a10.length; i8++){
                        var u8 = a10[i8];
                        n6.hasOwnProperty(u8) && !e4.hasOwnProperty(u8) && (e4[u8] = n6[u8]);
                    }
                    null == e4.select && delete e4.select;
                    var c5 = this.OptionsConstructor || s3;
                    this.options = new c5(e4), this._index = null, y2.hasUserDefinedProperty(this.options, "immutable") && (this.$immutable = this.options.immutable, l2(this));
                    for(var f6 = 0, h1 = Object.keys(this.options); f6 < h1.length; f6++){
                        var d1 = h1[f6];
                        if ("cast" !== d1) {
                            if (y2.hasUserDefinedProperty(this.options, d1) && "function" == typeof this[d1]) {
                                if ("index" === d1 && this._index) {
                                    if (false === e4.index) {
                                        var _1 = this._index;
                                        if ("object" === o3(_1) && null != _1) {
                                            if (_1.unique) throw new Error('Path "' + this.path + '" may not have `index` set to false and `unique` set to true');
                                            if (_1.sparse) throw new Error('Path "' + this.path + '" may not have `index` set to false and `sparse` set to true');
                                        }
                                        this._index = false;
                                    }
                                    continue;
                                }
                                var v1 = e4[d1];
                                if ("default" === d1) {
                                    this.default(v1);
                                    continue;
                                }
                                var m1 = Array.isArray(v1) ? v1 : [
                                    v1
                                ];
                                this[d1].apply(this, m1);
                            }
                        } else this.castFunction(this.options[d1]);
                    }
                    Object.defineProperty(this, "$$context", {
                        enumerable: false,
                        configurable: false,
                        writable: true,
                        value: null
                    });
                }
                /*!
 * The class that Mongoose uses internally to instantiate this SchemaType's `options` property.
 */ b.prototype.OptionsConstructor = s3, b.cast = function(t1) {
                    return 0 === arguments.length || (false === t1 && (t1 = function(t2) {
                        return t2;
                    }), this._cast = t1), this._cast;
                }, b.prototype.castFunction = function(t1) {
                    return 0 === arguments.length || (false === t1 && (t1 = this.constructor._defaultCaster || function(t2) {
                        return t2;
                    }), this._castFunction = t1), this._castFunction;
                }, b.prototype.cast = function() {
                    throw new Error("Base SchemaType class does not implement a `cast()` function");
                }, b.set = function(t1, e4) {
                    this.hasOwnProperty("defaultOptions") || (this.defaultOptions = Object.assign({
                    }, this.defaultOptions)), this.defaultOptions[t1] = e4;
                }, b.get = function(t1) {
                    this.getters = this.hasOwnProperty("getters") ? this.getters : [], this.getters.push(t1);
                }, b.prototype.default = function(t1) {
                    if (1 === arguments.length) {
                        if ((void 0) === t1) return void (this.defaultValue = void 0);
                        if (null != t1 && t1.instanceOfSchema) throw new i7("Cannot set default value of path `" + this.path + "` to a mongoose Schema instance.");
                        return this.defaultValue = t1, this.defaultValue;
                    }
                    return arguments.length > 1 && (this.defaultValue = y2.args(arguments)), this.defaultValue;
                }, b.prototype.index = function(t1) {
                    return this._index = t1, y2.expires(this._index), this;
                }, b.prototype.unique = function(t1) {
                    if (false === this._index) {
                        if (!t1) return;
                        throw new Error('Path "' + this.path + '" may not have `index` set to false and `unique` set to true');
                    }
                    return null == this._index || true === this._index ? this._index = {
                    } : "string" == typeof this._index && (this._index = {
                        type: this._index
                    }), this._index.unique = t1, this;
                }, b.prototype.text = function(t1) {
                    if (false === this._index) {
                        if (!t1) return;
                        throw new Error('Path "' + this.path + '" may not have `index` set to false and `text` set to true');
                    }
                    return null === this._index || (void 0) === this._index || "boolean" == typeof this._index ? this._index = {
                    } : "string" == typeof this._index && (this._index = {
                        type: this._index
                    }), this._index.text = t1, this;
                }, b.prototype.sparse = function(t1) {
                    if (false === this._index) {
                        if (!t1) return;
                        throw new Error('Path "' + this.path + '" may not have `index` set to false and `sparse` set to true');
                    }
                    return null == this._index || "boolean" == typeof this._index ? this._index = {
                    } : "string" == typeof this._index && (this._index = {
                        type: this._index
                    }), this._index.sparse = t1, this;
                }, b.prototype.immutable = function(t1) {
                    return this.$immutable = t1, l2(this), this;
                }, b.prototype.transform = function(t1) {
                    return this.options.transform = t1, this;
                }, b.prototype.set = function(t1) {
                    if ("function" != typeof t1) throw new TypeError("A setter must be a function.");
                    return this.setters.push(t1), this;
                }, b.prototype.get = function(t1) {
                    if ("function" != typeof t1) throw new TypeError("A getter must be a function.");
                    return this.getters.push(t1), this;
                }, b.prototype.validate = function(t1, e4, r7) {
                    var n6, s7, a10, u9;
                    if ("function" == typeof t1 || t1 && "RegExp" === y2.getFunctionName(t1.constructor)) return "function" == typeof e4 ? (n6 = {
                        validator: t1,
                        message: e4
                    }).type = r7 || "user defined" : e4 instanceof Object && !r7 ? ((n6 = y2.clone(e4)).message || (n6.message = n6.msg), n6.validator = t1, n6.type = n6.type || "user defined") : (null == e4 && (e4 = i7.messages.general.default), r7 || (r7 = "user defined"), n6 = {
                        message: e4,
                        type: r7,
                        validator: t1
                    }), n6.isAsync && w(), this.validators.push(n6), this;
                    for(s7 = 0, a10 = arguments.length; s7 < a10; s7++){
                        if (u9 = arguments[s7], !y2.isPOJO(u9)) {
                            var c5 = "Invalid validator. Received (" + o3(u9) + ") " + u9 + ". See http://mongoosejs.com/docs/api.html#schematype_SchemaType-validate";
                            throw new Error(c5);
                        }
                        this.validate(u9.validator, u9);
                    }
                    return this;
                };
                /*!
 * ignore
 */ var w = h.deprecate(function() {
                }, "Mongoose: the `isAsync` option for custom validators is deprecated. Make your async validators return a promise instead: https://mongoosejs.com/docs/validation.html#async-custom-validators");
                /*!
 * ignore
 */ function O(t1) {
                    return this.castForQuery(t1);
                }
                /*!
 * ignore
 */ /*!
 * Just like handleArray, except also allows `[]` because surprisingly
 * `$in: [1, []]` works fine
 */ function S(t1) {
                    var e4 = this;
                    return Array.isArray(t1) ? t1.map(function(t2) {
                        return Array.isArray(t2) && 0 === t2.length ? t2 : e4.castForQuery(t2);
                    }) : [
                        this.castForQuery(t1)
                    ];
                }
                /*!
 * ignore
 */ b.prototype.required = function(t1, e4) {
                    var r7 = {
                    };
                    if (arguments.length > 0 && null == t1) return this.validators = this.validators.filter(function(t2) {
                        return t2.validator !== this.requiredValidator;
                    }, this), this.isRequired = false, delete this.originalRequiredValue, this;
                    if ("object" === o3(t1) && (e4 = (r7 = t1).message || e4, t1 = t1.isRequired), false === t1) return this.validators = this.validators.filter(function(t2) {
                        return t2.validator !== this.requiredValidator;
                    }, this), this.isRequired = false, delete this.originalRequiredValue, this;
                    var n6 = this;
                    this.isRequired = true, this.requiredValidator = function(e5) {
                        var r8 = c3(this, "$__.cachedRequired");
                        if (null != r8 && !this.$__isSelected(n6.path) && !this[_](n6.path)) return true;
                        if (null != r8 && n6.path in r8) {
                            var o9 = !r8[n6.path] || n6.checkRequired(e5, this);
                            return delete r8[n6.path], o9;
                        }
                        return "function" == typeof t1 && !t1.apply(this) || n6.checkRequired(e5, this);
                    }, this.originalRequiredValue = t1, "string" == typeof t1 && (e4 = t1, t1 = void 0);
                    var s7 = e4 || i7.messages.general.required;
                    return this.validators.unshift(Object.assign({
                    }, r7, {
                        validator: this.requiredValidator,
                        message: s7,
                        type: "required"
                    })), this;
                }, b.prototype.ref = function(t1) {
                    return this.options.ref = t1, this;
                }, b.prototype.getDefault = function(t1, e4) {
                    var r7 = "function" == typeof this.defaultValue ? this.defaultValue.call(t1) : this.defaultValue;
                    if (null != r7) {
                        "object" !== o3(r7) || this.options && this.options.shared || (r7 = y2.clone(r7));
                        var n6 = this.applySetters(r7, t1, e4);
                        return n6 && n6.$isSingleNested && (n6.$__parent = t1), n6;
                    }
                    return r7;
                }, /*!
 * Applies setters without casting
 *
 * @api private
 */ b.prototype._applySetters = function(t1, e4, r7) {
                    var n7 = t1;
                    if (r7) return n7;
                    for(var o10 = this.setters, i8 = o10.length - 1; i8 >= 0; i8--)n7 = o10[i8].call(e4, n7, this);
                    return n7;
                }, /*!
 * ignore
 */ b.prototype._castNullish = function(t1) {
                    return t1;
                }, b.prototype.applySetters = function(t1, e4, r7, n7, o10) {
                    var i8 = this._applySetters(t1, e4, r7, n7, o10);
                    return null == i8 ? this._castNullish(i8) : i8 = this.cast(i8, e4, r7, n7, o10);
                }, b.prototype.applyGetters = function(t1, e4) {
                    var r7 = t1, n7 = this.getters, o10 = n7.length;
                    if (0 === o10) return r7;
                    for(var i8 = 0; i8 < o10; ++i8)r7 = n7[i8].call(e4, r7, this);
                    return r7;
                }, b.prototype.select = function(t1) {
                    return this.selected = !!t1, this;
                }, b.prototype.doValidate = function(t1, e4, r7, n7) {
                    var i8 = false, s7 = this.path, a10 = this.validators.filter(function(t2) {
                        return null != t2 && "object" === o3(t2);
                    }), u9 = a10.length;
                    if (!u9) return e4(null);
                    var c6 = this;
                    function l5(t2, r8) {
                        if (!i8) {
                            if ((void 0) === t2 || t2) (--u9) <= 0 && f3(function() {
                                e4(null);
                            });
                            else {
                                var n8 = r8.ErrorConstructor || g;
                                (i8 = new n8(r8))[d] = true, f3(function() {
                                    e4(i8);
                                });
                            }
                        }
                    }
                    a10.forEach(function(e5) {
                        if (!i8) {
                            var o10, a11 = e5.validator, u10 = y2.clone(e5);
                            if (u10.path = n7 && n7.path ? n7.path : s7, u10.value = t1, a11 instanceof RegExp) l5(a11.test(t1), u10);
                            else if ("function" == typeof a11) {
                                if ((void 0) !== t1 || a11 === c6.requiredValidator) {
                                    if (u10.isAsync) /*!
 * Handle async validators
 */ (function(t2, e6, r8, n9, o11) {
                                        var i9 = false, s8 = t2.call(e6, r8, function(t3, e7) {
                                            i9 || (i9 = true, e7 && (n9.message = e7), o11(t3, n9));
                                        });
                                        "boolean" == typeof s8 ? (i9 = true, o11(s8, n9)) : s8 && "function" == typeof s8.then && s8.then(function(t3) {
                                            i9 || (i9 = true, o11(t3, n9));
                                        }, function(t3) {
                                            i9 || (i9 = true, n9.reason = t3, n9.message = t3.message, o11(false, n9));
                                        });
                                    })(a11, r7, t1, u10, l5);
                                    else {
                                        try {
                                            o10 = u10.propsParameter ? a11.call(r7, t1, u10) : a11.call(r7, t1);
                                        } catch (t2) {
                                            o10 = false, u10.reason = t2, t2.message && (u10.message = t2.message);
                                        }
                                        null != o10 && "function" == typeof o10.then ? o10.then(function(t2) {
                                            l5(t2, u10);
                                        }, function(t2) {
                                            u10.reason = t2, u10.message = t2.message, l5(o10 = false, u10);
                                        }) : l5(o10, u10);
                                    }
                                } else l5(true, u10);
                            }
                        }
                    });
                }, b.prototype.doValidateSync = function(t1, e4, r7) {
                    var n7 = this.path;
                    if (!this.validators.length) return null;
                    var i8 = this.validators;
                    if ((void 0) === t1) {
                        if (!(this.validators.length > 0 && "required" === this.validators[0].type)) return null;
                        i8 = [
                            this.validators[0]
                        ];
                    }
                    var s7 = null;
                    function a10(t2, e5) {
                        if (!s7 && (void 0) !== t2 && !t2) {
                            var r8 = e5.ErrorConstructor || g;
                            (s7 = new r8(e5))[d] = true;
                        }
                    }
                    return i8.forEach(function(i9) {
                        if (!s7 && null != i9 && "object" === o3(i9)) {
                            var u9, c6 = i9.validator, l5 = y2.clone(i9);
                            if (l5.path = r7 && r7.path ? r7.path : n7, l5.value = t1, !c6.isAsync) {
                                if (c6 instanceof RegExp) a10(c6.test(t1), l5);
                                else if ("function" == typeof c6) {
                                    try {
                                        u9 = l5.propsParameter ? c6.call(e4, t1, l5) : c6.call(e4, t1);
                                    } catch (t2) {
                                        u9 = false, l5.reason = t2;
                                    }
                                    null != u9 && "function" == typeof u9.then || a10(u9, l5);
                                }
                            }
                        }
                    }), s7;
                }, b._isRef = function(t1, e4, r7, o11) {
                    var i8 = o11 && t1.options && (t1.options.ref || t1.options.refPath);
                    if (!i8 && r7 && null != r7.$__) {
                        var s7 = r7.$__fullPath(t1.path);
                        i8 = (r7.ownerDocument ? r7.ownerDocument() : r7).populated(s7) || r7.populated(t1.path);
                    }
                    return !!i8 && (null == e4 || !(n3.isBuffer(e4) || "Binary" === e4._bsontype || !y2.isObject(e4)) || o11);
                }, /*!
 * ignore
 */ b.prototype._castRef = function(t1, e4, r7) {
                    if (null == t1) return t1;
                    if (null != t1.$__) return t1.$__.wasPopulated = true, t1;
                    if (n3.isBuffer(t1) || !y2.isObject(t1)) {
                        if (r7) return t1;
                        throw new m(this.instance, t1, this.path, null, this);
                    }
                    var o11 = e4.$__fullPath(this.path), i8 = (e4.ownerDocument ? e4.ownerDocument() : e4).populated(o11, true), s8 = t1;
                    return e4.$__.populated && e4.$__.populated[o11] && e4.$__.populated[o11].options && e4.$__.populated[o11].options.options && e4.$__.populated[o11].options.options.lean || ((s8 = new i8.options[v](t1)).$__.wasPopulated = true), s8;
                }, b.prototype.$conditionalHandlers = {
                    $all: function(t1) {
                        var e4 = this;
                        return Array.isArray(t1) ? t1.map(function(t2) {
                            return e4.castForQuery(t2);
                        }) : [
                            this.castForQuery(t1)
                        ];
                    },
                    $eq: O,
                    $in: S,
                    $ne: O,
                    $nin: S,
                    $exists: a9,
                    $type: u6
                }, /*!
 * Wraps `castForQuery` to handle context
 */ b.prototype.castForQueryWrapper = function(t1) {
                    if (this.$$context = t1.context, "$conditional" in t1) {
                        var e4 = this.castForQuery(t1.$conditional, t1.val);
                        return this.$$context = null, e4;
                    }
                    if (t1.$skipQueryCastForUpdate || t1.$applySetters) {
                        var r7 = this._castForQuery(t1.val);
                        return this.$$context = null, r7;
                    }
                    var n7 = this.castForQuery(t1.val);
                    return this.$$context = null, n7;
                }, b.prototype.castForQuery = function(t1, e5) {
                    var r9;
                    if (2 === arguments.length) {
                        if (!(r9 = this.$conditionalHandlers[t1])) throw new Error("Can't use " + t1);
                        return r9.call(this, e5);
                    }
                    return e5 = t1, this._castForQuery(e5);
                }, /*!
 * Internal switch for runSetters
 *
 * @api private
 */ b.prototype._castForQuery = function(t1) {
                    return this.applySetters(t1, this.$$context);
                }, b.checkRequired = function(t1) {
                    return arguments.length > 0 && (this._checkRequired = t1), this._checkRequired;
                }, b.prototype.checkRequired = function(t1) {
                    return null != t1;
                }, /*!
 * ignore
 */ b.prototype.clone = function() {
                    var t1 = Object.assign({
                    }, this.options), e5 = new this.constructor(this.path, t1, this.instance);
                    return e5.validators = this.validators.slice(), (void 0) !== this.requiredValidator && (e5.requiredValidator = this.requiredValidator), (void 0) !== this.defaultValue && (e5.defaultValue = this.defaultValue), (void 0) !== this.$immutable && (void 0) === this.options.immutable && (e5.$immutable = this.$immutable, l2(e5)), (void 0) !== this._index && (e5._index = this._index), (void 0) !== this.selected && (e5.selected = this.selected), (void 0) !== this.isRequired && (e5.isRequired = this.isRequired), (void 0) !== this.originalRequiredValue && (e5.originalRequiredValue = this.originalRequiredValue), e5.getters = this.getters.slice(), e5.setters = this.setters.slice(), e5;
                }, /*!
 * Module exports.
 */ t.exports = e3 = b, e3.CastError = m, e3.ValidatorError = g;
            }).call(this, r2(2).Buffer);
        },
        function(t, e3) {
            var r2, n3, o3 = t.exports = {
            };
            function i7() {
                throw new Error("setTimeout has not been defined");
            }
            function s3() {
                throw new Error("clearTimeout has not been defined");
            }
            function a9(t1) {
                if (r2 === setTimeout) return setTimeout(t1, 0);
                if ((r2 === i7 || !r2) && setTimeout) return r2 = setTimeout, setTimeout(t1, 0);
                try {
                    return r2(t1, 0);
                } catch (e5) {
                    try {
                        return r2.call(null, t1, 0);
                    } catch (e6) {
                        return r2.call(this, t1, 0);
                    }
                }
            }
            (function() {
                try {
                    r2 = "function" == typeof setTimeout ? setTimeout : i7;
                } catch (t1) {
                    r2 = i7;
                }
                try {
                    n3 = "function" == typeof clearTimeout ? clearTimeout : s3;
                } catch (t1) {
                    n3 = s3;
                }
            })();
            var u6, c3 = [], l2 = false, f3 = -1;
            function p2() {
                l2 && u6 && (l2 = false, u6.length ? c3 = u6.concat(c3) : f3 = -1, c3.length && h());
            }
            function h() {
                if (!l2) {
                    var t1 = a9(p2);
                    l2 = true;
                    for(var e5 = c3.length; e5;){
                        for(u6 = c3, c3 = []; (++f3) < e5;)u6 && u6[f3].run();
                        f3 = -1, e5 = c3.length;
                    }
                    u6 = null, l2 = false, (function(t2) {
                        if (n3 === clearTimeout) return clearTimeout(t2);
                        if ((n3 === s3 || !n3) && clearTimeout) return n3 = clearTimeout, clearTimeout(t2);
                        try {
                            n3(t2);
                        } catch (e6) {
                            try {
                                return n3.call(null, t2);
                            } catch (e7) {
                                return n3.call(this, t2);
                            }
                        }
                    })(t1);
                }
            }
            function y2(t2, e6) {
                this.fun = t2, this.array = e6;
            }
            function d2() {
            }
            o3.nextTick = function(t2) {
                var e6 = new Array(arguments.length - 1);
                if (arguments.length > 1) for(var r9 = 1; r9 < arguments.length; r9++)e6[r9 - 1] = arguments[r9];
                c3.push(new y2(t2, e6)), 1 !== c3.length || l2 || a9(h);
            }, y2.prototype.run = function() {
                this.fun.apply(null, this.array);
            }, o3.title = "browser", o3.browser = true, o3.env = {
            }, o3.argv = [], o3.version = "", o3.versions = {
            }, o3.on = d2, o3.addListener = d2, o3.once = d2, o3.off = d2, o3.removeListener = d2, o3.removeAllListeners = d2, o3.emit = d2, o3.prependListener = d2, o3.prependOnceListener = d2, o3.listeners = function(t2) {
                return [];
            }, o3.binding = function(t2) {
                throw new Error("process.binding is not supported");
            }, o3.cwd = function() {
                return "/";
            }, o3.chdir = function(t2) {
                throw new Error("process.chdir is not supported");
            }, o3.umask = function() {
                return 0;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n3 = r2(15).get().ObjectId, o3 = r2(0).objectIdSymbol;
            /*!
 * Getter for convenience with populate, see gh-6115
 */ Object.defineProperty(n3.prototype, "_id", {
                enumerable: false,
                configurable: true,
                get: function() {
                    return this;
                }
            }), n3.prototype[o3] = true, t2.exports = n3;
        },
        function(t2, e3, r2) {
            "use strict";
            var n3 = r2(28), o3 = function t3(e6) {
                if ((function(t4, e7) {
                    if (!(t4 instanceof e7)) throw new TypeError("Cannot call a class as a function");
                })(this, t3), null == e6) return this;
                Object.assign(this, n3(e6));
            }, i7 = r2(10);
            Object.defineProperty(o3.prototype, "type", i7), Object.defineProperty(o3.prototype, "validate", i7), Object.defineProperty(o3.prototype, "cast", i7), Object.defineProperty(o3.prototype, "required", i7), Object.defineProperty(o3.prototype, "default", i7), Object.defineProperty(o3.prototype, "ref", i7), Object.defineProperty(o3.prototype, "select", i7), Object.defineProperty(o3.prototype, "index", i7), Object.defineProperty(o3.prototype, "unique", i7), Object.defineProperty(o3.prototype, "immutable", i7), Object.defineProperty(o3.prototype, "sparse", i7), Object.defineProperty(o3.prototype, "text", i7), Object.defineProperty(o3.prototype, "transform", i7), t2.exports = o3;
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = Object.freeze({
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
        },
        function(t2, e3) {
            function r2(t3) {
                return (r2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
                    return typeof t4;
                } : function(t4) {
                    return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
                })(t3);
            }
            var n3;
            n3 = (function() {
                return this;
            })();
            try {
                n3 = n3 || new Function("return this")();
            } catch (t3) {
                "object" === ("undefined" == typeof window ? "undefined" : r2(window)) && (n3 = window);
            }
            t2.exports = n3;
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e6, n3) {
                /*!
 * Module dependencies.
 */ function o3(t3, e7, r9) {
                    return e7 in t3 ? Object.defineProperty(t3, e7, {
                        value: r9,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    }) : t3[e7] = r9, t3;
                }
                function i7(t3, e7) {
                    var r9 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
                    if (!r9) {
                        if (Array.isArray(t3) || (r9 = (function(t4, e8) {
                            if (!t4) return;
                            if ("string" == typeof t4) return s3(t4, e8);
                            var r10 = Object.prototype.toString.call(t4).slice(8, -1);
                            "Object" === r10 && t4.constructor && (r10 = t4.constructor.name);
                            if ("Map" === r10 || "Set" === r10) return Array.from(t4);
                            if ("Arguments" === r10 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r10)) return s3(t4, e8);
                        })(t3)) || e7 && t3 && "number" == typeof t3.length) {
                            r9 && (t3 = r9);
                            var n7 = 0, o11 = function() {
                            };
                            return {
                                s: o11,
                                n: function() {
                                    return n7 >= t3.length ? {
                                        done: true
                                    } : {
                                        done: false,
                                        value: t3[n7++]
                                    };
                                },
                                e: function(t4) {
                                    throw t4;
                                },
                                f: o11
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var i8, a9 = true, u6 = false;
                    return {
                        s: function() {
                            r9 = r9.call(t3);
                        },
                        n: function() {
                            var t4 = r9.next();
                            return a9 = t4.done, t4;
                        },
                        e: function(t4) {
                            u6 = true, i8 = t4;
                        },
                        f: function() {
                            try {
                                a9 || null == r9.return || r9.return();
                            } finally{
                                if (u6) throw i8;
                            }
                        }
                    };
                }
                function s3(t3, e7) {
                    (null == e7 || e7 > t3.length) && (e7 = t3.length);
                    for(var r9 = 0, n9 = new Array(e7); r9 < e7; r9++)n9[r9] = t3[r9];
                    return n9;
                }
                function a9(t3) {
                    return (a9 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
                        return typeof t4;
                    } : function(t4) {
                        return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
                    })(t3);
                }
                var u6, c3, l2, f3 = r2(19).EventEmitter, p2 = r2(111), h = r2(5), y2 = r2(25), d2 = r2(74), _2 = r2(137), v2 = r2(138), m2 = r2(53), g = r2(32), b = r2(31), w = r2(72), O = r2(54), S = r2(24), A = r2(86), $ = r2(57).compile, E = r2(57).defineKey, j = r2(173).flatten, P = r2(3), x = r2(174), T = r2(90), N = r2(175), k = r2(58), B = r2(176), R = r2(4).inspect, C = r2(17).internalToObjectOptions, D = r2(48), M = r2(177), I = r2(1), F = r2(179), L = I.clone, U = I.deepEqual, V = I.isMongooseObject, q = Symbol("mongoose.Array#atomicsBackup"), W = r2(0).arrayAtomicsSymbol, H = r2(0).documentArrayParent, Y = r2(0).documentIsModified, K = r2(0).documentModifiedPaths, z = r2(0).documentSchemaSymbol, Q = r2(0).getSymbol, J = r2(0).populateModelSymbol, G = r2(0).scopeSymbol, X = r2(33).schemaMixedSymbol, Z = I.specialProperties;
                function tt(t3, e7, r9, n9) {
                    var o12 = this;
                    "object" === a9(r9) && null != r9 && (r9 = (n9 = r9).skipId), n9 = Object.assign({
                    }, n9);
                    var s8 = P(n9, "defaults", true);
                    if (n9.defaults = s8, null == this.$__schema) {
                        var u11 = I.isObject(e7) && !e7.instanceOfSchema ? new m2(e7) : e7;
                        this.$__setSchema(u11), e7 = r9, r9 = n9, n9 = arguments[4] || {
                        };
                    }
                    if (this.$__ = new p2, this.$__.emitter = new f3, this.isNew = !("isNew" in n9) || n9.isNew, this.errors = void 0, this.$__.$options = n9 || {
                    }, this.$locals = {
                    }, this.$op = null, null != t3 && "object" !== a9(t3)) throw new _2(t3, "obj", "Document");
                    var c7 = this.$__schema;
                    "boolean" == typeof e7 || "throw" === e7 ? (this.$__.strictMode = e7, e7 = void 0) : (this.$__.strictMode = c7.options.strict, this.$__.selected = e7);
                    var l6, h1 = c7.requiredPaths(true), y3 = i7(h1);
                    try {
                        for(y3.s(); !(l6 = y3.n()).done;){
                            var d3 = l6.value;
                            this.$__.activePaths.undefined(d3);
                        }
                    } catch (t4) {
                        y3.e(t4);
                    } finally{
                        y3.f();
                    }
                    this.$__.emitter.setMaxListeners(0);
                    var v3 = null;
                    I.isPOJO(e7) && (v3 = B(e7));
                    var g1 = false === v3 && e7 ? rt(e7) : {
                    };
                    if (null == this._doc && (this.$__buildDoc(t3, e7, r9, v3, g1, false), s8 && nt(this, e7, r9, v3, g1, true, {
                        isNew: this.isNew
                    })), t3 && (this.$__original_set ? this.$__original_set(t3, void 0, true) : this.$set(t3, void 0, true), t3 instanceof tt && (this.isNew = t3.isNew)), n9.willInit && s8 ? f3.prototype.once.call(this, "init", function() {
                        nt(o12, e7, r9, v3, g1, false, n9.skipDefaults, o12.isNew);
                    }) : s8 && nt(this, e7, r9, v3, g1, false, n9.skipDefaults, this.isNew), this.$__._id = this._id, !this.$__.strictMode && t3) {
                        var b1 = this, w1 = Object.keys(this._doc);
                        w1.forEach(function(t4) {
                            t4 in c7.tree || E(t4, null, b1);
                        });
                    }
                    at(this);
                }
                /*!
 * Document exposes the NodeJS event emitter API, so you can use
 * `on`, `once`, etc.
 */ for(var et in I.each([
                    "on",
                    "once",
                    "emit",
                    "listeners",
                    "removeListener",
                    "setMaxListeners",
                    "removeAllListeners",
                    "addListener"
                ], function(t3) {
                    tt.prototype[t3] = function() {
                        return this.$__.emitter[t3].apply(this.$__.emitter, arguments);
                    };
                }), tt.prototype.constructor = tt, f3.prototype)tt[et] = f3.prototype[et];
                /*!
 * ignore
 */ function rt(t3) {
                    for(var e7 = {
                    }, r9 = 0, n9 = Object.keys(t3); r9 < n9.length; r9++){
                        var o12, s8 = [], a10 = i7(n9[r9].split("."));
                        try {
                            for(a10.s(); !(o12 = a10.n()).done;){
                                var u12 = o12.value;
                                s8.push(u12), e7[s8.join(".")] = 1;
                            }
                        } catch (t4) {
                            a10.e(t4);
                        } finally{
                            a10.f();
                        }
                    }
                    return e7;
                }
                /*!
 * ignore
 */ function nt(t3, e7, r9, n9, o13, i8, s9) {
                    for(var a12 = Object.keys(t3.$__schema.paths), u13 = a12.length, c7 = 0; c7 < u13; ++c7){
                        var l6 = void 0, f6 = "", p4 = a12[c7];
                        if ("_id" !== p4 || !r9) for(var h1 = t3.$__schema.paths[p4], y3 = -1 === p4.indexOf(".") ? [
                            p4
                        ] : p4.split("."), d4 = y3.length, _3 = false, v3 = t3._doc, m3 = 0; m3 < d4 && null != v3; ++m3){
                            var g1 = y3[m3];
                            if (f6 += (f6.length ? "." : "") + g1, true === n9) {
                                if (f6 in e7) break;
                            } else if (false === n9 && e7 && !_3) {
                                if (f6 in e7) _3 = true;
                                else if (!o13[f6]) break;
                            }
                            if (m3 === d4 - 1) {
                                if ((void 0) !== v3[g1]) break;
                                if ("function" == typeof h1.defaultValue) {
                                    if (!h1.defaultValue.$runBeforeSetters && i8) break;
                                    if (h1.defaultValue.$runBeforeSetters && !i8) break;
                                } else if (!i8) continue;
                                if (s9 && s9[f6]) break;
                                if (e7 && null !== n9) {
                                    if (true === n9) {
                                        if (p4 in e7) continue;
                                        try {
                                            l6 = h1.getDefault(t3, false);
                                        } catch (e8) {
                                            t3.invalidate(p4, e8);
                                            break;
                                        }
                                        (void 0) !== l6 && (v3[g1] = l6, t3.$__.activePaths.default(p4));
                                    } else if (_3) {
                                        try {
                                            l6 = h1.getDefault(t3, false);
                                        } catch (e8) {
                                            t3.invalidate(p4, e8);
                                            break;
                                        }
                                        (void 0) !== l6 && (v3[g1] = l6, t3.$__.activePaths.default(p4));
                                    }
                                } else {
                                    try {
                                        l6 = h1.getDefault(t3, false);
                                    } catch (e8) {
                                        t3.invalidate(p4, e8);
                                        break;
                                    }
                                    (void 0) !== l6 && (v3[g1] = l6, t3.$__.activePaths.default(p4));
                                }
                            } else v3 = v3[g1];
                        }
                    }
                }
                function ot(t3) {
                    if (null == t3) return true;
                    if ("object" !== a9(t3) || Array.isArray(t3)) return false;
                    for(var e7 = 0, r9 = Object.keys(t3); e7 < r9.length; e7++){
                        if (!ot(t3[r9[e7]])) return false;
                    }
                    return true;
                }
                /*!
 * ignore
 */ function it(t3) {
                    var e7 = {
                    };
                    /*!
 * ignore
 */ (function(t4) {
                        Object.keys(t4.$__.activePaths.states.undefined).forEach(function(e8) {
                            var r9 = t4.$__schema.path(e8);
                            null != r9 && "function" == typeof r9.originalRequiredValue && (t4.$__.cachedRequired[e8] = r9.originalRequiredValue.call(t4, t4));
                        });
                    })(t3);
                    var r9 = new Set(Object.keys(t3.$__.activePaths.states.undefined).filter(function(e8) {
                        return !(!t3.$__isSelected(e8) && !t3.isModified(e8)) && (!(e8 in t3.$__.cachedRequired) || t3.$__.cachedRequired[e8]);
                    }));
                    function n9(t4) {
                        r9.add(t4);
                    }
                    Object.keys(t3.$__.activePaths.states.init).forEach(n9), Object.keys(t3.$__.activePaths.states.modify).forEach(n9), Object.keys(t3.$__.activePaths.states.default).forEach(n9);
                    var o13, s9 = t3.$getAllSubdocs(), a12 = t3.modifiedPaths(), u13 = i7(s9);
                    try {
                        for(u13.s(); !(o13 = u13.n()).done;){
                            var c7 = o13.value;
                            if (c7.$basePath) {
                                var l7, f7 = i7(r9);
                                try {
                                    for(f7.s(); !(l7 = f7.n()).done;){
                                        var p5 = l7.value;
                                        (null === p5 || p5.startsWith(c7.$basePath + ".")) && r9.delete(p5);
                                    }
                                } catch (t4) {
                                    f7.e(t4);
                                } finally{
                                    f7.f();
                                }
                                !t3.isModified(c7.$basePath, a12) || t3.isDirectModified(c7.$basePath) || t3.$isDefault(c7.$basePath) || (r9.add(c7.$basePath), e7[c7.$basePath] = true);
                            }
                        }
                    } catch (t4) {
                        u13.e(t4);
                    } finally{
                        u13.f();
                    }
                    var h2, y4 = i7(r9);
                    try {
                        for(y4.s(); !(h2 = y4.n()).done;){
                            var d5 = h2.value, _4 = t3.$__schema.path(d5);
                            if (_4 && _4.$isMongooseArray && (!_4.$isMongooseDocumentArray || P(_4, "schemaOptions.required"))) v4(t3.$__getValue(d5), r9, d5);
                        }
                    } catch (t4) {
                        y4.e(t4);
                    } finally{
                        y4.f();
                    }
                    function v4(t4, e8, r10) {
                        if (null != t4) for(var n10 = t4.length, o14 = 0; o14 < n10; ++o14)Array.isArray(t4[o14]) ? v4(t4[o14], e8, r10 + "." + o14) : e8.add(r10 + "." + o14);
                    }
                    var m4, g2 = {
                        skipArrays: true
                    }, b2 = i7(r9);
                    try {
                        for(b2.s(); !(m4 = b2.n()).done;){
                            var w2 = m4.value;
                            if (t3.$__schema.nested[w2]) {
                                var O1 = t3.$__getValue(w2);
                                V(O1) && (O1 = O1.toObject({
                                    transform: false
                                }));
                                var S1 = j(O1, w2, g2, t3.$__schema);
                                Object.keys(S1).forEach(n9);
                            }
                        }
                    } catch (t4) {
                        b2.e(t4);
                    } finally{
                        b2.f();
                    }
                    var A1, $1 = i7(r9);
                    try {
                        for($1.s(); !(A1 = $1.n()).done;){
                            var E1 = A1.value;
                            if (t3.$__schema.singleNestedPaths.hasOwnProperty(E1)) r9.delete(E1);
                            else {
                                var x1 = t3.$__schema.path(E1);
                                if (x1 && x1.$isSchemaMap) {
                                    var T1 = t3.$__getValue(E1);
                                    if (null != T1) {
                                        var N1, k1 = i7(T1.keys());
                                        try {
                                            for(k1.s(); !(N1 = k1.n()).done;){
                                                var B1 = N1.value;
                                                r9.add(E1 + "." + B1);
                                            }
                                        } catch (t4) {
                                            k1.e(t4);
                                        } finally{
                                            k1.f();
                                        }
                                    }
                                }
                            }
                        }
                    } catch (t4) {
                        $1.e(t4);
                    } finally{
                        $1.f();
                    }
                    return [
                        r9 = Array.from(r9),
                        e7
                    ];
                }
                /*!
 * ignore
 */ /*!
 * ignore
 */ function st(t3, e7) {
                    var r9, n9 = new Set(e7), o13 = new Map([]), s9 = i7(e7);
                    try {
                        for(s9.s(); !(r9 = s9.n()).done;){
                            var a12 = r9.value;
                            if (-1 !== a12.indexOf(".")) for(var u13 = a12.split("."), c8 = u13[0], l8 = 1; l8 < u13.length; ++l8)o13.set(c8, a12), c8 = c8 + "." + u13[l8];
                        }
                    } catch (t4) {
                        s9.e(t4);
                    } finally{
                        s9.f();
                    }
                    var f8, p6 = [], h2 = i7(t3);
                    try {
                        for(h2.s(); !(f8 = h2.n()).done;){
                            var y4 = f8.value;
                            n9.has(y4) ? p6.push(y4) : o13.has(y4) && p6.push(o13.get(y4));
                        }
                    } catch (t4) {
                        h2.e(t4);
                    } finally{
                        h2.f();
                    }
                    return p6;
                }
                /*!
 * Runs queued functions
 */ function at(t3) {
                    var e7 = t3.$__schema && t3.$__schema.callQueue;
                    if (e7.length) {
                        var r9, n9 = i7(e7);
                        try {
                            for(n9.s(); !(r9 = n9.n()).done;){
                                var o13 = r9.value;
                                "pre" !== o13[0] && "post" !== o13[0] && "on" !== o13[0] && t3[o13[0]].apply(t3, o13[1]);
                            }
                        } catch (t4) {
                            n9.e(t4);
                        } finally{
                            n9.f();
                        }
                    }
                }
                /*!
 * ignore
 */ /*!
 * Applies virtuals properties to `json`.
 */ function ut(t3, e7, r10, n10) {
                    var o14, i8, s9, a13 = t3.$__schema, u14 = Object.keys(a13.virtuals), c9 = u14.length, l9 = c9, f8 = t3._doc, p6 = P(n10, "aliases", true);
                    if (!f8) return e7;
                    for(r10 = r10 || {
                    }, c9 = 0; c9 < l9; ++c9)if (o14 = u14[c9], p6 || !a13.aliases.hasOwnProperty(o14)) {
                        if (i8 = o14, null != r10.path) {
                            if (!o14.startsWith(r10.path + ".")) continue;
                            i8 = o14.substr(r10.path.length + 1);
                        }
                        var h2 = i8.split(".");
                        if ((void 0) !== (s9 = L(t3.get(o14), r10))) {
                            var y5 = h2.length;
                            f8 = e7;
                            for(var d6 = 0; d6 < y5 - 1; ++d6)f8[h2[d6]] = f8[h2[d6]] || {
                            }, f8 = f8[h2[d6]];
                            f8[h2[y5 - 1]] = s9;
                        }
                    }
                    return e7;
                }
                /*!
 * Applies virtuals properties to `json`.
 *
 * @param {Document} self
 * @param {Object} json
 * @return {Object} `json`
 */ function ct(t3, e7) {
                    if (F(e7)) throw new Error("`transform` function must be synchronous, but the transform on path `" + t3 + "` returned a promise.");
                }
                /*!
 * ignore
 */ tt.prototype.$__schema, tt.prototype.schema, Object.defineProperty(tt.prototype, "$locals", {
                    configurable: false,
                    enumerable: false,
                    writable: true
                }), tt.prototype.isNew, tt.prototype.id, tt.prototype.errors, tt.prototype.$op, tt.prototype.$__buildDoc = function(t3, e7, r10, n10, o14) {
                    for(var i8 = {
                    }, s9 = Object.keys(this.$__schema.paths).filter(function(t4) {
                        return !t4.includes("$*");
                    }), a13 = s9.length, u14 = 0; u14 < a13; ++u14){
                        var c9 = s9[u14];
                        if ("_id" === c9) {
                            if (r10) continue;
                            if (t3 && "_id" in t3) continue;
                        }
                        for(var l9 = c9.split("."), f8 = l9.length, p6 = f8 - 1, h3 = "", y6 = i8, d7 = false, _5 = 0; _5 < f8; ++_5){
                            var v4 = l9[_5];
                            if (h3 += (h3.length ? "." : "") + v4, true === n10) {
                                if (h3 in e7) break;
                            } else if (false === n10 && e7 && !d7) {
                                if (h3 in e7) d7 = true;
                                else if (!o14[h3]) break;
                            }
                            _5 < p6 && (y6 = y6[v4] || (y6[v4] = {
                            }));
                        }
                    }
                    this._doc = i8;
                }, /*!
 * Converts to POJO when you use the document for querying
 */ tt.prototype.toBSON = function() {
                    return this.toObject(C);
                }, tt.prototype.init = function(t3, e7, r10) {
                    return "function" == typeof e7 && (r10 = e7, e7 = null), this.$__init(t3, e7), r10 && r10(null, this), this;
                }, /*!
 * ignore
 */ tt.prototype.$__init = function(t3, e7) {
                    if (this.isNew = false, this.$init = true, e7 = e7 || {
                    }, null != t3._id && e7.populated && e7.populated.length) {
                        var r10, n10 = String(t3._id), o14 = i7(e7.populated);
                        try {
                            for(o14.s(); !(r10 = o14.n()).done;){
                                var s9 = r10.value;
                                if (s9.isVirtual ? this.populated(s9.path, I.getValue(s9.path, t3), s9) : this.populated(s9.path, s9._docs[n10], s9), null != s9._childDocs) {
                                    var a13, u14 = i7(s9._childDocs);
                                    try {
                                        for(u14.s(); !(a13 = u14.n()).done;){
                                            var c10 = a13.value;
                                            null != c10 && null != c10.$__ && (c10.$__.parent = this);
                                        }
                                    } catch (t4) {
                                        u14.e(t4);
                                    } finally{
                                        u14.f();
                                    }
                                    s9._childDocs = [];
                                }
                            }
                        } catch (t4) {
                            o14.e(t4);
                        } finally{
                            o14.f();
                        }
                    }
                    /*!
 * Init helper.
 *
 * @param {Object} self document instance
 * @param {Object} obj raw mongodb doc
 * @param {Object} doc object we are initializing
 * @api private
 */ return (function t4(e8, r11, n11, o15, i8) {
                        i8 = i8 || "";
                        var s10, a14, u15, c11 = Object.keys(r11), l10 = c11.length, f9 = 0;
                        for(; f9 < l10;)p7(f9++);
                        function p7(l11) {
                            if (u15 = c11[l11], a14 = i8 + u15, s10 = e8.$__schema.path(a14), !e8.$__schema.$isRootDiscriminator || e8.$__isSelected(a14)) {
                                if (!s10 && I.isPOJO(r11[u15])) n11[u15] || (n11[u15] = {
                                }), t4(e8, r11[u15], n11[u15], o15, a14 + ".");
                                else if (s10) {
                                    if (null === r11[u15]) n11[u15] = s10._castNullish(null);
                                    else if ((void 0) !== r11[u15]) {
                                        var f10 = (r11[u15].$__ || {
                                        }).wasPopulated || null;
                                        if (s10 && !f10) try {
                                            n11[u15] = s10.cast(r11[u15], e8, true);
                                        } catch (t5) {
                                            e8.invalidate(t5.path, new w({
                                                path: t5.path,
                                                message: t5.message,
                                                type: "cast",
                                                value: t5.value,
                                                reason: t5
                                            }));
                                        }
                                        else n11[u15] = r11[u15];
                                    }
                                    e8.isModified(a14) || e8.$__.activePaths.init(a14);
                                } else n11[u15] = r11[u15];
                            }
                        }
                    })(this, t3, this._doc, e7), /*!
 * If populating a path within a document array, make sure each
 * subdoc within the array knows its subpaths are populated.
 *
 * ####Example:
 *     const doc = await Article.findOne().populate('comments.author');
 *     doc.comments[0].populated('author'); // Should be set
 */ (function(t5, e8) {
                        if (null == t5._id || null == e8 || 0 === e8.length) return;
                        var r11, n11 = String(t5._id), o15 = i7(e8);
                        try {
                            for(o15.s(); !(r11 = o15.n()).done;){
                                var s10 = r11.value;
                                if (!s10.isVirtual) for(var a14 = s10.path.split("."), u15 = 0; u15 < a14.length - 1; ++u15){
                                    var c11 = a14.slice(0, u15 + 1).join("."), l10 = a14.slice(u15 + 1).join("."), f9 = t5.get(c11);
                                    if (null != f9 && f9.isMongooseDocumentArray) {
                                        for(var p7 = 0; p7 < f9.length; ++p7)f9[p7].populated(l10, null == s10._docs[n11] ? [] : s10._docs[n11][p7], s10);
                                        break;
                                    }
                                }
                            }
                        } catch (t6) {
                            o15.e(t6);
                        } finally{
                            o15.f();
                        }
                    })(this, e7.populated), this.emit("init", this), this.constructor.emit("init", this), this.$__._id = this._id, this;
                }, tt.prototype.update = function() {
                    var t3 = I.args(arguments);
                    t3.unshift({
                        _id: this._id
                    });
                    var e7 = this.constructor.update.apply(this.constructor, t3);
                    return null != this.$session() && ("session" in e7.options || (e7.options.session = this.$session())), e7;
                }, tt.prototype.updateOne = function(t3, e7, r11) {
                    var n11 = this, o15 = this.constructor.updateOne({
                        _id: this._id
                    }, t3, e7);
                    return o15.pre(function(t4) {
                        n11.constructor._middleware.execPre("updateOne", n11, [
                            n11
                        ], t4);
                    }), o15.post(function(t4) {
                        n11.constructor._middleware.execPost("updateOne", n11, [
                            n11
                        ], {
                        }, t4);
                    }), null != this.$session() && ("session" in o15.options || (o15.options.session = this.$session())), null != r11 ? o15.exec(r11) : o15;
                }, tt.prototype.replaceOne = function() {
                    var t3 = I.args(arguments);
                    return t3.unshift({
                        _id: this._id
                    }), this.constructor.replaceOne.apply(this.constructor, t3);
                }, tt.prototype.$session = function(t3) {
                    if (0 === arguments.length) return this.$__.session;
                    if (this.$__.session = t3, !this.ownerDocument) {
                        var e7, r11 = this.$getAllSubdocs(), n11 = i7(r11);
                        try {
                            for(n11.s(); !(e7 = n11.n()).done;){
                                var o15 = e7.value;
                                o15.$session(t3);
                            }
                        } catch (t4) {
                            n11.e(t4);
                        } finally{
                            n11.f();
                        }
                    }
                    return t3;
                }, tt.prototype.overwrite = function(t3) {
                    for(var e8 = 0, r12 = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(t3)))); e8 < r12.length; e8++){
                        var n12 = r12[e8];
                        "_id" !== n12 && (this.$__schema.options.versionKey && n12 === this.$__schema.options.versionKey || this.$__schema.options.discriminatorKey && n12 === this.$__schema.options.discriminatorKey || this.$set(n12, t3[n12]));
                    }
                    return this;
                }, tt.prototype.$set = function(t3, e8, r12, n13) {
                    var s11 = this;
                    I.isPOJO(r12) && (n13 = r12, r12 = void 0);
                    var u16, c12, l11, f11, p8 = (n13 = n13 || {
                    }).merge, _6 = r12 && true !== r12, v5 = true === r12, m4 = 0, b2 = "strict" in n13 ? n13.strict : this.$__.strictMode;
                    if (_6 && ((this.$__.adhocPaths || (this.$__.adhocPaths = {
                    }))[t3] = this.$__schema.interpretAsType(t3, r12, this.$__schema.options)), null == t3) {
                        var w3 = t3;
                        t3 = e8, e8 = w3;
                    } else {
                        if ("string" != typeof t3) {
                            if (t3 instanceof tt && (t3 = t3.$__isNested ? t3.toObject() : t3._doc), null == t3) {
                                var O2 = t3;
                                t3 = e8, e8 = O2;
                            }
                            f11 = e8 ? e8 + "." : "";
                            var S2 = (u16 = Object.keys(t3)).length, $1 = P(n13, "_skipMinimizeTopLevel", false);
                            if (0 === S2 && $1) return delete n13._skipMinimizeTopLevel, e8 && this.$set(e8, {
                            }), this;
                            for(var E2 = 0; E2 < S2; ++E2){
                                var j1 = f11 + (l11 = u16[E2]);
                                if (c12 = this.$__schema.pathType(j1), true !== r12 || f11 || null == t3[l11] || "nested" !== c12 || null == this._doc[l11] || 0 !== Object.keys(this._doc[l11]).length || (delete this._doc[l11], n13 = Object.assign({
                                }, n13, {
                                    _skipMinimizeTopLevel: true
                                })), !("object" !== a9(t3[l11]) || I.isNativeObject(t3[l11]) || I.isMongooseType(t3[l11]) || null == t3[l11] || "virtual" === c12 || "real" === c12 || "adhocOrUndefined" === c12 || this.$__path(j1) instanceof y2 || this.$__schema.paths[j1] && this.$__schema.paths[j1].options && this.$__schema.paths[j1].options.ref)) this.$__.$setCalled.add(f11 + l11), this.$set(t3[l11], f11 + l11, v5, n13);
                                else if (b2) {
                                    if (v5 && (void 0) === t3[l11] && (void 0) !== this.get(j1)) continue;
                                    if ("adhocOrUndefined" === c12 && (c12 = x(this, j1, {
                                        typeOnly: true
                                    })), "real" === c12 || "virtual" === c12) {
                                        var N2 = t3[l11];
                                        this.$__schema.paths[j1] && this.$__schema.paths[j1].$isSingleNested && t3[l11] instanceof tt && (N2 = N2.toObject({
                                            virtuals: false,
                                            transform: false
                                        })), this.$set(f11 + l11, N2, v5, n13);
                                    } else if ("nested" === c12 && t3[l11] instanceof tt) this.$set(f11 + l11, t3[l11].toObject({
                                        transform: false
                                    }), v5, n13);
                                    else if ("throw" === b2) throw "nested" === c12 ? new d2(l11, t3[l11]) : new g(l11);
                                } else (void 0) !== t3[l11] && this.$set(f11 + l11, t3[l11], v5, n13);
                            }
                            return this;
                        }
                        this.$__.$setCalled.add(t3);
                    }
                    var k2, B2 = this.$__schema.pathType(t3);
                    if ("adhocOrUndefined" === B2 && (B2 = x(this, t3, {
                        typeOnly: true
                    })), e8 = T(e8), "nested" === B2 && e8) {
                        if ("object" === a9(e8) && null != e8) {
                            var R1 = null != this.$__.savedState && this.$__.savedState.hasOwnProperty(t3);
                            if (null != this.$__.savedState && !this.isNew && !this.$__.savedState.hasOwnProperty(t3)) {
                                var C1 = this.$__getValue(t3);
                                this.$__.savedState[t3] = C1;
                                for(var M1 = 0, F1 = Object.keys(C1 || {
                                }); M1 < F1.length; M1++){
                                    var L1 = F1[M1];
                                    this.$__.savedState[t3 + "." + L1] = C1[L1];
                                }
                            }
                            if (p8) return this.$set(e8, t3, v5);
                            this.$__setValue(t3, null), A(this, t3);
                            var U1 = Object.keys(e8);
                            this.$__setValue(t3, {
                            });
                            for(var V1 = 0, q1 = U1; V1 < q1.length; V1++){
                                var W1 = q1[V1];
                                this.$set(t3 + "." + W1, e8[W1], v5);
                            }
                            return R1 && I.deepEqual(this.$__.savedState[t3], e8) ? this.unmarkModified(t3) : this.markModified(t3), A(this, t3, {
                                skipDocArrays: true
                            }), this;
                        }
                        return this.invalidate(t3, new h.CastError("Object", e8, t3)), this;
                    }
                    var H1 = -1 === t3.indexOf(".") ? [
                        t3
                    ] : t3.split(".");
                    if ("string" == typeof this.$__schema.aliases[H1[0]] && (H1[0] = this.$__schema.aliases[H1[0]]), "adhocOrUndefined" === B2 && b2) {
                        var Y1;
                        for(m4 = 0; m4 < H1.length; ++m4){
                            var K1 = H1.slice(0, m4 + 1).join(".");
                            if (m4 + 1 < H1.length && "virtual" === this.$__schema.pathType(K1)) return D.set(t3, e8, this), this;
                            if (null != (k2 = this.$__schema.path(K1)) && k2 instanceof y2) {
                                Y1 = true;
                                break;
                            }
                        }
                        if (null == k2 && (k2 = x(this, t3)), !Y1 && !k2) {
                            if ("throw" === b2) throw new g(t3);
                            return this;
                        }
                    } else {
                        if ("virtual" === B2) return (k2 = this.$__schema.virtualpath(t3)).applySetters(e8, this), this;
                        k2 = this.$__path(t3);
                    }
                    var z1, Q1 = this._doc, G1 = "";
                    for(m4 = 0; m4 < H1.length - 1; ++m4)Q1 = Q1[H1[m4]], G1 += (G1.length > 0 ? "." : "") + H1[m4], Q1 || (this.$set(G1, {
                    }), this.$__isSelected(G1) || this.unmarkModified(G1), Q1 = this.$__getValue(G1));
                    if (H1.length <= 1) z1 = t3;
                    else {
                        for(m4 = 0; m4 < H1.length; ++m4){
                            var X1 = H1.slice(0, m4 + 1).join(".");
                            if (null === this.get(X1, null, {
                                getters: false
                            })) {
                                z1 = X1;
                                break;
                            }
                        }
                        z1 || (z1 = t3);
                    }
                    var Z1 = null != s11.$__.$options.priorDoc ? s11.$__.$options.priorDoc.$__getValue(t3) : v5 ? void 0 : s11.$__getValue(t3);
                    if (!k2) return this.$__set(z1, t3, v5, H1, k2, e8, Z1), this;
                    if ((k2.$isSingleNested || k2.$isMongooseArray) && /*!
 * ignore
 */ (function(t4, e9) {
                        if (!t4.$__.validationError) return;
                        for(var r13 = Object.keys(t4.$__.validationError.errors), n14 = 0, o16 = r13; n14 < o16.length; n14++){
                            var i8 = o16[n14];
                            i8.startsWith(e9 + ".") && delete t4.$__.validationError.errors[i8];
                        }
                        0 === Object.keys(t4.$__.validationError.errors).length && (t4.$__.validationError = null);
                    })(this, t3), k2.$isSingleNested && null != e8 && p8) {
                        e8 instanceof tt && (e8 = e8.toObject({
                            virtuals: false,
                            transform: false
                        }));
                        for(var et1 = 0, rt1 = Object.keys(e8); et1 < rt1.length; et1++){
                            var nt1 = rt1[et1];
                            this.$set(t3 + "." + nt1, e8[nt1], v5, n13);
                        }
                        return this;
                    }
                    var ot1 = true;
                    try {
                        var it1, st1 = function() {
                            if (null == k2.options) return false;
                            if (!(e8 instanceof tt)) return false;
                            var t4 = e8.constructor, r13 = k2.options.ref;
                            if (null != r13 && (r13 === t4.modelName || r13 === t4.baseModelName)) return true;
                            var n14 = k2.options.refPath;
                            if (null == n14) return false;
                            var o16 = e8.get(n14);
                            return o16 === t4.modelName || o16 === t4.baseModelName;
                        }(), at1 = false;
                        if (st1 && e8 instanceof tt && (this.populated(t3, e8._id, o3({
                        }, J, e8.constructor)), e8.$__.wasPopulated = true, at1 = true), k2.options && Array.isArray(k2.options[this.$__schema.options.typeKey]) && k2.options[this.$__schema.options.typeKey].length && k2.options[this.$__schema.options.typeKey][0].ref && /*!
 * ignore
 */ (function(t4, e9) {
                            if (!Array.isArray(t4)) return false;
                            if (0 === t4.length) return false;
                            var r13, n14 = i7(t4);
                            try {
                                for(n14.s(); !(r13 = n14.n()).done;){
                                    var o16 = r13.value;
                                    if (!(o16 instanceof tt)) return false;
                                    if (null == o16.constructor.modelName) return false;
                                    if (o16.constructor.modelName != e9 && o16.constructor.baseModelName != e9) return false;
                                }
                            } catch (t5) {
                                n14.e(t5);
                            } finally{
                                n14.f();
                            }
                            return true;
                        })(e8, k2.options[this.$__schema.options.typeKey][0].ref)) {
                            this.ownerDocument ? (it1 = o3({
                            }, J, e8[0].constructor), this.ownerDocument().populated(this.$__fullPath(t3), e8.map(function(t4) {
                                return t4._id;
                            }), it1)) : (it1 = o3({
                            }, J, e8[0].constructor), this.populated(t3, e8.map(function(t4) {
                                return t4._id;
                            }), it1));
                            var ut1, ct1 = i7(e8);
                            try {
                                for(ct1.s(); !(ut1 = ct1.n()).done;)ut1.value.$__.wasPopulated = true;
                            } catch (t4) {
                                ct1.e(t4);
                            } finally{
                                ct1.f();
                            }
                            at1 = true;
                        }
                        if (null == this.$__schema.singleNestedPaths[t3] && (e8 = k2.applySetters(e8, this, false, Z1)), k2.$isMongooseDocumentArray && Array.isArray(e8) && e8.length > 0 && null != e8[0] && null != e8[0].$__ && null != e8[0].$__.populated) {
                            for(var lt = Object.keys(e8[0].$__.populated), ft = function() {
                                var r13 = ht[pt];
                                s11.populated(t3 + "." + r13, e8.map(function(t4) {
                                    return t4.populated(r13);
                                }), e8[0].$__.populated[r13].options);
                            }, pt = 0, ht = lt; pt < ht.length; pt++)ft();
                            at1 = true;
                        }
                        if (!at1 && this.$__.populated) {
                            if (Array.isArray(e8) && this.$__.populated[t3]) for(var yt = 0; yt < e8.length; ++yt)e8[yt] instanceof tt && (e8[yt] = e8[yt]._id);
                            delete this.$__.populated[t3];
                        }
                        k2.$isSingleNested && null != e8 && (function(t4, e9, r13) {
                            var n14 = e9.schema;
                            if (null == n14) return;
                            for(var o17 = 0, i9 = Object.keys(n14.paths); o17 < i9.length; o17++){
                                var s12 = i9[o17], a15 = n14.paths[s12];
                                if (null != a15.$immutableSetter) {
                                    var u17 = null == r13 ? void 0 : r13.$__getValue(s12);
                                    a15.$immutableSetter.call(t4, u17);
                                }
                            }
                        })(e8, k2, Z1), this.$markValid(t3);
                    } catch (r13) {
                        r13 instanceof h.StrictModeError && r13.isImmutableError ? this.invalidate(t3, r13) : r13 instanceof h.CastError ? (this.invalidate(r13.path, r13), r13.$originalErrorPath && this.invalidate(t3, new h.CastError(k2.instance, e8, t3, r13.$originalErrorPath))) : this.invalidate(t3, new h.CastError(k2.instance, e8, t3, r13)), ot1 = false;
                    }
                    return ot1 && (this.$__set(z1, t3, v5, H1, k2, e8, Z1), null != this.$__.savedState && (this.isNew || this.$__.savedState.hasOwnProperty(t3) ? this.$__.savedState.hasOwnProperty(t3) && I.deepEqual(e8, this.$__.savedState[t3]) && this.unmarkModified(t3) : this.$__.savedState[t3] = Z1)), k2.$isSingleNested && (this.isDirectModified(t3) || null == e8) && A(this, t3), this;
                }, tt.prototype.set = tt.prototype.$set, tt.prototype.$__shouldModify = function(t3, e8, r12, n13, o17, i9, s11) {
                    return !!this.isNew || null == this.$__schema.singleNestedPaths[e8] && ((void 0) === i9 && !this.$__isSelected(e8) || ((void 0) !== i9 || !(e8 in this.$__.activePaths.states.default)) && !(this.populated(e8) && i9 instanceof tt && U(i9._id, s11)) && (!U(i9, s11 || I.getValue(e8, this)) || !(r12 || null == i9 || !(e8 in this.$__.activePaths.states.default) || !U(i9, o17.getDefault(this, r12)))));
                }, tt.prototype.$__set = function(t3, e8, n13, o17, i9, s11, a16) {
                    l2 = l2 || r2(26);
                    var u16 = this.$__shouldModify(t3, e8, n13, o17, i9, s11, a16), f11 = this;
                    u16 && (this.markModified(t3), c3 || (c3 = r2(84)), s11 && s11.isMongooseArray && (s11._registerAtomic("$set", s11), s11.isMongooseDocumentArray && s11.forEach(function(t4) {
                        t4 && t4.__parentArray && (t4.__parentArray = s11);
                    }), this.$__.activePaths.forEach(function(t4) {
                        t4.startsWith(e8 + ".") && f11.$__.activePaths.ignore(t4);
                    })));
                    for(var p8 = this._doc, h4 = 0, y7 = o17.length, d8 = ""; h4 < y7; h4++){
                        var _6 = h4 + 1 === y7;
                        if (d8 += d8 ? "." + o17[h4] : o17[h4], Z.has(o17[h4])) return;
                        _6 ? p8 instanceof Map ? p8.set(o17[h4], s11) : p8[o17[h4]] = s11 : (I.isPOJO(p8[o17[h4]]) || p8[o17[h4]] && p8[o17[h4]] instanceof l2 || p8[o17[h4]] && p8[o17[h4]].$isSingleNested || p8[o17[h4]] && Array.isArray(p8[o17[h4]]) || (p8[o17[h4]] = p8[o17[h4]] || {
                        }), p8 = p8[o17[h4]]);
                    }
                }, tt.prototype.$__getValue = function(t3) {
                    return I.getValue(t3, this._doc);
                }, tt.prototype.$__setValue = function(t3, e8) {
                    return I.setValue(t3, e8, this._doc), this;
                }, tt.prototype.get = function(t3, e8, r12) {
                    var n13;
                    r12 = r12 || {
                    }, e8 && (n13 = this.$__schema.interpretAsType(t3, e8, this.$__schema.options));
                    var o17 = this.$__path(t3);
                    if (null == o17 && (o17 = this.$__schema.virtualpath(t3)), o17 instanceof y2) {
                        var i9 = this.$__schema.virtualpath(t3);
                        null != i9 && (o17 = i9);
                    }
                    var s11 = t3.split("."), a16 = this._doc;
                    if (o17 instanceof O) return o17.applyGetters(void 0, this);
                    "string" == typeof this.$__schema.aliases[s11[0]] && (s11[0] = this.$__schema.aliases[s11[0]]);
                    for(var u16 = 0, c12 = s11.length; u16 < c12; u16++)a16 && a16._doc && (a16 = a16._doc), a16 = null == a16 ? void 0 : a16 instanceof Map ? a16.get(s11[u16], {
                        getters: false
                    }) : u16 === c12 - 1 ? I.getValue(s11[u16], a16) : a16[s11[u16]];
                    if (n13 && (a16 = n13.cast(a16)), null != o17 && false !== r12.getters) a16 = o17.applyGetters(a16, this);
                    else if (this.$__schema.nested[t3] && r12.virtuals) return ut(this, I.clone(a16) || {
                    }, {
                        path: t3
                    });
                    return a16;
                }, /*!
 * ignore
 */ tt.prototype[Q] = tt.prototype.get, tt.prototype.$__path = function(t3) {
                    var e8 = this.$__.adhocPaths, r12 = e8 && e8.hasOwnProperty(t3) ? e8[t3] : null;
                    return r12 || this.$__schema.path(t3);
                }, tt.prototype.markModified = function(t3, e8) {
                    this.$__.activePaths.modify(t3), null == e8 || this.ownerDocument || (this.$__.pathsToScopes[t3] = e8);
                }, tt.prototype.unmarkModified = function(t3) {
                    this.$__.activePaths.init(t3), delete this.$__.pathsToScopes[t3];
                }, tt.prototype.$ignore = function(t3) {
                    this.$__.activePaths.ignore(t3);
                }, tt.prototype.directModifiedPaths = function() {
                    return Object.keys(this.$__.activePaths.states.modify);
                }, tt.prototype.$isEmpty = function(t3) {
                    var e8 = {
                        minimize: true,
                        virtuals: false,
                        getters: false,
                        transform: false
                    };
                    if (arguments.length > 0) {
                        var r12 = this.get(t3);
                        return null == r12 || "object" === a9(r12) && (I.isPOJO(r12) ? ot(r12) : 0 === Object.keys(r12.toObject(e8)).length);
                    }
                    return 0 === Object.keys(this.toObject(e8)).length;
                }, tt.prototype.modifiedPaths = function(t3) {
                    t3 = t3 || {
                    };
                    var e8 = Object.keys(this.$__.activePaths.states.modify), r13 = this;
                    return e8.reduce(function(e9, n13) {
                        var o17 = n13.split(".");
                        if (e9 = e9.concat(o17.reduce(function(t4, e10, r14) {
                            return t4.concat(o17.slice(0, r14).concat(e10).join("."));
                        }, []).filter(function(t4) {
                            return -1 === e9.indexOf(t4);
                        })), !t3.includeChildren) return e9;
                        var s11 = r13.get(n13);
                        if (null != s11 && "object" === a9(s11)) {
                            if (s11._doc && (s11 = s11._doc), Array.isArray(s11)) {
                                for(var u16 = s11.length, c12 = 0; c12 < u16; ++c12)if (-1 === e9.indexOf(n13 + "." + c12) && (e9.push(n13 + "." + c12), null != s11[c12] && s11[c12].$__)) {
                                    var l11, f11 = i7(s11[c12].modifiedPaths());
                                    try {
                                        for(f11.s(); !(l11 = f11.n()).done;){
                                            var p8 = l11.value;
                                            e9.push(n13 + "." + c12 + "." + p8);
                                        }
                                    } catch (t4) {
                                        f11.e(t4);
                                    } finally{
                                        f11.f();
                                    }
                                }
                            } else Object.keys(s11).filter(function(t4) {
                                return -1 === e9.indexOf(n13 + "." + t4);
                            }).forEach(function(t4) {
                                e9.push(n13 + "." + t4);
                            });
                        }
                        return e9;
                    }, []);
                }, tt.prototype[K] = tt.prototype.modifiedPaths, tt.prototype.isModified = function(t3, e8) {
                    if (t3) {
                        Array.isArray(t3) || (t3 = t3.split(" "));
                        var r13 = e8 || this[K](), n13 = Object.keys(this.$__.activePaths.states.modify);
                        return t3.some(function(t4) {
                            return !!~r13.indexOf(t4);
                        }) || t3.some(function(t4) {
                            return n13.some(function(e9) {
                                return e9 === t4 || t4.startsWith(e9 + ".");
                            });
                        });
                    }
                    return this.$__.activePaths.some("modify");
                }, tt.prototype[Y] = tt.prototype.isModified, tt.prototype.$isDefault = function(t3) {
                    var e8 = this;
                    if (null == t3) return this.$__.activePaths.some("default");
                    if ("string" == typeof t3 && -1 === t3.indexOf(" ")) return this.$__.activePaths.states.default.hasOwnProperty(t3);
                    var r14 = t3;
                    return Array.isArray(r14) || (r14 = r14.split(" ")), r14.some(function(t4) {
                        return e8.$__.activePaths.states.default.hasOwnProperty(t4);
                    });
                }, tt.prototype.$isDeleted = function(t3) {
                    return 0 === arguments.length ? !!this.$__.isDeleted : (this.$__.isDeleted = !!t3, this);
                }, tt.prototype.isDirectModified = function(t3) {
                    var e8 = this;
                    if (null == t3) return this.$__.activePaths.some("modify");
                    if ("string" == typeof t3 && -1 === t3.indexOf(" ")) return this.$__.activePaths.states.modify.hasOwnProperty(t3);
                    var r14 = t3;
                    return Array.isArray(r14) || (r14 = r14.split(" ")), r14.some(function(t4) {
                        return e8.$__.activePaths.states.modify.hasOwnProperty(t4);
                    });
                }, tt.prototype.isInit = function(t3) {
                    var e8 = this;
                    if (null == t3) return this.$__.activePaths.some("init");
                    if ("string" == typeof t3 && -1 === t3.indexOf(" ")) return this.$__.activePaths.states.init.hasOwnProperty(t3);
                    var r14 = t3;
                    return Array.isArray(r14) || (r14 = r14.split(" ")), r14.some(function(t4) {
                        return e8.$__.activePaths.states.init.hasOwnProperty(t4);
                    });
                }, tt.prototype.isSelected = function(t3) {
                    var e8 = this;
                    if (null == this.$__.selected) return true;
                    if ("_id" === t3) return 0 !== this.$__.selected._id;
                    if (-1 !== t3.indexOf(" ") && (t3 = t3.split(" ")), Array.isArray(t3)) return t3.some(function(t4) {
                        return e8.$__isSelected(t4);
                    });
                    var r14 = Object.keys(this.$__.selected), n14 = null;
                    if (1 === r14.length && "_id" === r14[0]) return 0 === this.$__.selected._id;
                    for(var o17 = 0, i10 = r14; o17 < i10.length; o17++){
                        var s11 = i10[o17];
                        if ("_id" !== s11 && k(this.$__.selected[s11])) {
                            n14 = !!this.$__.selected[s11];
                            break;
                        }
                    }
                    if (null === n14) return true;
                    if (t3 in this.$__.selected) return n14;
                    for(var a16 = t3 + ".", u18 = 0, c13 = r14; u18 < c13.length; u18++){
                        var l12 = c13[u18];
                        if ("_id" !== l12) {
                            if (l12.startsWith(a16)) return n14 || l12 !== a16;
                            if (a16.startsWith(l12 + ".")) return n14;
                        }
                    }
                    return !n14;
                }, tt.prototype.$__isSelected = tt.prototype.isSelected, tt.prototype.isDirectSelected = function(t3) {
                    var e8 = this;
                    if (null == this.$__.selected) return true;
                    if ("_id" === t3) return 0 !== this.$__.selected._id;
                    if (-1 !== t3.indexOf(" ") && (t3 = t3.split(" ")), Array.isArray(t3)) return t3.some(function(t4) {
                        return e8.isDirectSelected(t4);
                    });
                    var r14 = Object.keys(this.$__.selected), n14 = null;
                    if (1 === r14.length && "_id" === r14[0]) return 0 === this.$__.selected._id;
                    for(var o17 = 0, i10 = r14; o17 < i10.length; o17++){
                        var s13 = i10[o17];
                        if ("_id" !== s13 && k(this.$__.selected[s13])) {
                            n14 = !!this.$__.selected[s13];
                            break;
                        }
                    }
                    return null === n14 || (this.$__.selected.hasOwnProperty(t3) ? n14 : !n14);
                }, tt.prototype.validate = function(t3, e8, r14) {
                    var n14, o17 = this;
                    return this.$op = "validate", null != this.ownerDocument || (this.$__.validating ? n14 = new v2(this, {
                        parentStack: e8 && e8.parentStack,
                        conflictStack: this.$__.validating.stack
                    }) : this.$__.validating = new v2(this, {
                        parentStack: e8 && e8.parentStack
                    })), 1 === arguments.length ? "object" !== a9(arguments[0]) || Array.isArray(arguments[0]) ? "function" == typeof arguments[0] && (r14 = arguments[0], e8 = null, t3 = null) : (e8 = arguments[0], r14 = null, t3 = null) : "function" == typeof t3 ? (r14 = t3, e8 = null, t3 = null) : "function" == typeof e8 && (r14 = e8, e8 = t3, t3 = null), S(r14, function(r15) {
                        if (null != n14) return r15(n14);
                        o17.$__validate(t3, e8, function(t4) {
                            o17.$op = null, r15(t4);
                        });
                    }, this.constructor.events);
                }, tt.prototype.$__validate = function(t3, r14, n14) {
                    var o17 = this;
                    "function" == typeof t3 ? (n14 = t3, r14 = null, t3 = null) : "function" == typeof r14 && (n14 = r14, r14 = null);
                    var i10, s14 = r14 && "object" === a9(r14) && "validateModifiedOnly" in r14;
                    i10 = s14 ? !!r14.validateModifiedOnly : this.$__schema.options.validateModifiedOnly;
                    var u18 = this, c13 = function() {
                        var t4 = o17.$__.validationError;
                        if (o17.$__.validationError = void 0, i10 && null != t4) {
                            for(var e8 = 0, r15 = Object.keys(t4.errors); e8 < r15.length; e8++){
                                var n15 = r15[e8];
                                o17.isModified(n15) || delete t4.errors[n15];
                            }
                            0 === Object.keys(t4.errors).length && (t4 = void 0);
                        }
                        if (o17.$__.cachedRequired = {
                        }, o17.emit("validate", u18), o17.constructor.emit("validate", u18), o17.$__.validating = null, t4) {
                            for(var s15 in t4.errors)!o17[H] && t4.errors[s15] instanceof h.CastError && o17.invalidate(s15, t4.errors[s15]);
                            return t4;
                        }
                    }, l13 = it(this), f12 = i10 ? l13[0].filter(function(t4) {
                        return o17.isModified(t4);
                    }) : l13[0], p9 = l13[1];
                    if ("string" == typeof t3 && (t3 = t3.split(" ")), Array.isArray(t3) && (f12 = st(f12, t3)), 0 === f12.length) return e6.nextTick(function() {
                        var t4 = c13();
                        if (t4) return u18.$__schema.s.hooks.execPost("validate:error", u18, [
                            u18
                        ], {
                            error: t4
                        }, function(t5) {
                            n14(t5);
                        });
                        n14(null, u18);
                    });
                    for(var y7 = {
                    }, d8 = 0, _7 = function() {
                        var t4 = c13();
                        if (t4) return u18.$__schema.s.hooks.execPost("validate:error", u18, [
                            u18
                        ], {
                            error: t4
                        }, function(t5) {
                            n14(t5);
                        });
                        n14(null, u18);
                    }, v5 = function(t4) {
                        null == t4 || y7[t4] || (y7[t4] = true, d8++, e6.nextTick(function() {
                            var e9 = u18.$__schema.path(t4);
                            if (!e9) return (--d8) || _7();
                            if (u18.$isValid(t4)) {
                                if (null != e9[X] && t4 !== e9.path) return (--d8) || _7();
                                var r16, n16 = u18.$__getValue(t4);
                                null == n16 && (r16 = u18.populated(t4)) && (n16 = r16);
                                var o18 = t4 in u18.$__.pathsToScopes ? u18.$__.pathsToScopes[t4] : u18, s16 = {
                                    skipSchemaValidators: p9[t4],
                                    path: t4,
                                    validateModifiedOnly: i10
                                };
                                e9.doValidate(n16, function(r17) {
                                    if (r17 && (!e9.$isMongooseDocumentArray || r17.$isArrayValidatorError)) {
                                        if (e9.$isSingleNested && r17 instanceof b && false === e9.schema.options.storeSubdocValidationError) return (--d8) || _7();
                                        u18.invalidate(t4, r17, void 0, true);
                                    }
                                    (--d8) || _7();
                                }, o18, s16);
                            } else (--d8) || _7();
                        }));
                    }, m4 = f12.length, g2 = 0; g2 < m4; ++g2)v5(f12[g2]);
                }, tt.prototype.validateSync = function(t3, e9) {
                    var r14 = this, n14 = this;
                    1 !== arguments.length || "object" !== a9(arguments[0]) || Array.isArray(arguments[0]) || (e9 = arguments[0], t3 = null);
                    var o17, i10 = e9 && "object" === a9(e9) && "validateModifiedOnly" in e9;
                    o17 = i10 ? !!e9.validateModifiedOnly : this.$__schema.options.validateModifiedOnly, "string" == typeof t3 && (t3 = t3.split(" "));
                    var s14 = it(this), u18 = o17 ? s14[0].filter(function(t4) {
                        return r14.isModified(t4);
                    }) : s14[0], c13 = s14[1];
                    "string" == typeof t3 && (t3 = t3.split(" ")), Array.isArray(t3) && (u18 = st(u18, t3));
                    var l13 = {
                    };
                    u18.forEach(function(t4) {
                        if (!l13[t4]) {
                            l13[t4] = true;
                            var e10 = n14.$__schema.path(t4);
                            if (e10 && n14.$isValid(t4)) {
                                var r17 = n14.$__getValue(t4), i11 = e10.doValidateSync(r17, n14, {
                                    skipSchemaValidators: c13[t4],
                                    path: t4,
                                    validateModifiedOnly: o17
                                });
                                if (i11 && (!e10.$isMongooseDocumentArray || i11.$isArrayValidatorError)) {
                                    if (e10.$isSingleNested && i11 instanceof b && false === e10.schema.options.storeSubdocValidationError) return;
                                    n14.invalidate(t4, i11, void 0, true);
                                }
                            }
                        }
                    });
                    var f12 = n14.$__.validationError;
                    if (n14.$__.validationError = void 0, n14.emit("validate", n14), n14.constructor.emit("validate", n14), f12) for(var p9 in f12.errors)f12.errors[p9] instanceof h.CastError && n14.invalidate(p9, f12.errors[p9]);
                    return f12;
                }, tt.prototype.invalidate = function(t3, e9, r14, n14) {
                    if (this.$__.validationError || (this.$__.validationError = new b(this)), !this.$__.validationError.errors[t3]) return e9 && "string" != typeof e9 || (e9 = new w({
                        path: t3,
                        message: e9,
                        type: n14 || "user defined",
                        value: r14
                    })), this.$__.validationError === e9 || this.$__.validationError.addError(t3, e9), this.$__.validationError;
                }, tt.prototype.$markValid = function(t3) {
                    this.$__.validationError && this.$__.validationError.errors[t3] && (delete this.$__.validationError.errors[t3], 0 === Object.keys(this.$__.validationError.errors).length && (this.$__.validationError = null));
                }, tt.prototype.$isValid = function(t3) {
                    var e9 = this;
                    return null == this.$__.validationError || 0 === Object.keys(this.$__.validationError.errors).length || null != t3 && (-1 !== t3.indexOf(" ") && (t3 = t3.split(" ")), Array.isArray(t3) ? t3.some(function(t4) {
                        return null == e9.$__.validationError.errors[t4];
                    }) : null == this.$__.validationError.errors[t3]);
                }, tt.prototype.$__reset = function() {
                    var t3 = this;
                    return u6 || (u6 = r2(18)), this.$__.activePaths.map("init", "modify", function(e9) {
                        return t3.$__getValue(e9);
                    }).filter(function(t4) {
                        return t4 && t4 instanceof Array && t4.isMongooseDocumentArray && t4.length;
                    }).forEach(function(e9) {
                        for(var r14 = e9.length; r14--;){
                            var n14 = e9[r14];
                            n14 && n14.$__reset();
                        }
                        t3.$__.activePaths.init(e9.$path()), e9[q] = e9[W], e9[W] = {
                        };
                    }), this.$__.activePaths.map("init", "modify", function(e9) {
                        return t3.$__getValue(e9);
                    }).filter(function(t4) {
                        return t4 && t4.$isSingleNested;
                    }).forEach(function(e9) {
                        e9.$__reset(), t3.$__.activePaths.init(e9.$basePath);
                    }), this.$__dirty().forEach(function(t4) {
                        var e9 = t4.value;
                        e9 && e9[W] && (e9[q] = e9[W], e9[W] = {
                        });
                    }), this.$__.backup = {
                    }, this.$__.backup.activePaths = {
                        modify: Object.assign({
                        }, this.$__.activePaths.states.modify),
                        default: Object.assign({
                        }, this.$__.activePaths.states.default)
                    }, this.$__.backup.validationError = this.$__.validationError, this.$__.backup.errors = this.errors, this.$__.activePaths.clear("modify"), this.$__.activePaths.clear("default"), this.$__.validationError = void 0, this.errors = void 0, t3 = this, this.$__schema.requiredPaths().forEach(function(e9) {
                        t3.$__.activePaths.undefined(e9);
                    }), this;
                }, /*!
 * ignore
 */ tt.prototype.$__undoReset = function() {
                    if (null != this.$__.backup && null != this.$__.backup.activePaths) {
                        this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify, this.$__.activePaths.states.default = this.$__.backup.activePaths.default, this.$__.validationError = this.$__.backup.validationError, this.errors = this.$__.backup.errors;
                        var t3, e9 = i7(this.$__dirty());
                        try {
                            for(e9.s(); !(t3 = e9.n()).done;){
                                var r14 = t3.value.value;
                                r14 && r14[W] && r14[q] && (r14[W] = r14[q]);
                            }
                        } catch (t4) {
                            e9.e(t4);
                        } finally{
                            e9.f();
                        }
                        var n17, o17 = i7(this.$getAllSubdocs());
                        try {
                            for(o17.s(); !(n17 = o17.n()).done;)n17.value.$__undoReset();
                        } catch (t4) {
                            o17.e(t4);
                        } finally{
                            o17.f();
                        }
                    }
                }, tt.prototype.$__dirty = function() {
                    var t4 = this, e11 = this.$__.activePaths.map("modify", function(e12) {
                        return {
                            path: e12,
                            value: t4.$__getValue(e12),
                            schema: t4.$__path(e12)
                        };
                    });
                    (e11 = e11.concat(this.$__.activePaths.map("default", function(e12) {
                        if ("_id" !== e12 && null != t4.$__getValue(e12)) return {
                            path: e12,
                            value: t4.$__getValue(e12),
                            schema: t4.$__path(e12)
                        };
                    }))).sort(function(t5, e12) {
                        return t5.path < e12.path ? -1 : t5.path > e12.path ? 1 : 0;
                    });
                    var r18, n18, o19 = [];
                    return e11.forEach(function(t5) {
                        t5 && (null == r18 || 0 !== t5.path.indexOf(r18) ? (r18 = t5.path + ".", o19.push(t5), n18 = t5) : null != n18 && null != n18.value && null != n18.value[W] && n18.value.hasAtomics() && (n18.value[W] = {
                        }, n18.value[W].$set = n18.value));
                    }), n18 = r18 = null, o19;
                }, tt.prototype.$__setSchema = function(t4) {
                    t4.plugin(N, {
                        deduplicate: true
                    }), $(t4.tree, this, void 0, t4.options);
                    for(var e11 = 0, r18 = Object.keys(t4.virtuals); e11 < r18.length; e11++){
                        var n18 = r18[e11];
                        t4.virtuals[n18]._applyDefaultGetters();
                    }
                    null == t4.path("schema") && (this.schema = t4), this.$__schema = t4, this[z] = t4;
                }, tt.prototype.$__getArrayPathsToValidate = function() {
                    return u6 || (u6 = r2(18)), this.$__.activePaths.map("init", "modify", (function(t4) {
                        return this.$__getValue(t4);
                    }).bind(this)).filter(function(t4) {
                        return t4 && t4 instanceof Array && t4.isMongooseDocumentArray && t4.length;
                    }).reduce(function(t4, e11) {
                        return t4.concat(e11);
                    }, []).filter(function(t4) {
                        return t4;
                    });
                }, tt.prototype.$getAllSubdocs = function() {
                    u6 || (u6 = r2(18)), l2 = l2 || r2(26);
                    var t4 = this;
                    return Object.keys(this._doc).reduce(function(e11, r18) {
                        return (function t5(e12, r19, n19) {
                            var o19 = e12;
                            return n19 && (o19 = e12 instanceof tt && e12[z].paths[n19] ? e12._doc[n19] : e12[n19]), o19 instanceof l2 ? r19.push(o19) : o19 instanceof Map ? r19 = Array.from(o19.keys()).reduce(function(e13, r20) {
                                return t5(o19.get(r20), e13, null);
                            }, r19) : o19 && o19.$isSingleNested ? (r19 = Object.keys(o19._doc).reduce(function(e13, r20) {
                                return t5(o19._doc, e13, r20);
                            }, r19)).push(o19) : o19 && o19.isMongooseDocumentArray ? o19.forEach(function(e13) {
                                e13 && e13._doc && (r19 = Object.keys(e13._doc).reduce(function(r20, n20) {
                                    return t5(e13._doc, r20, n20);
                                }, r19), e13 instanceof l2 && r19.push(e13));
                            }) : o19 instanceof tt && o19.$__isNested && (r19 = Object.keys(o19).reduce(function(e13, r20) {
                                return t5(o19, e13, r20);
                            }, r19)), r19;
                        })(t4, e11, r18);
                    }, []);
                }, tt.prototype.$__handleReject = function(t4) {
                    this.listeners("error").length ? this.emit("error", t4) : this.constructor.listeners && this.constructor.listeners("error").length && this.constructor.emit("error", t4);
                }, tt.prototype.$toObject = function(t4, e11) {
                    var r18, o19, i10 = {
                        transform: true,
                        flattenDecimals: true
                    }, s14 = e11 ? "toJSON" : "toObject", a16 = P(this, "constructor.base.options." + s14, {
                    }), u18 = P(this, "$__schema.options", {
                    });
                    i10 = I.options(i10, L(a16)), i10 = I.options(i10, L(u18[s14] || {
                    })), (t4 = I.isPOJO(t4) ? L(t4) : {
                    })._calledWithOptions = t4._calledWithOptions || L(t4), r18 = null != t4._calledWithOptions.minimize ? t4.minimize : null != i10.minimize ? i10.minimize : u18.minimize, o19 = null != t4._calledWithOptions.flattenMaps ? t4.flattenMaps : null != i10.flattenMaps ? i10.flattenMaps : u18.flattenMaps;
                    var c13 = Object.assign(I.clone(t4), {
                        _isNested: true,
                        json: e11,
                        minimize: r18,
                        flattenMaps: o19
                    });
                    if (I.hasUserDefinedProperty(t4, "getters") && (c13.getters = t4.getters), I.hasUserDefinedProperty(t4, "virtuals") && (c13.virtuals = t4.virtuals), (t4.depopulate || P(t4, "_parentOptions.depopulate", false)) && t4._isNested && this.$__.wasPopulated) return L(this._id, c13);
                    (t4 = I.options(i10, t4))._isNested = true, t4.json = e11, t4.minimize = r18, c13._parentOptions = t4, c13._skipSingleNestedGetters = true;
                    var l13 = Object.assign({
                    }, c13);
                    l13._skipSingleNestedGetters = false;
                    var f12 = t4.transform, p9 = L(this._doc, c13) || {
                    };
                    t4.getters && ((function(t5, e12, r19) {
                        var n19, o20, i12 = t5.$__schema, s17 = Object.keys(i12.paths), a17 = s17.length, u19 = t5._doc;
                        if (!u19) return e12;
                        for(; a17--;){
                            var c14 = (n19 = s17[a17]).split("."), l14 = c14.length, f13 = l14 - 1, p10 = e12, h4 = void 0;
                            if (u19 = t5._doc, t5.$__isSelected(n19)) for(var y7 = 0; y7 < l14; ++y7){
                                if (h4 = c14[y7], o20 = u19[h4], y7 === f13) {
                                    var d8 = t5.get(n19);
                                    p10[h4] = L(d8, r19);
                                } else {
                                    if (null == o20) {
                                        h4 in u19 && (p10[h4] = o20);
                                        break;
                                    }
                                    p10 = p10[h4] || (p10[h4] = {
                                    });
                                }
                                u19 = o20;
                            }
                        }
                    })(this, p9, l13), t4.minimize && (p9 = /*!
 * Minimizes an object, removing undefined values and empty objects
 *
 * @param {Object} object to minimize
 * @return {Object}
 */ (function t5(e12) {
                        var r19, o20, i12, s17 = Object.keys(e12), a17 = s17.length;
                        for(; a17--;)o20 = s17[a17], i12 = e12[o20], I.isObject(i12) && !n3.isBuffer(i12) && (e12[o20] = t5(i12)), (void 0) !== e12[o20] ? r19 = true : delete e12[o20];
                        return r19 ? e12 : void 0;
                    })(p9) || {
                    })), (t4.virtuals || t4.getters && false !== t4.virtuals) && ut(this, p9, l13, t4), false === t4.versionKey && this.$__schema.options.versionKey && delete p9[this.$__schema.options.versionKey];
                    var h5 = t4.transform;
                    if (h5 && (function(t6, e12) {
                        var r19 = t6.$__schema, n19 = Object.keys(r19.paths || {
                        });
                        if (!t6._doc) return e12;
                        for(var o20 = 0, i12 = n19; o20 < i12.length; o20++){
                            var s17 = i12[o20], a17 = r19.paths[s17];
                            if ("function" == typeof a17.options.transform) {
                                var u19 = t6.get(s17), c15 = a17.options.transform.call(t6, u19);
                                ct(s17, c15), I.setValue(s17, c15, e12);
                            } else if (null != a17.$embeddedSchemaType && "function" == typeof a17.$embeddedSchemaType.options.transform) {
                                for(var l15 = [].concat(t6.get(s17)), f14 = a17.$embeddedSchemaType.options.transform, p11 = 0; p11 < l15.length; ++p11){
                                    var h6 = f14.call(t6, l15[p11]);
                                    l15[p11] = h6, ct(s17, h6);
                                }
                                e12[s17] = l15;
                            }
                        }
                    })(this, p9), t4.useProjection && (function(t6, e12) {
                        var r19 = t6.$__schema, n19 = Object.keys(r19.paths || {
                        });
                        if (!t6._doc) return e12;
                        var o20 = t6.$__.selected;
                        (void 0) === o20 && (o20 = {
                        }, M.applyPaths(o20, r19));
                        if (null == o20 || 0 === Object.keys(o20).length) return e12;
                        for(var i12 = 0, s18 = n19; i12 < s18.length; i12++){
                            var a18 = s18[i12];
                            null == o20[a18] || o20[a18] || delete e12[a18];
                        }
                    })(this, p9), true === h5 || u18.toObject && h5) {
                        var y8 = t4.json ? u18.toJSON : u18.toObject;
                        y8 && (h5 = "function" == typeof t4.transform ? t4.transform : y8.transform);
                    } else t4.transform = f12;
                    if ("function" == typeof h5) {
                        var d9 = h5(this, p9, t4);
                        (void 0) !== d9 && (p9 = d9);
                    }
                    return p9;
                }, tt.prototype.toObject = function(t4) {
                    return this.$toObject(t4);
                }, tt.prototype.toJSON = function(t4) {
                    return this.$toObject(t4, true);
                }, tt.prototype.parent = function() {
                    return this.$__.parent;
                }, tt.prototype.$parent = tt.prototype.parent, tt.prototype.inspect = function(t4) {
                    var e11;
                    I.isPOJO(t4) && ((e11 = t4).minimize = false);
                    var r18 = this.toObject(e11);
                    return null == r18 ? "MongooseDocument { " + r18 + " }" : r18;
                }, R.custom && /*!
  * Avoid Node deprecation warning DEP0079
  */ (tt.prototype[R.custom] = tt.prototype.inspect), tt.prototype.toString = function() {
                    var t4 = this.inspect();
                    return "string" == typeof t4 ? t4 : R(t4);
                }, tt.prototype.equals = function(t4) {
                    if (!t4) return false;
                    var e11 = this.$__getValue("_id"), r18 = null != t4.$__ ? t4.$__getValue("_id") : t4;
                    return e11 || r18 ? e11 && e11.equals ? e11.equals(r18) : e11 === r18 : U(this, t4);
                }, tt.prototype.populate = function() {
                    if (0 === arguments.length) return this;
                    var t4, e11 = this.$__.populate || (this.$__.populate = {
                    }), r18 = I.args(arguments);
                    if ("function" == typeof r18[r18.length - 1] && (t4 = r18.pop()), r18.length) {
                        var n19, o19 = I.populate.apply(null, r18), s14 = i7(o19);
                        try {
                            for(s14.s(); !(n19 = s14.n()).done;){
                                var a16 = n19.value;
                                e11[a16.path] = a16;
                            }
                        } catch (t5) {
                            s14.e(t5);
                        } finally{
                            s14.f();
                        }
                    }
                    if (t4) {
                        var u18 = I.object.vals(e11);
                        this.$__.populate = void 0;
                        var c13 = this.constructor;
                        if (this.$__isNested) {
                            c13 = this.$__[G].constructor;
                            var l13 = this.$__.nestedPath;
                            u18.forEach(function(t5) {
                                t5.path = l13 + "." + t5.path;
                            });
                        }
                        if (null != this.$session()) {
                            var f12 = this.$session();
                            u18.forEach(function(t5) {
                                null != t5.options ? "session" in t5.options || (t5.options.session = f12) : t5.options = {
                                    session: f12
                                };
                            });
                        }
                        c13.populate(this, u18, t4);
                    }
                    return this;
                }, tt.prototype.$getPopulatedDocs = function() {
                    var t4 = [];
                    null != this.$__.populated && (t4 = t4.concat(Object.keys(this.$__.populated))), null != this.$$populatedVirtuals && (t4 = t4.concat(Object.keys(this.$$populatedVirtuals)));
                    var e11, r18 = [], n20 = i7(t4);
                    try {
                        for(n20.s(); !(e11 = n20.n()).done;){
                            var o20 = e11.value, s18 = this.get(o20);
                            Array.isArray(s18) ? r18 = r18.concat(s18) : s18 instanceof tt && r18.push(s18);
                        }
                    } catch (t5) {
                        n20.e(t5);
                    } finally{
                        n20.f();
                    }
                    return r18;
                }, tt.prototype.execPopulate = function(t4) {
                    var e11 = this, r18 = null != t4 && "function" != typeof t4;
                    return r18 ? this.populate.apply(this, arguments).execPopulate() : S(t4, function(t5) {
                        e11.populate(t5);
                    }, this.constructor.events);
                }, tt.prototype.populated = function(t4, e11, r18) {
                    if (null == e11 || true === e11) {
                        if (!this.$__.populated) return;
                        var n20 = t4.endsWith(".$*") ? t4.replace(/\.\$\*$/, "") : t4, o21 = this.$__.populated[n20];
                        return o21 ? true === e11 ? o21 : o21.value : void 0;
                    }
                    this.$__.populated || (this.$__.populated = {
                    }), this.$__.populated[t4] = {
                        value: e11,
                        options: r18
                    };
                    for(var i10 = t4.split("."), s19 = 0; s19 < i10.length - 1; ++s19){
                        var a19 = i10.slice(0, s19 + 1).join("."), u20 = this.get(a19);
                        if (null != u20 && null != u20.$__ && this.populated(a19)) {
                            var c16 = i10.slice(s19 + 1).join(".");
                            u20.populated(c16, e11, r18);
                            break;
                        }
                    }
                    return e11;
                }, tt.prototype.depopulate = function(t4) {
                    var e11;
                    "string" == typeof t4 && (t4 = t4.split(" "));
                    var r18 = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [], n21 = P(this, "$__.populated", {
                    });
                    if (0 === arguments.length) {
                        var o22, s19 = i7(r18);
                        try {
                            for(s19.s(); !(o22 = s19.n()).done;){
                                var a20 = o22.value;
                                delete this.$$populatedVirtuals[a20], delete this._doc[a20], delete n21[a20];
                            }
                        } catch (t5) {
                            s19.e(t5);
                        } finally{
                            s19.f();
                        }
                        for(var u21 = Object.keys(n21), c17 = 0, l16 = u21; c17 < l16.length; c17++){
                            var f15 = l16[c17];
                            (e11 = this.populated(f15)) && (delete n21[f15], this.$set(f15, e11));
                        }
                        return this;
                    }
                    var p9, h5 = i7(t4);
                    try {
                        for(h5.s(); !(p9 = h5.n()).done;){
                            var y9 = p9.value;
                            e11 = this.populated(y9), delete n21[y9], -1 !== r18.indexOf(y9) ? (delete this.$$populatedVirtuals[y9], delete this._doc[y9]) : e11 && this.$set(y9, e11);
                        }
                    } catch (t5) {
                        h5.e(t5);
                    } finally{
                        h5.f();
                    }
                    return this;
                }, tt.prototype.$__fullPath = function(t4) {
                    return t4 || "";
                }, tt.prototype.getChanges = function() {
                    var t4 = this.$__delta();
                    return t4 ? t4[1] : {
                    };
                }, /*!
 * Module exports.
 */ tt.ValidationError = b, t2.exports = tt;
            }).call(this, r2(7), r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n3(t4) {
                return (n3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
                    return typeof t5;
                } : function(t5) {
                    return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
                })(t4);
            }
            function o3(t4, e6) {
                if (!(t4 instanceof e6)) throw new TypeError("Cannot call a class as a function");
            }
            function i7(t4, e6) {
                for(var r18 = 0; r18 < e6.length; r18++){
                    var n21 = e6[r18];
                    n21.enumerable = n21.enumerable || false, n21.configurable = true, "value" in n21 && (n21.writable = true), Object.defineProperty(t4, n21.key, n21);
                }
            }
            function s3(t4, e6) {
                return (s3 = Object.setPrototypeOf || function(t5, e11) {
                    return t5.__proto__ = e11, t5;
                })(t4, e6);
            }
            function a9(t4) {
                var e6 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t5) {
                        return false;
                    }
                }();
                return function() {
                    var r18, n22 = c3(t4);
                    if (e6) {
                        var o23 = c3(this).constructor;
                        r18 = Reflect.construct(n22, arguments, o23);
                    } else r18 = n22.apply(this, arguments);
                    return u6(this, r18);
                };
            }
            function u6(t4, e6) {
                return !e6 || "object" !== n3(e6) && "function" != typeof e6 ? (function(t5) {
                    if ((void 0) === t5) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t5;
                })(t4) : e6;
            }
            function c3(t4) {
                return (c3 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t5) {
                    return t5.__proto__ || Object.getPrototypeOf(t5);
                })(t4);
            }
            var l2 = r2(14), f3 = r2(3), p2 = r2(4), h5 = function(t4) {
                (function(t5, e6) {
                    if ("function" != typeof e6 && null !== e6) throw new TypeError("Super expression must either be null or a function");
                    t5.prototype = Object.create(e6 && e6.prototype, {
                        constructor: {
                            value: t5,
                            writable: true,
                            configurable: true
                        }
                    }), e6 && s3(t5, e6);
                })(l17, t4);
                var e6, r18, n22, c18 = a9(l17);
                function l17(t5, e11, r19, n23, i10) {
                    var s20;
                    if (o3(this, l17), arguments.length > 0) {
                        var a21 = y2(e11), f16 = d2(e11), p9 = _2(i10), h7 = v2(null, t5, a21, r19, p9, f16);
                        (s20 = c18.call(this, h7)).init(t5, e11, r19, n23, i10);
                    } else s20 = c18.call(this, v2());
                    return u6(s20);
                }
                return e6 = l17, r18 = [
                    {
                        key: "toJSON",
                        value: function() {
                            return {
                                stringValue: this.stringValue,
                                valueType: this.valueType,
                                kind: this.kind,
                                value: this.value,
                                path: this.path,
                                reason: this.reason,
                                name: this.name,
                                message: this.message
                            };
                        }
                    },
                    {
                        key: "init",
                        value: function(t5, e11, r19, n23, o24) {
                            this.stringValue = y2(e11), this.messageFormat = _2(o24), this.kind = t5, this.value = e11, this.path = r19, this.reason = n23, this.valueType = d2(e11);
                        }
                    },
                    {
                        key: "copy",
                        value: function(t5) {
                            this.messageFormat = t5.messageFormat, this.stringValue = t5.stringValue, this.kind = t5.kind, this.value = t5.value, this.path = t5.path, this.reason = t5.reason, this.message = t5.message, this.valueType = t5.valueType;
                        }
                    },
                    {
                        key: "setModel",
                        value: function(t5) {
                            this.model = t5, this.message = v2(t5, this.kind, this.stringValue, this.path, this.messageFormat, this.valueType);
                        }
                    }
                ], i7(e6.prototype, r18), n22 && i7(e6, n22), l17;
            }(l2);
            function y2(t4) {
                var e6 = p2.inspect(t4);
                return (e6 = e6.replace(/^'|'$/g, '"')).startsWith('"') || (e6 = '"' + e6 + '"'), e6;
            }
            function d2(t4) {
                if (null == t4) return "" + t4;
                var e6 = n3(t4);
                return "object" !== e6 || "function" != typeof t4.constructor ? e6 : t4.constructor.name;
            }
            function _2(t4) {
                var e6 = f3(t4, "options.cast", null);
                if ("string" == typeof e6) return e6;
            }
            /*!
 * ignore
 */ function v2(t4, e6, r18, n22, o24, i10) {
                if (null != o24) {
                    var s20 = o24.replace("{KIND}", e6).replace("{VALUE}", r18).replace("{PATH}", n22);
                    return null != t4 && (s20 = s20.replace("{MODEL}", t4.modelName)), s20;
                }
                var a22 = "Cast to " + e6 + " failed for value " + r18 + (i10 ? " (type " + i10 + ")" : "") + ' at path "' + n22 + '"';
                return null != t4 && (a22 += ' for model "' + t4.modelName + '"'), a22;
            }
            /*!
 * exports
 */ Object.defineProperty(h5.prototype, "name", {
                value: "CastError"
            }), t2.exports = h5;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ function n3(t4) {
                return (n3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
                    return typeof t5;
                } : function(t5) {
                    return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
                })(t4);
            }
            function o3(t4, e6) {
                if (!(t4 instanceof e6)) throw new TypeError("Cannot call a class as a function");
            }
            function i7(t4, e6) {
                return !e6 || "object" !== n3(e6) && "function" != typeof e6 ? (function(t5) {
                    if ((void 0) === t5) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t5;
                })(t4) : e6;
            }
            function s3(t4) {
                var e6 = "function" == typeof Map ? new Map : void 0;
                return (s3 = function(t5) {
                    if (null === t5 || (r18 = t5, -1 === Function.toString.call(r18).indexOf("[native code]"))) return t5;
                    var r18;
                    if ("function" != typeof t5) throw new TypeError("Super expression must either be null or a function");
                    if ((void 0) !== e6) {
                        if (e6.has(t5)) return e6.get(t5);
                        e6.set(t5, n22);
                    }
                    function n22() {
                        return a9(t5, arguments, l2(this).constructor);
                    }
                    return n22.prototype = Object.create(t5.prototype, {
                        constructor: {
                            value: n22,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    }), c3(n22, t5);
                })(t4);
            }
            function a9(t4, e6, r18) {
                return (a9 = u6() ? Reflect.construct : function(t5, e11, r19) {
                    var n22 = [
                        null
                    ];
                    n22.push.apply(n22, e11);
                    var o24 = new (Function.bind.apply(t5, n22));
                    return r19 && c3(o24, r19.prototype), o24;
                }).apply(null, arguments);
            }
            function u6() {
                if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                if (Reflect.construct.sham) return false;
                if ("function" == typeof Proxy) return true;
                try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                    })), true;
                } catch (t4) {
                    return false;
                }
            }
            function c3(t4, e6) {
                return (c3 = Object.setPrototypeOf || function(t5, e11) {
                    return t5.__proto__ = e11, t5;
                })(t4, e6);
            }
            function l2(t4) {
                return (l2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t5) {
                    return t5.__proto__ || Object.getPrototypeOf(t5);
                })(t4);
            }
            var f3 = function(t4) {
                (function(t5, e6) {
                    if ("function" != typeof e6 && null !== e6) throw new TypeError("Super expression must either be null or a function");
                    t5.prototype = Object.create(e6 && e6.prototype, {
                        constructor: {
                            value: t5,
                            writable: true,
                            configurable: true
                        }
                    }), e6 && c3(t5, e6);
                })(s21, t4);
                var e6, r18, n22 = (e6 = s21, r18 = u6(), function() {
                    var t5, n23 = l2(e6);
                    if (r18) {
                        var o24 = l2(this).constructor;
                        t5 = Reflect.construct(n23, arguments, o24);
                    } else t5 = n23.apply(this, arguments);
                    return i7(this, t5);
                });
                function s21() {
                    return o3(this, s21), n22.apply(this, arguments);
                }
                return s21;
            }(s3(Error));
            Object.defineProperty(f3.prototype, "name", {
                value: "MongooseError"
            }), t2.exports = f3;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ var n3 = null;
            t2.exports.get = function() {
                return n3;
            }, t2.exports.set = function(t4) {
                n3 = t4;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e6) {
                function r18(t4, r19) {
                    return new e6(t4, r19);
                }
                t2.exports = {
                    normalizedFunctionString: function(t4) {
                        return t4.toString().replace(/function *\(/, "function (");
                    },
                    allocBuffer: "function" == typeof e6.alloc ? function() {
                        return e6.alloc.apply(e6, arguments);
                    } : r18,
                    toBuffer: "function" == typeof e6.from ? function() {
                        return e6.from.apply(e6, arguments);
                    } : r18
                };
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ e3.internalToObjectOptions = {
                transform: false,
                virtuals: false,
                getters: false,
                _skipDepopulateTopLevel: true,
                depopulate: true,
                flattenDecimals: false,
                useProjection: false
            };
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e6) {
                /*!
 * Module dependencies.
 */ function n3(t4) {
                    return (n3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
                        return typeof t5;
                    } : function(t5) {
                        return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
                    })(t4);
                }
                function o3(t4, e11) {
                    var r18 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
                    if (!r18) {
                        if (Array.isArray(t4) || (r18 = (function(t5, e12) {
                            if (!t5) return;
                            if ("string" == typeof t5) return i7(t5, e12);
                            var r19 = Object.prototype.toString.call(t5).slice(8, -1);
                            "Object" === r19 && t5.constructor && (r19 = t5.constructor.name);
                            if ("Map" === r19 || "Set" === r19) return Array.from(t5);
                            if ("Arguments" === r19 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r19)) return i7(t5, e12);
                        })(t4)) || e11 && t4 && "number" == typeof t4.length) {
                            r18 && (t4 = r18);
                            var n22 = 0, o25 = function() {
                            };
                            return {
                                s: o25,
                                n: function() {
                                    return n22 >= t4.length ? {
                                        done: true
                                    } : {
                                        done: false,
                                        value: t4[n22++]
                                    };
                                },
                                e: function(t5) {
                                    throw t5;
                                },
                                f: o25
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var s3, a9 = true, u6 = false;
                    return {
                        s: function() {
                            r18 = r18.call(t4);
                        },
                        n: function() {
                            var t5 = r18.next();
                            return a9 = t5.done, t5;
                        },
                        e: function(t5) {
                            u6 = true, s3 = t5;
                        },
                        f: function() {
                            try {
                                a9 || null == r18.return || r18.return();
                            } finally{
                                if (u6) throw s3;
                            }
                        }
                    };
                }
                function i7(t4, e11) {
                    (null == e11 || e11 > t4.length) && (e11 = t4.length);
                    for(var r18 = 0, n23 = new Array(e11); r18 < e11; r18++)n23[r18] = t4[r18];
                    return n23;
                }
                function s3(t4, e11) {
                    if (!(t4 instanceof e11)) throw new TypeError("Cannot call a class as a function");
                }
                function a9(t4, e11) {
                    for(var r18 = 0; r18 < e11.length; r18++){
                        var n23 = e11[r18];
                        n23.enumerable = n23.enumerable || false, n23.configurable = true, "value" in n23 && (n23.writable = true), Object.defineProperty(t4, n23.key, n23);
                    }
                }
                function u6(t4, e11, r18) {
                    return (u6 = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t5, e12, r19) {
                        var n24 = function(t6, e13) {
                            for(; !Object.prototype.hasOwnProperty.call(t6, e13) && null !== (t6 = p2(t6)););
                            return t6;
                        }(t5, e12);
                        if (n24) {
                            var o26 = Object.getOwnPropertyDescriptor(n24, e12);
                            return o26.get ? o26.get.call(r19) : o26.value;
                        }
                    })(t4, e11, r18 || t4);
                }
                function c3(t4, e11) {
                    return (c3 = Object.setPrototypeOf || function(t5, e12) {
                        return t5.__proto__ = e12, t5;
                    })(t4, e11);
                }
                function l2(t4) {
                    var e11 = function() {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                        if (Reflect.construct.sham) return false;
                        if ("function" == typeof Proxy) return true;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                            })), true;
                        } catch (t5) {
                            return false;
                        }
                    }();
                    return function() {
                        var r18, n24 = p2(t4);
                        if (e11) {
                            var o27 = p2(this).constructor;
                            r18 = Reflect.construct(n24, arguments, o27);
                        } else r18 = n24.apply(this, arguments);
                        return f3(this, r18);
                    };
                }
                function f3(t4, e11) {
                    return !e11 || "object" !== n3(e11) && "function" != typeof e11 ? (function(t5) {
                        if ((void 0) === t5) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t5;
                    })(t4) : e11;
                }
                function p2(t4) {
                    return (p2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t5) {
                        return t5.__proto__ || Object.getPrototypeOf(t5);
                    })(t4);
                }
                var h5 = r2(85), y2 = r2(12), d2 = r2(8), _2 = r2(88), v2 = r2(35), m2 = r2(17).internalToObjectOptions, g2 = r2(4), b2 = r2(1), w4 = r2(0).arrayAtomicsSymbol, O3 = r2(0).arrayParentSymbol, S3 = r2(0).arrayPathSymbol, A = r2(0).arraySchemaSymbol, $2 = r2(0).documentArrayParent, E3 = Array.prototype.push, j2 = function(t4) {
                    (function(t5, e11) {
                        if ("function" != typeof e11 && null !== e11) throw new TypeError("Super expression must either be null or a function");
                        t5.prototype = Object.create(e11 && e11.prototype, {
                            constructor: {
                                value: t5,
                                writable: true,
                                configurable: true
                            }
                        }), e11 && c3(t5, e11);
                    })(n24, t4);
                    var r18 = l2(n24);
                    function n24() {
                        return s3(this, n24), r18.apply(this, arguments);
                    }
                    return (function(t5, e11, r19) {
                        e11 && a9(t5.prototype, e11), r19 && a9(t5, r19);
                    })(n24, [
                        {
                            key: "isMongooseDocumentArray",
                            get: function() {
                                return true;
                            }
                        },
                        {
                            key: "toBSON",
                            value: function() {
                                return this.toObject(m2);
                            }
                        },
                        {
                            key: "map",
                            value: function() {
                                var t5 = u6(p2(n24.prototype), "map", this).apply(this, arguments);
                                return t5[A] = null, t5[S3] = null, t5[O3] = null, t5;
                            }
                        },
                        {
                            key: "_cast",
                            value: function(t5, r19) {
                                if (null == this[A]) return t5;
                                var n25 = this[A].casterConstructor;
                                if ((n25.$isMongooseDocumentArray ? t5 && t5.isMongooseDocumentArray : t5 instanceof n25) || t5 && t5.constructor && t5.constructor.baseCasterConstructor === n25) return t5[$2] && t5.__parentArray || (t5[$2] = this[O3], t5.__parentArray = this), t5.$setIndex(r19), t5;
                                if (null == t5) return null;
                                if ((e6.isBuffer(t5) || t5 instanceof d2 || !b2.isObject(t5)) && (t5 = {
                                    _id: t5
                                }), t5 && n25.discriminators && n25.schema && n25.schema.options && n25.schema.options.discriminatorKey) {
                                    if ("string" == typeof t5[n25.schema.options.discriminatorKey] && n25.discriminators[t5[n25.schema.options.discriminatorKey]]) n25 = n25.discriminators[t5[n25.schema.options.discriminatorKey]];
                                    else {
                                        var o28 = v2(n25.discriminators, t5[n25.schema.options.discriminatorKey]);
                                        o28 && (n25 = o28);
                                    }
                                }
                                return n25.$isMongooseDocumentArray ? n25.cast(t5, this, void 0, void 0, r19) : new n25(t5, this, void 0, void 0, r19);
                            }
                        },
                        {
                            key: "id",
                            value: function(t5) {
                                var e11, r19, n25;
                                try {
                                    e11 = _2(t5).toString();
                                } catch (t6) {
                                    e11 = null;
                                }
                                var i10, s21 = o3(this);
                                try {
                                    for(s21.s(); !(i10 = s21.n()).done;){
                                        var a22 = i10.value;
                                        if (a22 && null != (n25 = a22.get("_id"))) {
                                            if (n25 instanceof y2) {
                                                if (r19 || (r19 = String(t5)), r19 == n25._id) return a22;
                                            } else if (t5 instanceof d2 || n25 instanceof d2) {
                                                if (e11 == n25) return a22;
                                            } else if (t5 == n25 || b2.deepEqual(t5, n25)) return a22;
                                        }
                                    }
                                } catch (t6) {
                                    s21.e(t6);
                                } finally{
                                    s21.f();
                                }
                                return null;
                            }
                        },
                        {
                            key: "toObject",
                            value: function(t5) {
                                return [].concat(this.map(function(e11) {
                                    return null == e11 ? null : "function" != typeof e11.toObject ? e11 : e11.toObject(t5);
                                }));
                            }
                        },
                        {
                            key: "slice",
                            value: function() {
                                var t5 = u6(p2(n24.prototype), "slice", this).apply(this, arguments);
                                return t5[O3] = this[O3], t5[S3] = this[S3], t5;
                            }
                        },
                        {
                            key: "push",
                            value: function() {
                                var t5 = u6(p2(n24.prototype), "push", this).apply(this, arguments);
                                return P(this), t5;
                            }
                        },
                        {
                            key: "pull",
                            value: function() {
                                var t5 = u6(p2(n24.prototype), "pull", this).apply(this, arguments);
                                return P(this), t5;
                            }
                        },
                        {
                            key: "shift",
                            value: function() {
                                var t5 = u6(p2(n24.prototype), "shift", this).apply(this, arguments);
                                return P(this), t5;
                            }
                        },
                        {
                            key: "splice",
                            value: function() {
                                var t5 = u6(p2(n24.prototype), "splice", this).apply(this, arguments);
                                return P(this), t5;
                            }
                        },
                        {
                            key: "inspect",
                            value: function() {
                                return this.toObject();
                            }
                        },
                        {
                            key: "create",
                            value: function(t5) {
                                var e11 = this[A].casterConstructor;
                                if (t5 && e11.discriminators && e11.schema && e11.schema.options && e11.schema.options.discriminatorKey) {
                                    if ("string" == typeof t5[e11.schema.options.discriminatorKey] && e11.discriminators[t5[e11.schema.options.discriminatorKey]]) e11 = e11.discriminators[t5[e11.schema.options.discriminatorKey]];
                                    else {
                                        var r19 = v2(e11.discriminators, t5[e11.schema.options.discriminatorKey]);
                                        r19 && (e11 = r19);
                                    }
                                }
                                return new e11(t5, this);
                            }
                        },
                        {
                            key: "notify",
                            value: function(t5) {
                                var e11 = this;
                                return function r20(n25, o29) {
                                    for(var i10 = (o29 = o29 || e11).length; i10--;)if (null != o29[i10]) {
                                        switch(t5){
                                            case "save":
                                                n25 = e11[i10];
                                        }
                                        o29[i10].isMongooseArray ? r20(n25, o29[i10]) : o29[i10] && o29[i10].emit(t5, n25);
                                    }
                                };
                            }
                        },
                        {
                            key: "_markModified",
                            value: function(t5, e11) {
                                var r20, n25 = this[O3];
                                if (n25) {
                                    if (r20 = this[S3], arguments.length) {
                                        if (null != e11) {
                                            var o29 = t5.__index;
                                            r20 = r20 + "." + o29 + "." + e11;
                                        } else r20 = r20 + "." + t5;
                                    }
                                    if (null != r20 && r20.endsWith(".$")) return this;
                                    n25.markModified(r20, arguments.length > 0 ? t5 : n25);
                                }
                                return this;
                            }
                        }
                    ]), n24;
                }(h5);
                /*!
 * If this is a document array, each element may contain single
 * populated paths, so we need to modify the top-level document's
 * populated cache. See gh-8247, gh-8265.
 */ function P(t4) {
                    var e11 = t4[O3];
                    if (e11 && null != e11.$__.populated) {
                        var r18, n24 = o3(Object.keys(e11.$__.populated).filter(function(e12) {
                            return e12.startsWith(t4[S3] + ".");
                        }));
                        try {
                            var i10 = function() {
                                var n25 = r18.value, o30 = n25.slice((t4[S3] + ".").length);
                                if (!Array.isArray(e11.$__.populated[n25].value)) return "continue";
                                e11.$__.populated[n25].value = t4.map(function(t5) {
                                    return t5.populated(o30);
                                });
                            };
                            for(n24.s(); !(r18 = n24.n()).done;)i10();
                        } catch (t5) {
                            n24.e(t5);
                        } finally{
                            n24.f();
                        }
                    }
                }
                g2.inspect.custom && (j2.prototype[g2.inspect.custom] = j2.prototype.inspect), /*!
 * Module exports.
 */ t2.exports = function(t4, e11, r20) {
                    var n25 = new j2;
                    if (n25[w4] = {
                    }, n25[A] = void 0, Array.isArray(t4) && (t4[S3] === e11 && t4[O3] === r20 && (n25[w4] = Object.assign({
                    }, t4[w4])), t4.forEach(function(t5) {
                        E3.call(n25, t5);
                    })), n25[S3] = e11, r20 && r20 instanceof y2) for(n25[O3] = r20, n25[A] = r20.schema.path(e11); null != n25 && null != n25[A] && n25[A].$isMongooseArray && !n25[A].$isMongooseDocumentArray;)n25[A] = n25[A].casterConstructor;
                    return n25;
                };
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            function n3(t4) {
                return (n3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
                    return typeof t5;
                } : function(t5) {
                    return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
                })(t4);
            }
            var o3, i7 = "object" === ("undefined" == typeof Reflect ? "undefined" : n3(Reflect)) ? Reflect : null, s3 = i7 && "function" == typeof i7.apply ? i7.apply : function(t4, e6, r20) {
                return Function.prototype.apply.call(t4, e6, r20);
            };
            o3 = i7 && "function" == typeof i7.ownKeys ? i7.ownKeys : Object.getOwnPropertySymbols ? function(t4) {
                return Object.getOwnPropertyNames(t4).concat(Object.getOwnPropertySymbols(t4));
            } : function(t4) {
                return Object.getOwnPropertyNames(t4);
            };
            var a9 = Number.isNaN || function(t4) {
                return t4 != t4;
            };
            function u6() {
                u6.init.call(this);
            }
            t2.exports = u6, t2.exports.once = function(t4, e6) {
                return new Promise(function(r20, n25) {
                    function o30(r21) {
                        t4.removeListener(e6, i12), n25(r21);
                    }
                    function i12() {
                        "function" == typeof t4.removeListener && t4.removeListener("error", o30), r20([].slice.call(arguments));
                    }
                    m2(t4, e6, i12, {
                        once: true
                    }), "error" !== e6 && (function(t5, e11, r21) {
                        "function" == typeof t5.on && m2(t5, "error", e11, r21);
                    })(t4, o30, {
                        once: true
                    });
                });
            }, u6.EventEmitter = u6, u6.prototype._events = void 0, u6.prototype._eventsCount = 0, u6.prototype._maxListeners = void 0;
            var c3 = 10;
            function l2(t4) {
                if ("function" != typeof t4) throw new TypeError('The "listener" argument must be of type Function. Received type ' + n3(t4));
            }
            function f3(t4) {
                return (void 0) === t4._maxListeners ? u6.defaultMaxListeners : t4._maxListeners;
            }
            function p2(t4, e6, r20, n25) {
                var o30, i12, s21, a23;
                if (l2(r20), (void 0) === (i12 = t4._events) ? (i12 = t4._events = Object.create(null), t4._eventsCount = 0) : ((void 0) !== i12.newListener && (t4.emit("newListener", e6, r20.listener ? r20.listener : r20), i12 = t4._events), s21 = i12[e6]), (void 0) === s21) s21 = i12[e6] = r20, ++t4._eventsCount;
                else if ("function" == typeof s21 ? s21 = i12[e6] = n25 ? [
                    r20,
                    s21
                ] : [
                    s21,
                    r20
                ] : n25 ? s21.unshift(r20) : s21.push(r20), (o30 = f3(t4)) > 0 && s21.length > o30 && !s21.warned) {
                    s21.warned = true;
                    var u22 = new Error("Possible EventEmitter memory leak detected. " + s21.length + " " + String(e6) + " listeners added. Use emitter.setMaxListeners() to increase limit");
                    u22.name = "MaxListenersExceededWarning", u22.emitter = t4, u22.type = e6, u22.count = s21.length, a23 = u22, console && console.warn && console.warn(a23);
                }
                return t4;
            }
            function h5() {
                if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
            }
            function y2(t4, e6, r20) {
                var n25 = {
                    fired: false,
                    wrapFn: void 0,
                    target: t4,
                    type: e6,
                    listener: r20
                }, o30 = h5.bind(n25);
                return o30.listener = r20, n25.wrapFn = o30, o30;
            }
            function d2(t4, e6, r20) {
                var n25 = t4._events;
                if ((void 0) === n25) return [];
                var o30 = n25[e6];
                return (void 0) === o30 ? [] : "function" == typeof o30 ? r20 ? [
                    o30.listener || o30
                ] : [
                    o30
                ] : r20 ? (function(t5) {
                    for(var e11 = new Array(t5.length), r21 = 0; r21 < e11.length; ++r21)e11[r21] = t5[r21].listener || t5[r21];
                    return e11;
                })(o30) : v2(o30, o30.length);
            }
            function _2(t4) {
                var e6 = this._events;
                if ((void 0) !== e6) {
                    var r20 = e6[t4];
                    if ("function" == typeof r20) return 1;
                    if ((void 0) !== r20) return r20.length;
                }
                return 0;
            }
            function v2(t4, e6) {
                for(var r21 = new Array(e6), n25 = 0; n25 < e6; ++n25)r21[n25] = t4[n25];
                return r21;
            }
            function m2(t4, e6, r21, o30) {
                if ("function" == typeof t4.on) o30.once ? t4.once(e6, r21) : t4.on(e6, r21);
                else {
                    if ("function" != typeof t4.addEventListener) throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + n3(t4));
                    t4.addEventListener(e6, function n25(i12) {
                        o30.once && t4.removeEventListener(e6, n25), r21(i12);
                    });
                }
            }
            Object.defineProperty(u6, "defaultMaxListeners", {
                enumerable: true,
                get: function() {
                    return c3;
                },
                set: function(t4) {
                    if ("number" != typeof t4 || t4 < 0 || a9(t4)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t4 + ".");
                    c3 = t4;
                }
            }), u6.init = function() {
                (void 0) !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
            }, u6.prototype.setMaxListeners = function(t4) {
                if ("number" != typeof t4 || t4 < 0 || a9(t4)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t4 + ".");
                return this._maxListeners = t4, this;
            }, u6.prototype.getMaxListeners = function() {
                return f3(this);
            }, u6.prototype.emit = function(t4) {
                for(var e6 = [], r21 = 1; r21 < arguments.length; r21++)e6.push(arguments[r21]);
                var n25 = "error" === t4, o30 = this._events;
                if ((void 0) !== o30) n25 = n25 && (void 0) === o30.error;
                else if (!n25) return false;
                if (n25) {
                    var i12;
                    if (e6.length > 0 && (i12 = e6[0]), i12 instanceof Error) throw i12;
                    var a23 = new Error("Unhandled error." + (i12 ? " (" + i12.message + ")" : ""));
                    throw a23.context = i12, a23;
                }
                var u23 = o30[t4];
                if ((void 0) === u23) return false;
                if ("function" == typeof u23) s3(u23, this, e6);
                else {
                    var c18 = u23.length, l17 = v2(u23, c18);
                    for(r21 = 0; r21 < c18; ++r21)s3(l17[r21], this, e6);
                }
                return true;
            }, u6.prototype.addListener = function(t4, e6) {
                return p2(this, t4, e6, false);
            }, u6.prototype.on = u6.prototype.addListener, u6.prototype.prependListener = function(t4, e6) {
                return p2(this, t4, e6, true);
            }, u6.prototype.once = function(t4, e6) {
                return l2(e6), this.on(t4, y2(this, t4, e6)), this;
            }, u6.prototype.prependOnceListener = function(t4, e6) {
                return l2(e6), this.prependListener(t4, y2(this, t4, e6)), this;
            }, u6.prototype.removeListener = function(t4, e6) {
                var r21, n25, o30, i13, s21;
                if (l2(e6), (void 0) === (n25 = this._events)) return this;
                if ((void 0) === (r21 = n25[t4])) return this;
                if (r21 === e6 || r21.listener === e6) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete n25[t4], n25.removeListener && this.emit("removeListener", t4, r21.listener || e6));
                else if ("function" != typeof r21) {
                    for(o30 = -1, i13 = r21.length - 1; i13 >= 0; i13--)if (r21[i13] === e6 || r21[i13].listener === e6) {
                        s21 = r21[i13].listener, o30 = i13;
                        break;
                    }
                    if (o30 < 0) return this;
                    0 === o30 ? r21.shift() : (function(t5, e11) {
                        for(; e11 + 1 < t5.length; e11++)t5[e11] = t5[e11 + 1];
                        t5.pop();
                    })(r21, o30), 1 === r21.length && (n25[t4] = r21[0]), (void 0) !== n25.removeListener && this.emit("removeListener", t4, s21 || e6);
                }
                return this;
            }, u6.prototype.off = u6.prototype.removeListener, u6.prototype.removeAllListeners = function(t4) {
                var e6, r21, n25;
                if ((void 0) === (r21 = this._events)) return this;
                if ((void 0) === r21.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : (void 0) !== r21[t4] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete r21[t4]), this;
                if (0 === arguments.length) {
                    var o30, i13 = Object.keys(r21);
                    for(n25 = 0; n25 < i13.length; ++n25)"removeListener" !== (o30 = i13[n25]) && this.removeAllListeners(o30);
                    return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
                }
                if ("function" == typeof (e6 = r21[t4])) this.removeListener(t4, e6);
                else if ((void 0) !== e6) for(n25 = e6.length - 1; n25 >= 0; n25--)this.removeListener(t4, e6[n25]);
                return this;
            }, u6.prototype.listeners = function(t4) {
                return d2(this, t4, true);
            }, u6.prototype.rawListeners = function(t4) {
                return d2(this, t4, false);
            }, u6.listenerCount = function(t4, e6) {
                return "function" == typeof t4.listenerCount ? t4.listenerCount(e6) : _2.call(t4, e6);
            }, u6.prototype.listenerCount = _2, u6.prototype.eventNames = function() {
                return this._eventsCount > 0 ? o3(this._events) : [];
            };
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = r2(15).get().Decimal128;
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e6) {
                /*!
 * Determines if `arg` is an object.
 *
 * @param {Object|Array|String|Function|RegExp|any} arg
 * @api private
 * @return {Boolean}
 */ t2.exports = function(t4) {
                    return !!e6.isBuffer(t4) || "[object Object]" === Object.prototype.toString.call(t4);
                };
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e6) {
                function n3(t4) {
                    return (n3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
                        return typeof t5;
                    } : function(t5) {
                        return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
                    })(t4);
                }
                var o3 = r2(117);
                /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */ function i7(t4, e11) {
                    if (t4 === e11) return 0;
                    for(var r21 = t4.length, n25 = e11.length, o31 = 0, i14 = Math.min(r21, n25); o31 < i14; ++o31)if (t4[o31] !== e11[o31]) {
                        r21 = t4[o31], n25 = e11[o31];
                        break;
                    }
                    return r21 < n25 ? -1 : n25 < r21 ? 1 : 0;
                }
                function s3(t4) {
                    return e6.Buffer && "function" == typeof e6.Buffer.isBuffer ? e6.Buffer.isBuffer(t4) : !(null == t4 || !t4._isBuffer);
                }
                var a9 = r2(4), u6 = Object.prototype.hasOwnProperty, c3 = Array.prototype.slice, l2 = "foo" === (function() {
                }).name;
                function f3(t4) {
                    return Object.prototype.toString.call(t4);
                }
                function p2(t4) {
                    return !s3(t4) && "function" == typeof e6.ArrayBuffer && ("function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(t4) : !!t4 && (t4 instanceof DataView || !!(t4.buffer && t4.buffer instanceof ArrayBuffer)));
                }
                var h5 = t2.exports = g2, y2 = /\s*function\s+([^\(\s]*)\s*/;
                function d2(t4) {
                    if (a9.isFunction(t4)) {
                        if (l2) return t4.name;
                        var e11 = t4.toString().match(y2);
                        return e11 && e11[1];
                    }
                }
                function _2(t4, e12) {
                    return "string" == typeof t4 ? t4.length < e12 ? t4 : t4.slice(0, e12) : t4;
                }
                function v2(t4) {
                    if (l2 || !a9.isFunction(t4)) return a9.inspect(t4);
                    var e12 = d2(t4);
                    return "[Function" + (e12 ? ": " + e12 : "") + "]";
                }
                function m2(t4, e12, r21, n25, o31) {
                    throw new h5.AssertionError({
                        message: r21,
                        actual: t4,
                        expected: e12,
                        operator: n25,
                        stackStartFunction: o31
                    });
                }
                function g2(t4, e12) {
                    t4 || m2(t4, true, e12, "==", h5.ok);
                }
                function b2(t4, e12, r21, o31) {
                    if (t4 === e12) return true;
                    if (s3(t4) && s3(e12)) return 0 === i7(t4, e12);
                    if (a9.isDate(t4) && a9.isDate(e12)) return t4.getTime() === e12.getTime();
                    if (a9.isRegExp(t4) && a9.isRegExp(e12)) return t4.source === e12.source && t4.global === e12.global && t4.multiline === e12.multiline && t4.lastIndex === e12.lastIndex && t4.ignoreCase === e12.ignoreCase;
                    if (null !== t4 && "object" === n3(t4) || null !== e12 && "object" === n3(e12)) {
                        if (p2(t4) && p2(e12) && f3(t4) === f3(e12) && !(t4 instanceof Float32Array || t4 instanceof Float64Array)) return 0 === i7(new Uint8Array(t4.buffer), new Uint8Array(e12.buffer));
                        if (s3(t4) !== s3(e12)) return false;
                        var u23 = (o31 = o31 || {
                            actual: [],
                            expected: []
                        }).actual.indexOf(t4);
                        return -1 !== u23 && u23 === o31.expected.indexOf(e12) || (o31.actual.push(t4), o31.expected.push(e12), (function(t5, e13, r22, n25) {
                            if (null == t5 || null == e13) return false;
                            if (a9.isPrimitive(t5) || a9.isPrimitive(e13)) return t5 === e13;
                            if (r22 && Object.getPrototypeOf(t5) !== Object.getPrototypeOf(e13)) return false;
                            var o32 = w4(t5), i14 = w4(e13);
                            if (o32 && !i14 || !o32 && i14) return false;
                            if (o32) return t5 = c3.call(t5), e13 = c3.call(e13), b2(t5, e13, r22);
                            var s21, u24, l18 = A(t5), f17 = A(e13);
                            if (l18.length !== f17.length) return false;
                            for(l18.sort(), f17.sort(), u24 = l18.length - 1; u24 >= 0; u24--)if (l18[u24] !== f17[u24]) return false;
                            for(u24 = l18.length - 1; u24 >= 0; u24--)if (s21 = l18[u24], !b2(t5[s21], e13[s21], r22, n25)) return false;
                            return true;
                        })(t4, e12, r21, o31));
                    }
                    return r21 ? t4 === e12 : t4 == e12;
                }
                function w4(t4) {
                    return "[object Arguments]" == Object.prototype.toString.call(t4);
                }
                function O3(t4, e12) {
                    if (!t4 || !e12) return false;
                    if ("[object RegExp]" == Object.prototype.toString.call(e12)) return e12.test(t4);
                    try {
                        if (t4 instanceof e12) return true;
                    } catch (t5) {
                    }
                    return !Error.isPrototypeOf(e12) && true === e12.call({
                    }, t4);
                }
                function S3(t4, e12, r21, n25) {
                    var o31;
                    if ("function" != typeof e12) throw new TypeError('"block" argument must be a function');
                    "string" == typeof r21 && (n25 = r21, r21 = null), o31 = (function(t5) {
                        var e13;
                        try {
                            t5();
                        } catch (t6) {
                            e13 = t6;
                        }
                        return e13;
                    })(e12), n25 = (r21 && r21.name ? " (" + r21.name + ")." : ".") + (n25 ? " " + n25 : "."), t4 && !o31 && m2(o31, r21, "Missing expected exception" + n25);
                    var i14 = "string" == typeof n25, s21 = !t4 && o31 && !r21;
                    if ((!t4 && a9.isError(o31) && i14 && O3(o31, r21) || s21) && m2(o31, r21, "Got unwanted exception" + n25), t4 && o31 && r21 && !O3(o31, r21) || !t4 && o31) throw o31;
                }
                h5.AssertionError = function(t4) {
                    this.name = "AssertionError", this.actual = t4.actual, this.expected = t4.expected, this.operator = t4.operator, t4.message ? (this.message = t4.message, this.generatedMessage = false) : (this.message = (function(t5) {
                        return _2(v2(t5.actual), 128) + " " + t5.operator + " " + _2(v2(t5.expected), 128);
                    })(this), this.generatedMessage = true);
                    var e12 = t4.stackStartFunction || m2;
                    if (Error.captureStackTrace) Error.captureStackTrace(this, e12);
                    else {
                        var r21 = new Error;
                        if (r21.stack) {
                            var n25 = r21.stack, o31 = d2(e12), i14 = n25.indexOf("\n" + o31);
                            if (i14 >= 0) {
                                var s21 = n25.indexOf("\n", i14 + 1);
                                n25 = n25.substring(s21 + 1);
                            }
                            this.stack = n25;
                        }
                    }
                }, a9.inherits(h5.AssertionError, Error), h5.fail = m2, h5.ok = g2, h5.equal = function(t4, e12, r22) {
                    t4 != e12 && m2(t4, e12, r22, "==", h5.equal);
                }, h5.notEqual = function(t4, e12, r22) {
                    t4 == e12 && m2(t4, e12, r22, "!=", h5.notEqual);
                }, h5.deepEqual = function(t4, e12, r22) {
                    b2(t4, e12, false) || m2(t4, e12, r22, "deepEqual", h5.deepEqual);
                }, h5.deepStrictEqual = function(t4, e12, r22) {
                    b2(t4, e12, true) || m2(t4, e12, r22, "deepStrictEqual", h5.deepStrictEqual);
                }, h5.notDeepEqual = function(t4, e12, r22) {
                    b2(t4, e12, false) && m2(t4, e12, r22, "notDeepEqual", h5.notDeepEqual);
                }, h5.notDeepStrictEqual = function t4(e12, r22, n26) {
                    b2(e12, r22, true) && m2(e12, r22, n26, "notDeepStrictEqual", t4);
                }, h5.strictEqual = function(t5, e12, r22) {
                    t5 !== e12 && m2(t5, e12, r22, "===", h5.strictEqual);
                }, h5.notStrictEqual = function(t5, e12, r22) {
                    t5 === e12 && m2(t5, e12, r22, "!==", h5.notStrictEqual);
                }, h5.throws = function(t5, e12, r22) {
                    S3(true, t5, e12, r22);
                }, h5.doesNotThrow = function(t5, e12, r22) {
                    S3(false, t5, e12, r22);
                }, h5.ifError = function(t5) {
                    if (t5) throw t5;
                }, h5.strict = o3(function t5(e12, r22) {
                    e12 || m2(e12, true, r22, "==", t5);
                }, h5, {
                    equal: h5.strictEqual,
                    deepEqual: h5.deepStrictEqual,
                    notEqual: h5.notStrictEqual,
                    notDeepEqual: h5.notDeepStrictEqual
                }), h5.strict.strict = h5.strict;
                var A = Object.keys || function(t6) {
                    var e12 = [];
                    for(var r22 in t6)u6.call(t6, r22) && e12.push(r22);
                    return e12;
                };
            }).call(this, r2(11));
        },
        function(t2, e3) {
            function r2(t4, e6) {
                if (!(this instanceof r2)) return new r2(t4, e6);
                this._bsontype = "Long", this.low_ = 0 | t4, this.high_ = 0 | e6;
            }
            r2.prototype.toInt = function() {
                return this.low_;
            }, r2.prototype.toNumber = function() {
                return this.high_ * r2.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
            }, r2.prototype.toBigInt = function() {
                return BigInt(this.toString());
            }, r2.prototype.toJSON = function() {
                return this.toString();
            }, r2.prototype.toString = function(t4) {
                var e6 = t4 || 10;
                if (e6 < 2 || 36 < e6) throw Error("radix out of range: " + e6);
                if (this.isZero()) return "0";
                if (this.isNegative()) {
                    if (this.equals(r2.MIN_VALUE)) {
                        var n3 = r2.fromNumber(e6), o3 = this.div(n3), i7 = o3.multiply(n3).subtract(this);
                        return o3.toString(e6) + i7.toInt().toString(e6);
                    }
                    return "-" + this.negate().toString(e6);
                }
                var s3 = r2.fromNumber(Math.pow(e6, 6));
                i7 = this;
                for(var a9 = ""; !i7.isZero();){
                    var u6 = i7.div(s3), c3 = i7.subtract(u6.multiply(s3)).toInt().toString(e6);
                    if ((i7 = u6).isZero()) return c3 + a9;
                    for(; c3.length < 6;)c3 = "0" + c3;
                    a9 = "" + c3 + a9;
                }
            }, r2.prototype.getHighBits = function() {
                return this.high_;
            }, r2.prototype.getLowBits = function() {
                return this.low_;
            }, r2.prototype.getLowBitsUnsigned = function() {
                return this.low_ >= 0 ? this.low_ : r2.TWO_PWR_32_DBL_ + this.low_;
            }, r2.prototype.getNumBitsAbs = function() {
                if (this.isNegative()) return this.equals(r2.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();
                for(var t4 = 0 !== this.high_ ? this.high_ : this.low_, e6 = 31; e6 > 0 && 0 == (t4 & 1 << e6); e6--);
                return 0 !== this.high_ ? e6 + 33 : e6 + 1;
            }, r2.prototype.isZero = function() {
                return 0 === this.high_ && 0 === this.low_;
            }, r2.prototype.isNegative = function() {
                return this.high_ < 0;
            }, r2.prototype.isOdd = function() {
                return 1 == (1 & this.low_);
            }, r2.prototype.equals = function(t4) {
                return this.high_ === t4.high_ && this.low_ === t4.low_;
            }, r2.prototype.notEquals = function(t4) {
                return this.high_ !== t4.high_ || this.low_ !== t4.low_;
            }, r2.prototype.lessThan = function(t4) {
                return this.compare(t4) < 0;
            }, r2.prototype.lessThanOrEqual = function(t4) {
                return this.compare(t4) <= 0;
            }, r2.prototype.greaterThan = function(t4) {
                return this.compare(t4) > 0;
            }, r2.prototype.greaterThanOrEqual = function(t4) {
                return this.compare(t4) >= 0;
            }, r2.prototype.compare = function(t4) {
                if (this.equals(t4)) return 0;
                var e6 = this.isNegative(), r22 = t4.isNegative();
                return e6 && !r22 ? -1 : !e6 && r22 ? 1 : this.subtract(t4).isNegative() ? -1 : 1;
            }, r2.prototype.negate = function() {
                return this.equals(r2.MIN_VALUE) ? r2.MIN_VALUE : this.not().add(r2.ONE);
            }, r2.prototype.add = function(t4) {
                var e6 = this.high_ >>> 16, n26 = 65535 & this.high_, o32 = this.low_ >>> 16, i15 = 65535 & this.low_, s3 = t4.high_ >>> 16, a9 = 65535 & t4.high_, u24 = t4.low_ >>> 16, c19 = 0, l2 = 0, f3 = 0, p2 = 0;
                return f3 += (p2 += i15 + (65535 & t4.low_)) >>> 16, p2 &= 65535, l2 += (f3 += o32 + u24) >>> 16, f3 &= 65535, c19 += (l2 += n26 + a9) >>> 16, l2 &= 65535, c19 += e6 + s3, c19 &= 65535, r2.fromBits(f3 << 16 | p2, c19 << 16 | l2);
            }, r2.prototype.subtract = function(t4) {
                return this.add(t4.negate());
            }, r2.prototype.multiply = function(t4) {
                if (this.isZero()) return r2.ZERO;
                if (t4.isZero()) return r2.ZERO;
                if (this.equals(r2.MIN_VALUE)) return t4.isOdd() ? r2.MIN_VALUE : r2.ZERO;
                if (t4.equals(r2.MIN_VALUE)) return this.isOdd() ? r2.MIN_VALUE : r2.ZERO;
                if (this.isNegative()) return t4.isNegative() ? this.negate().multiply(t4.negate()) : this.negate().multiply(t4).negate();
                if (t4.isNegative()) return this.multiply(t4.negate()).negate();
                if (this.lessThan(r2.TWO_PWR_24_) && t4.lessThan(r2.TWO_PWR_24_)) return r2.fromNumber(this.toNumber() * t4.toNumber());
                var e6 = this.high_ >>> 16, n26 = 65535 & this.high_, o32 = this.low_ >>> 16, i15 = 65535 & this.low_, s3 = t4.high_ >>> 16, a9 = 65535 & t4.high_, u24 = t4.low_ >>> 16, c19 = 65535 & t4.low_, l2 = 0, f3 = 0, p2 = 0, h5 = 0;
                return p2 += (h5 += i15 * c19) >>> 16, h5 &= 65535, f3 += (p2 += o32 * c19) >>> 16, p2 &= 65535, f3 += (p2 += i15 * u24) >>> 16, p2 &= 65535, l2 += (f3 += n26 * c19) >>> 16, f3 &= 65535, l2 += (f3 += o32 * u24) >>> 16, f3 &= 65535, l2 += (f3 += i15 * a9) >>> 16, f3 &= 65535, l2 += e6 * c19 + n26 * u24 + o32 * a9 + i15 * s3, l2 &= 65535, r2.fromBits(p2 << 16 | h5, l2 << 16 | f3);
            }, r2.prototype.div = function(t4) {
                if (t4.isZero()) throw Error("division by zero");
                if (this.isZero()) return r2.ZERO;
                if (this.equals(r2.MIN_VALUE)) {
                    if (t4.equals(r2.ONE) || t4.equals(r2.NEG_ONE)) return r2.MIN_VALUE;
                    if (t4.equals(r2.MIN_VALUE)) return r2.ONE;
                    var e6 = this.shiftRight(1).div(t4).shiftLeft(1);
                    if (e6.equals(r2.ZERO)) return t4.isNegative() ? r2.ONE : r2.NEG_ONE;
                    var n26 = this.subtract(t4.multiply(e6));
                    return e6.add(n26.div(t4));
                }
                if (t4.equals(r2.MIN_VALUE)) return r2.ZERO;
                if (this.isNegative()) return t4.isNegative() ? this.negate().div(t4.negate()) : this.negate().div(t4).negate();
                if (t4.isNegative()) return this.div(t4.negate()).negate();
                var o32 = r2.ZERO;
                for(n26 = this; n26.greaterThanOrEqual(t4);){
                    e6 = Math.max(1, Math.floor(n26.toNumber() / t4.toNumber()));
                    for(var i15 = Math.ceil(Math.log(e6) / Math.LN2), s3 = i15 <= 48 ? 1 : Math.pow(2, i15 - 48), a9 = r2.fromNumber(e6), u24 = a9.multiply(t4); u24.isNegative() || u24.greaterThan(n26);)e6 -= s3, u24 = (a9 = r2.fromNumber(e6)).multiply(t4);
                    a9.isZero() && (a9 = r2.ONE), o32 = o32.add(a9), n26 = n26.subtract(u24);
                }
                return o32;
            }, r2.prototype.modulo = function(t4) {
                return this.subtract(this.div(t4).multiply(t4));
            }, r2.prototype.not = function() {
                return r2.fromBits(~this.low_, ~this.high_);
            }, r2.prototype.and = function(t4) {
                return r2.fromBits(this.low_ & t4.low_, this.high_ & t4.high_);
            }, r2.prototype.or = function(t4) {
                return r2.fromBits(this.low_ | t4.low_, this.high_ | t4.high_);
            }, r2.prototype.xor = function(t4) {
                return r2.fromBits(this.low_ ^ t4.low_, this.high_ ^ t4.high_);
            }, r2.prototype.shiftLeft = function(t4) {
                if (0 === (t4 &= 63)) return this;
                var e12 = this.low_;
                if (t4 < 32) {
                    var n27 = this.high_;
                    return r2.fromBits(e12 << t4, n27 << t4 | e12 >>> 32 - t4);
                }
                return r2.fromBits(0, e12 << t4 - 32);
            }, r2.prototype.shiftRight = function(t4) {
                if (0 === (t4 &= 63)) return this;
                var e12 = this.high_;
                if (t4 < 32) {
                    var n28 = this.low_;
                    return r2.fromBits(n28 >>> t4 | e12 << 32 - t4, e12 >> t4);
                }
                return r2.fromBits(e12 >> t4 - 32, e12 >= 0 ? 0 : -1);
            }, r2.prototype.shiftRightUnsigned = function(t4) {
                if (0 === (t4 &= 63)) return this;
                var e12 = this.high_;
                if (t4 < 32) {
                    var n29 = this.low_;
                    return r2.fromBits(n29 >>> t4 | e12 << 32 - t4, e12 >>> t4);
                }
                return 32 === t4 ? r2.fromBits(e12, 0) : r2.fromBits(e12 >>> t4 - 32, 0);
            }, r2.fromInt = function(t4) {
                if (-128 <= t4 && t4 < 128) {
                    var e12 = r2.INT_CACHE_[t4];
                    if (e12) return e12;
                }
                var n30 = new r2(0 | t4, t4 < 0 ? -1 : 0);
                return -128 <= t4 && t4 < 128 && (r2.INT_CACHE_[t4] = n30), n30;
            }, r2.fromNumber = function(t4) {
                return isNaN(t4) || !isFinite(t4) ? r2.ZERO : t4 <= -r2.TWO_PWR_63_DBL_ ? r2.MIN_VALUE : t4 + 1 >= r2.TWO_PWR_63_DBL_ ? r2.MAX_VALUE : t4 < 0 ? r2.fromNumber(-t4).negate() : new r2(t4 % r2.TWO_PWR_32_DBL_ | 0, t4 / r2.TWO_PWR_32_DBL_ | 0);
            }, r2.fromBigInt = function(t4) {
                return r2.fromString(t4.toString(10), 10);
            }, r2.fromBits = function(t4, e13) {
                return new r2(t4, e13);
            }, r2.fromString = function(t4, e13) {
                if (0 === t4.length) throw Error("number format error: empty string");
                var n30 = e13 || 10;
                if (n30 < 2 || 36 < n30) throw Error("radix out of range: " + n30);
                if ("-" === t4.charAt(0)) return r2.fromString(t4.substring(1), n30).negate();
                if (t4.indexOf("-") >= 0) throw Error('number format error: interior "-" character: ' + t4);
                for(var o32 = r2.fromNumber(Math.pow(n30, 8)), i16 = r2.ZERO, s22 = 0; s22 < t4.length; s22 += 8){
                    var a24 = Math.min(8, t4.length - s22), u25 = parseInt(t4.substring(s22, s22 + a24), n30);
                    if (a24 < 8) {
                        var c19 = r2.fromNumber(Math.pow(n30, a24));
                        i16 = i16.multiply(c19).add(r2.fromNumber(u25));
                    } else i16 = (i16 = i16.multiply(o32)).add(r2.fromNumber(u25));
                }
                return i16;
            }, r2.INT_CACHE_ = {
            }, r2.TWO_PWR_16_DBL_ = 65536, r2.TWO_PWR_24_DBL_ = 16777216, r2.TWO_PWR_32_DBL_ = r2.TWO_PWR_16_DBL_ * r2.TWO_PWR_16_DBL_, r2.TWO_PWR_31_DBL_ = r2.TWO_PWR_32_DBL_ / 2, r2.TWO_PWR_48_DBL_ = r2.TWO_PWR_32_DBL_ * r2.TWO_PWR_16_DBL_, r2.TWO_PWR_64_DBL_ = r2.TWO_PWR_32_DBL_ * r2.TWO_PWR_32_DBL_, r2.TWO_PWR_63_DBL_ = r2.TWO_PWR_64_DBL_ / 2, r2.ZERO = r2.fromInt(0), r2.ONE = r2.fromInt(1), r2.NEG_ONE = r2.fromInt(-1), r2.MAX_VALUE = r2.fromBits(-1, 2147483647), r2.MIN_VALUE = r2.fromBits(0, -2147483648), r2.TWO_PWR_24_ = r2.fromInt(16777216), t2.exports = r2, t2.exports.Long = r2;
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e13) {
                var n30 = r2(67), o32 = Symbol.for("mongoose:emitted");
                t2.exports = function(t4, r22, i16, s22) {
                    return "function" == typeof t4 ? r22(function(r23) {
                        if (null == r23) t4.apply(this, arguments);
                        else {
                            null != i16 && null != i16.listeners && i16.listeners("error").length > 0 && !r23[o32] && (r23[o32] = true, i16.emit("error", r23));
                            try {
                                t4(r23);
                            } catch (r24) {
                                return e13.nextTick(function() {
                                    throw r24;
                                });
                            }
                        }
                    }) : new (s22 = s22 || n30.get())(function(t5, e14) {
                        r22(function(r23, n31) {
                            return null != r23 ? (null != i16 && null != i16.listeners && i16.listeners("error").length > 0 && !r23[o32] && (r23[o32] = true, i16.emit("error", r23)), e14(r23)) : arguments.length > 2 ? t5(Array.prototype.slice.call(arguments, 1)) : void t5(n31);
                        });
                    });
                };
            }).call(this, r2(7));
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n30 = r2(6), o32 = r2(33), i16 = r2(21), s22 = r2(1);
            function a25(t4, e13) {
                if (e13 && e13.default) {
                    var r22 = e13.default;
                    Array.isArray(r22) && 0 === r22.length ? e13.default = Array : !e13.shared && i16(r22) && 0 === Object.keys(r22).length && (e13.default = function() {
                        return {
                        };
                    });
                }
                n30.call(this, t4, e13, "Mixed"), this[o32.schemaMixedSymbol] = true;
            }
            a25.schemaName = "Mixed", a25.defaultOptions = {
            }, /*!
 * Inherits from SchemaType.
 */ a25.prototype = Object.create(n30.prototype), a25.prototype.constructor = a25, a25.get = n30.get, a25.set = n30.set, a25.prototype.cast = function(t4) {
                return t4 instanceof Error ? s22.errorToPOJO(t4) : t4;
            }, a25.prototype.castForQuery = function(t4, e13) {
                return 2 === arguments.length ? e13 : t4;
            }, /*!
 * Module exports.
 */ t2.exports = a25;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n30 = r2(61)(), o32 = r2(19).EventEmitter, i16 = r2(31), s22 = r2(52), a25 = r2(17).internalToObjectOptions, u26 = r2(3), c20 = r2(24), l2 = r2(4), f3 = r2(0).documentArrayParent, p2 = r2(0).validatorErrorSymbol;
            function h5(t4, e13, r23, o33, i17) {
                var s23 = {
                };
                null != e13 && e13.isMongooseDocumentArray ? (this.__parentArray = e13, this[f3] = e13.$parent()) : (this.__parentArray = void 0, this[f3] = void 0), this.$setIndex(i17), this.$isDocumentArrayElement = true, null != this[f3] && (s23.defaults = this[f3].$__.$options.defaults), n30.call(this, t4, o33, r23, s23);
                var a26 = this;
                this.on("isNew", function(t5) {
                    a26.isNew = t5;
                }), a26.on("save", function() {
                    a26.constructor.emit("save", a26);
                });
            }
            /*!
 * Inherit from Document
 */ for(var y2 in h5.prototype = Object.create(n30.prototype), h5.prototype.constructor = h5, o32.prototype)h5[y2] = o32.prototype[y2];
            h5.prototype.toBSON = function() {
                return this.toObject(a25);
            }, /*!
 * ignore
 */ h5.prototype.$setIndex = function(t4) {
                if (this.__index = t4, null != u26(this, "$__.validationError", null)) for(var e13 = 0, r23 = Object.keys(this.$__.validationError.errors); e13 < r23.length; e13++){
                    var n31 = r23[e13];
                    this.invalidate(n31, this.$__.validationError.errors[n31]);
                }
            }, h5.prototype.markModified = function(t4) {
                if (this.$__.activePaths.modify(t4), this.__parentArray) {
                    var e13 = this.__parentArray.$path() + ".0." + t4;
                    this.isNew && this.ownerDocument().$__isSelected(e13) ? this.__parentArray._markModified() : this.__parentArray._markModified(this, t4);
                }
            }, /*!
 * ignore
 */ h5.prototype.populate = function() {
                throw new Error('Mongoose does not support calling populate() on nested docs. Instead of `doc.arr[0].populate("path")`, use `doc.populate("arr.0.path")`');
            }, h5.prototype.save = function(t4, e14) {
                var r23 = this;
                return "function" == typeof t4 && (e14 = t4, t4 = {
                }), (t4 = t4 || {
                }).suppressWarning || console.warn("mongoose: calling `save()` on a subdoc does **not** save the document to MongoDB, it only runs save middleware. Use `subdoc.save({ suppressWarning: true })` to hide this warning if you're sure this behavior is right for your app."), c20(e14, function(t5) {
                    r23.$__save(t5);
                });
            }, h5.prototype.$__save = function(t4) {
                var e14 = this;
                return s22(function() {
                    return t4(null, e14);
                });
            }, /*!
 * no-op for hooks
 */ h5.prototype.$__remove = function(t4) {
                if (null != t4) return t4(null, this);
            }, h5.prototype.remove = function(t4, e14) {
                if ("function" != typeof t4 || e14 || (e14 = t4, t4 = void 0), !this.__parentArray || t4 && t4.noop) return this.$__remove(e14), this;
                var r23;
                if (!this.willRemove) {
                    if (!(r23 = this._doc._id)) throw new Error("For your own good, Mongoose does not know how to remove an EmbeddedDocument that has no _id");
                    this.__parentArray.pull({
                        _id: r23
                    }), this.willRemove = true, /*!
 * Registers remove event listeners for triggering
 * on subdocuments.
 *
 * @param {EmbeddedDocument} sub
 * @api private
 */ (function(t5) {
                        var e15 = t5.ownerDocument();
                        function r24() {
                            e15.removeListener("save", r24), e15.removeListener("remove", r24), t5.emit("remove", t5), t5.constructor.emit("remove", t5), e15 = t5 = null;
                        }
                        e15.on("save", r24), e15.on("remove", r24);
                    })(this);
                }
                return this.$__remove(e14), this;
            }, h5.prototype.update = function() {
                throw new Error("The #update method is not available on EmbeddedDocuments");
            }, h5.prototype.inspect = function() {
                return this.toObject({
                    transform: false,
                    virtuals: false,
                    flattenDecimals: false
                });
            }, l2.inspect.custom && /*!
  * Avoid Node deprecation warning DEP0079
  */ (h5.prototype[l2.inspect.custom] = h5.prototype.inspect), h5.prototype.invalidate = function(t4, e14, r23) {
                if (n30.prototype.invalidate.call(this, t4, e14, r23), !this[f3] || null == this.__index) {
                    if (e14[p2] || e14 instanceof i16) return this.ownerDocument().$__.validationError;
                    throw e14;
                }
                var o33 = this.__index, s23 = [
                    this.__parentArray.$path(),
                    o33,
                    t4
                ].join(".");
                return this[f3].invalidate(s23, e14, r23), this.ownerDocument().$__.validationError;
            }, h5.prototype.$markValid = function(t4) {
                if (this[f3]) {
                    var e14 = this.__index;
                    if ((void 0) !== e14) {
                        var r23 = [
                            this.__parentArray.$path(),
                            e14,
                            t4
                        ].join(".");
                        this[f3].$markValid(r23);
                    }
                }
            }, /*!
 * ignore
 */ h5.prototype.$ignore = function(t4) {
                if (n30.prototype.$ignore.call(this, t4), this[f3]) {
                    var e15 = this.__index;
                    if ((void 0) !== e15) {
                        var r24 = [
                            this.__parentArray.$path(),
                            e15,
                            t4
                        ].join(".");
                        this[f3].$ignore(r24);
                    }
                }
            }, h5.prototype.$isValid = function(t4) {
                return (void 0) === this.__index || !this[f3] || !this[f3].$__.validationError || !this[f3].$__.validationError.errors[this.$__fullPath(t4)];
            }, h5.prototype.ownerDocument = function() {
                if (this.$__.ownerDocument) return this.$__.ownerDocument;
                var t4 = this[f3];
                if (!t4) return this;
                for(; t4[f3] || t4.$__parent;)t4 = t4[f3] || t4.$__parent;
                return this.$__.ownerDocument = t4, this.$__.ownerDocument;
            }, h5.prototype.$__fullPath = function(t4) {
                if (!this.$__.fullPath) {
                    var e16 = this;
                    if (!e16[f3]) return t4;
                    for(var r25 = []; e16[f3] || e16.$__parent;)e16[f3] ? r25.unshift(e16.__parentArray.$path()) : r25.unshift(e16.$basePath), e16 = e16[f3] || e16.$__parent;
                    this.$__.fullPath = r25.join("."), this.$__.ownerDocument || (this.$__.ownerDocument = e16);
                }
                return t4 ? this.$__.fullPath + "." + t4 : this.$__.fullPath;
            }, h5.prototype.parent = function() {
                return this[f3];
            }, h5.prototype.$parent = h5.prototype.parent, h5.prototype.parentArray = function() {
                return this.__parentArray;
            }, /*!
 * Module exports.
 */ t2.exports = h5;
        },
        function(t2, e3, r2) {
            (function(e17) {
                if ((void 0) !== e17) var n30 = r2(2).Buffer;
                var o32 = r2(16);
                function i16(t4, e18) {
                    if (!(this instanceof i16)) return new i16(t4, e18);
                    if (!(null == t4 || "string" == typeof t4 || n30.isBuffer(t4) || t4 instanceof Uint8Array || Array.isArray(t4))) throw new Error("only String, Buffer, Uint8Array or Array accepted");
                    if (this._bsontype = "Binary", t4 instanceof Number ? (this.sub_type = t4, this.position = 0) : (this.sub_type = null == e18 ? s23 : e18, this.position = 0), null == t4 || t4 instanceof Number) (void 0) !== n30 ? this.buffer = o32.allocBuffer(i16.BUFFER_SIZE) : "undefined" != typeof Uint8Array ? this.buffer = new Uint8Array(new ArrayBuffer(i16.BUFFER_SIZE)) : this.buffer = new Array(i16.BUFFER_SIZE), this.position = 0;
                    else {
                        if ("string" == typeof t4) {
                            if ((void 0) !== n30) this.buffer = o32.toBuffer(t4);
                            else {
                                if ("undefined" == typeof Uint8Array && "[object Array]" !== Object.prototype.toString.call(t4)) throw new Error("only String, Buffer, Uint8Array or Array accepted");
                                this.buffer = a25(t4);
                            }
                        } else this.buffer = t4;
                        this.position = t4.length;
                    }
                }
                i16.prototype.put = function(t4) {
                    if (null != t4.length && "number" != typeof t4 && 1 !== t4.length) throw new Error("only accepts single character String, Uint8Array or Array");
                    if ("number" != typeof t4 && t4 < 0 || t4 > 255) throw new Error("only accepts number in a valid unsigned byte range 0-255");
                    var e18 = null;
                    if (e18 = "string" == typeof t4 ? t4.charCodeAt(0) : null != t4.length ? t4[0] : t4, this.buffer.length > this.position) this.buffer[this.position++] = e18;
                    else if ((void 0) !== n30 && n30.isBuffer(this.buffer)) {
                        var r26 = o32.allocBuffer(i16.BUFFER_SIZE + this.buffer.length);
                        this.buffer.copy(r26, 0, 0, this.buffer.length), this.buffer = r26, this.buffer[this.position++] = e18;
                    } else {
                        r26 = null, r26 = "[object Uint8Array]" === Object.prototype.toString.call(this.buffer) ? new Uint8Array(new ArrayBuffer(i16.BUFFER_SIZE + this.buffer.length)) : new Array(i16.BUFFER_SIZE + this.buffer.length);
                        for(var s22 = 0; s22 < this.buffer.length; s22++)r26[s22] = this.buffer[s22];
                        this.buffer = r26, this.buffer[this.position++] = e18;
                    }
                }, i16.prototype.write = function(t4, e18) {
                    if (e18 = "number" == typeof e18 ? e18 : this.position, this.buffer.length < e18 + t4.length) {
                        var r27 = null;
                        if ((void 0) !== n30 && n30.isBuffer(this.buffer)) r27 = o32.allocBuffer(this.buffer.length + t4.length), this.buffer.copy(r27, 0, 0, this.buffer.length);
                        else if ("[object Uint8Array]" === Object.prototype.toString.call(this.buffer)) {
                            r27 = new Uint8Array(new ArrayBuffer(this.buffer.length + t4.length));
                            for(var i17 = 0; i17 < this.position; i17++)r27[i17] = this.buffer[i17];
                        }
                        this.buffer = r27;
                    }
                    if ((void 0) !== n30 && n30.isBuffer(t4) && n30.isBuffer(this.buffer)) t4.copy(this.buffer, e18, 0, t4.length), this.position = e18 + t4.length > this.position ? e18 + t4.length : this.position;
                    else if ((void 0) !== n30 && "string" == typeof t4 && n30.isBuffer(this.buffer)) this.buffer.write(t4, e18, "binary"), this.position = e18 + t4.length > this.position ? e18 + t4.length : this.position;
                    else if ("[object Uint8Array]" === Object.prototype.toString.call(t4) || "[object Array]" === Object.prototype.toString.call(t4) && "string" != typeof t4) {
                        for(i17 = 0; i17 < t4.length; i17++)this.buffer[e18++] = t4[i17];
                        this.position = e18 > this.position ? e18 : this.position;
                    } else if ("string" == typeof t4) {
                        for(i17 = 0; i17 < t4.length; i17++)this.buffer[e18++] = t4.charCodeAt(i17);
                        this.position = e18 > this.position ? e18 : this.position;
                    }
                }, i16.prototype.read = function(t4, e18) {
                    if (e18 = e18 && e18 > 0 ? e18 : this.position, this.buffer.slice) return this.buffer.slice(t4, t4 + e18);
                    for(var r28 = "undefined" != typeof Uint8Array ? new Uint8Array(new ArrayBuffer(e18)) : new Array(e18), n32 = 0; n32 < e18; n32++)r28[n32] = this.buffer[t4++];
                    return r28;
                }, i16.prototype.value = function(t4) {
                    if ((t4 = null != t4 && t4) && (void 0) !== n30 && n30.isBuffer(this.buffer) && this.buffer.length === this.position) return this.buffer;
                    if ((void 0) !== n30 && n30.isBuffer(this.buffer)) return t4 ? this.buffer.slice(0, this.position) : this.buffer.toString("binary", 0, this.position);
                    if (t4) {
                        if (null != this.buffer.slice) return this.buffer.slice(0, this.position);
                        for(var e18 = "[object Uint8Array]" === Object.prototype.toString.call(this.buffer) ? new Uint8Array(new ArrayBuffer(this.position)) : new Array(this.position), r28 = 0; r28 < this.position; r28++)e18[r28] = this.buffer[r28];
                        return e18;
                    }
                    return u26(this.buffer, 0, this.position);
                }, i16.prototype.length = function() {
                    return this.position;
                }, i16.prototype.toJSON = function() {
                    return null != this.buffer ? this.buffer.toString("base64") : "";
                }, i16.prototype.toString = function(t4) {
                    return null != this.buffer ? this.buffer.slice(0, this.position).toString(t4) : "";
                };
                var s23 = 0, a25 = function(t4) {
                    for(var e19 = "undefined" != typeof Uint8Array ? new Uint8Array(new ArrayBuffer(t4.length)) : new Array(t4.length), r29 = 0; r29 < t4.length; r29++)e19[r29] = t4.charCodeAt(r29);
                    return e19;
                }, u26 = function(t4, e19, r29) {
                    for(var n32 = "", o33 = e19; o33 < r29; o33++)n32 += String.fromCharCode(t4[o33]);
                    return n32;
                };
                i16.BUFFER_SIZE = 256, i16.SUBTYPE_DEFAULT = 0, i16.SUBTYPE_FUNCTION = 1, i16.SUBTYPE_BYTE_ARRAY = 2, i16.SUBTYPE_UUID_OLD = 3, i16.SUBTYPE_UUID = 4, i16.SUBTYPE_MD5 = 5, i16.SUBTYPE_USER_DEFINED = 128, t2.exports = i16, t2.exports.Binary = i16;
            }).call(this, r2(11));
        },
        function(t2, e3, r2) {
            "use strict";
            function n30(t4, e17) {
                var r29 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
                if (!r29) {
                    if (Array.isArray(t4) || (r29 = (function(t5, e19) {
                        if (!t5) return;
                        if ("string" == typeof t5) return o32(t5, e19);
                        var r30 = Object.prototype.toString.call(t5).slice(8, -1);
                        "Object" === r30 && t5.constructor && (r30 = t5.constructor.name);
                        if ("Map" === r30 || "Set" === r30) return Array.from(t5);
                        if ("Arguments" === r30 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r30)) return o32(t5, e19);
                    })(t4)) || e17 && t4 && "number" == typeof t4.length) {
                        r29 && (t4 = r29);
                        var n32 = 0, i16 = function() {
                        };
                        return {
                            s: i16,
                            n: function() {
                                return n32 >= t4.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t4[n32++]
                                };
                            },
                            e: function(t5) {
                                throw t5;
                            },
                            f: i16
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s23, a25 = true, u26 = false;
                return {
                    s: function() {
                        r29 = r29.call(t4);
                    },
                    n: function() {
                        var t5 = r29.next();
                        return a25 = t5.done, t5;
                    },
                    e: function(t5) {
                        u26 = true, s23 = t5;
                    },
                    f: function() {
                        try {
                            a25 || null == r29.return || r29.return();
                        } finally{
                            if (u26) throw s23;
                        }
                    }
                };
            }
            function o32(t4, e17) {
                (null == e17 || e17 > t4.length) && (e17 = t4.length);
                for(var r29 = 0, n33 = new Array(e17); r29 < e17; r29++)n33[r29] = t4[r29];
                return n33;
            }
            var i18 = r2(64), s23 = r2(20), a25 = r2(8), u26 = r2(49), c20 = r2(29), l2 = r2(65), f3 = r2(66), p2 = r2(21), h5 = r2(0), y2 = r2(1);
            /*!
 * Object clone with Mongoose natives support.
 *
 * If options.minimize is true, creates a minimal data object. Empty objects and undefined values will not be cloned. This makes the data payload sent to MongoDB as small as possible.
 *
 * Functions are never cloned.
 *
 * @param {Object} obj the object to clone
 * @param {Object} options
 * @param {Boolean} isArrayChild true if cloning immediately underneath an array. Special case for minimize.
 * @return {Object} the cloned object
 * @api private
 */ function d2(t4, e17, r29) {
                if (null == t4) return t4;
                if (Array.isArray(t4)) return (function(t5, e19) {
                    var r30, o33 = [], i19 = n30(t5);
                    try {
                        for(i19.s(); !(r30 = i19.n()).done;){
                            var s24 = r30.value;
                            o33.push(d2(s24, e19, true));
                        }
                    } catch (t6) {
                        i19.e(t6);
                    } finally{
                        i19.f();
                    }
                    return o33;
                })(t4, e17);
                if (c20(t4)) return e17 && e17._skipSingleNestedGetters && t4.$isSingleNested && (e17 = Object.assign({
                }, e17, {
                    getters: false
                })), y2.isPOJO(t4) && null != t4.$__ && null != t4._doc ? t4._doc : e17 && e17.json && "function" == typeof t4.toJSON ? t4.toJSON(e17) : t4.toObject(e17);
                if (t4.constructor) switch(l2(t4.constructor)){
                    case "Object":
                        return _2(t4, e17, r29);
                    case "Date":
                        return new t4.constructor(+t4);
                    case "RegExp":
                        return i18(t4);
                }
                return t4 instanceof a25 ? new a25(t4.id) : f3(t4, "Decimal128") ? e17 && e17.flattenDecimals ? t4.toJSON() : s23.fromString(t4.toString()) : !t4.constructor && p2(t4) ? _2(t4, e17, r29) : t4[h5.schemaTypeSymbol] ? t4.clone() : e17 && e17.bson && "function" == typeof t4.toBSON ? t4 : null != t4.valueOf ? t4.valueOf() : _2(t4, e17, r29);
            }
            /*!
 * ignore
 */ function _2(t4, e17, r29) {
                for(var n33, o33 = e17 && e17.minimize, i19 = {
                }, s25 = 0, a26 = Object.keys(t4); s25 < a26.length; s25++){
                    var c21 = a26[s25];
                    if (!u26.has(c21)) {
                        var l18 = d2(t4[c21], e17);
                        o33 && (void 0) === l18 || (false === o33 && (void 0) === l18 ? delete i19[c21] : (n33 || (n33 = true), i19[c21] = l18));
                    }
                }
                return o33 && !r29 ? n33 && i19 : i19;
            }
            t2.exports = d2;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Returns if `v` is a mongoose object that has a `toObject()` method we can use.
 *
 * This is for compatibility with libs like Date.js which do foolish things to Natives.
 *
 * @param {any} v
 * @api private
 */ t2.exports = function(t4) {
                return null != t4 && (null != t4.$__ || t4.isMongooseArray || t4.isMongooseBuffer || t4.$isMongooseMap);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n30 = [
                "find",
                "findOne",
                "update",
                "updateMany",
                "updateOne",
                "replaceOne",
                "remove",
                "count",
                "distinct",
                "findAndModify",
                "aggregate",
                "findStream",
                "deleteOne",
                "deleteMany"
            ];
            function o32() {
            }
            for(var i18 = 0, s23 = n30.length; i18 < s23; ++i18){
                var a25 = n30[i18];
                o32.prototype[a25] = u26(a25);
            }
            function u26(t4) {
                return function() {
                    throw new Error("collection." + t4 + " not implemented");
                };
            }
            t2.exports = o32, o32.methods = n30;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module requirements
 */ function n30(t4) {
                return (n30 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
                    return typeof t5;
                } : function(t5) {
                    return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
                })(t4);
            }
            function o32(t4, e17) {
                for(var r29 = 0; r29 < e17.length; r29++){
                    var n33 = e17[r29];
                    n33.enumerable = n33.enumerable || false, n33.configurable = true, "value" in n33 && (n33.writable = true), Object.defineProperty(t4, n33.key, n33);
                }
            }
            function i18(t4, e17) {
                return (i18 = Object.setPrototypeOf || function(t5, e19) {
                    return t5.__proto__ = e19, t5;
                })(t4, e17);
            }
            function s23(t4) {
                var e17 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t5) {
                        return false;
                    }
                }();
                return function() {
                    var r29, n34 = u26(t4);
                    if (e17) {
                        var o33 = u26(this).constructor;
                        r29 = Reflect.construct(n34, arguments, o33);
                    } else r29 = n34.apply(this, arguments);
                    return a26(this, r29);
                };
            }
            function a26(t4, e17) {
                return !e17 || "object" !== n30(e17) && "function" != typeof e17 ? (function(t5) {
                    if ((void 0) === t5) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t5;
                })(t4) : e17;
            }
            function u26(t4) {
                return (u26 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t5) {
                    return t5.__proto__ || Object.getPrototypeOf(t5);
                })(t4);
            }
            var c20 = r2(14), l2 = r2(4), f3 = function(t4) {
                (function(t5, e17) {
                    if ("function" != typeof e17 && null !== e17) throw new TypeError("Super expression must either be null or a function");
                    t5.prototype = Object.create(e17 && e17.prototype, {
                        constructor: {
                            value: t5,
                            writable: true,
                            configurable: true
                        }
                    }), e17 && i18(t5, e17);
                })(u27, t4);
                var e17, r29, n34, a27 = s23(u27);
                function u27(t5) {
                    var e19, r30;
                    return (function(t6, e20) {
                        if (!(t6 instanceof e20)) throw new TypeError("Cannot call a class as a function");
                    })(this, u27), r30 = t5 && "model" === t5.constructor.name ? t5.constructor.modelName + " validation failed" : "Validation failed", (e19 = a27.call(this, r30)).errors = {
                    }, e19._message = r30, t5 && (t5.errors = e19.errors), e19;
                }
                return e17 = u27, r29 = [
                    {
                        key: "toString",
                        value: function() {
                            return this.name + ": " + p2(this);
                        }
                    },
                    {
                        key: "inspect",
                        value: function() {
                            return Object.assign(new Error(this.message), this);
                        }
                    },
                    {
                        key: "addError",
                        value: function(t5, e19) {
                            this.errors[t5] = e19, this.message = this._message + ": " + p2(this);
                        }
                    }
                ], o32(e17.prototype, r29), n34 && o32(e17, n34), u27;
            }(c20);
            /*!
 * ignore
 */ function p2(t4) {
                for(var e17, r29 = Object.keys(t4.errors || {
                }), n34 = r29.length, o34 = [], i19 = 0; i19 < n34; ++i19)e17 = r29[i19], t4 !== t4.errors[e17] && o34.push(e17 + ": " + t4.errors[e17].message);
                return o34.join(", ");
            }
            /*!
 * Module exports
 */ l2.inspect.custom && /*!
  * Avoid Node deprecation warning DEP0079
  */ (f3.prototype[l2.inspect.custom] = f3.prototype.inspect), Object.defineProperty(f3.prototype, "toJSON", {
                enumerable: false,
                writable: false,
                configurable: true,
                value: function() {
                    return Object.assign({
                    }, this, {
                        name: this.name,
                        message: this.message
                    });
                }
            }), Object.defineProperty(f3.prototype, "name", {
                value: "ValidationError"
            }), t2.exports = f3;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n30(t4) {
                return (n30 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
                    return typeof t5;
                } : function(t5) {
                    return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
                })(t4);
            }
            function o32(t4, e17) {
                return (o32 = Object.setPrototypeOf || function(t5, e19) {
                    return t5.__proto__ = e19, t5;
                })(t4, e17);
            }
            function i18(t4) {
                var e17 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t5) {
                        return false;
                    }
                }();
                return function() {
                    var r29, n34 = a26(t4);
                    if (e17) {
                        var o34 = a26(this).constructor;
                        r29 = Reflect.construct(n34, arguments, o34);
                    } else r29 = n34.apply(this, arguments);
                    return s23(this, r29);
                };
            }
            function s23(t4, e17) {
                return !e17 || "object" !== n30(e17) && "function" != typeof e17 ? (function(t5) {
                    if ((void 0) === t5) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t5;
                })(t4) : e17;
            }
            function a26(t4) {
                return (a26 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t5) {
                    return t5.__proto__ || Object.getPrototypeOf(t5);
                })(t4);
            }
            var u26 = function(t4) {
                (function(t5, e17) {
                    if ("function" != typeof e17 && null !== e17) throw new TypeError("Super expression must either be null or a function");
                    t5.prototype = Object.create(e17 && e17.prototype, {
                        constructor: {
                            value: t5,
                            writable: true,
                            configurable: true
                        }
                    }), e17 && o32(t5, e17);
                })(r29, t4);
                var e17 = i18(r29);
                function r29(t5, n34, o35) {
                    var i19;
                    return (function(t6, e19) {
                        if (!(t6 instanceof e19)) throw new TypeError("Cannot call a class as a function");
                    })(this, r29), n34 = n34 || "Field `" + t5 + "` is not in schema and strict mode is set to throw.", (i19 = e17.call(this, n34)).isImmutableError = !!o35, i19.path = t5, i19;
                }
                return r29;
            }(r2(5));
            Object.defineProperty(u26.prototype, "name", {
                value: "StrictModeError"
            }), t2.exports = u26;
        },
        function(t2, e3, r2) {
            "use strict";
            e3.schemaMixedSymbol = Symbol.for("mongoose:schema_mixed"), e3.builtInMiddleware = Symbol.for("mongoose:built-in-middleware");
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module requirements.
 */ var n30 = r2(79);
            /*!
 * @ignore
 */ /*!
 * @ignore
 */ function o32(t4) {
                return n30.cast()(t4);
            }
            e3.castToNumber = o32, e3.castArraysOfNumbers = function t4(e17, r29) {
                e17.forEach(function(n34, i18) {
                    Array.isArray(n34) ? t4(n34, r29) : e17[i18] = o32.call(r29, n34);
                });
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n30 = r2(81);
            /*!
* returns discriminator by discriminatorMapping.value
*
* @param {Model} model
* @param {string} value
*/ t2.exports = function(t4, e17) {
                if (null == t4) return null;
                for(var r29 = 0, o32 = Object.keys(t4); r29 < o32.length; r29++){
                    var i18 = t4[o32[r29]];
                    if (i18.schema && i18.schema.discriminatorMapping && n30(i18.schema.discriminatorMapping.value, e17)) return i18;
                }
                return null;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module exports.
 */ e3.Array = r2(84), e3.Buffer = r2(87), e3.Document = e3.Embedded = r2(26), e3.DocumentArray = r2(18), e3.Decimal128 = r2(20), e3.ObjectId = r2(8), e3.Map = r2(89), e3.Subdocument = r2(91);
        },
        function(t2, e3, r2) {
            "use strict";
            var n30 = r2(59), o32 = r2(23), i19 = r2(38), s23 = r2(39), a26 = r2(40), u26 = r2(41), c20 = r2(42), l2 = r2(60), f3 = r2(43), p2 = r2(44), h5 = r2(45), y2 = r2(46), d2 = r2(47), _2 = r2(27), v2 = r2(104), m2 = r2(105), g2 = r2(107), b2 = r2(16), w4 = b2.allocBuffer(17825792), O3 = function() {
            };
            O3.prototype.serialize = function(t4, e17) {
                var r29 = "boolean" == typeof (e17 = e17 || {
                }).checkKeys && e17.checkKeys, n34 = "boolean" == typeof e17.serializeFunctions && e17.serializeFunctions, o35 = "boolean" != typeof e17.ignoreUndefined || e17.ignoreUndefined, i20 = "number" == typeof e17.minInternalBufferSize ? e17.minInternalBufferSize : 17825792;
                w4.length < i20 && (w4 = b2.allocBuffer(i20));
                var s25 = m2(w4, t4, r29, 0, 0, n34, o35, []), a27 = b2.allocBuffer(s25);
                return w4.copy(a27, 0, 0, a27.length), a27;
            }, O3.prototype.serializeWithBufferAndIndex = function(t4, e17, r29) {
                var n34 = "boolean" == typeof (r29 = r29 || {
                }).checkKeys && r29.checkKeys, o35 = "boolean" == typeof r29.serializeFunctions && r29.serializeFunctions, i20 = "boolean" != typeof r29.ignoreUndefined || r29.ignoreUndefined, s25 = "number" == typeof r29.index ? r29.index : 0;
                return m2(e17, t4, n34, s25 || 0, 0, o35, i20) - 1;
            }, O3.prototype.deserialize = function(t4, e17) {
                return v2(t4, e17);
            }, O3.prototype.calculateObjectSize = function(t4, e17) {
                var r29 = "boolean" == typeof (e17 = e17 || {
                }).serializeFunctions && e17.serializeFunctions, n34 = "boolean" != typeof e17.ignoreUndefined || e17.ignoreUndefined;
                return g2(t4, r29, n34);
            }, O3.prototype.deserializeStream = function(t4, e17, r29, n34, o35, i20) {
                i20 = null != i20 ? i20 : {
                };
                for(var s25 = e17, a27 = 0; a27 < r29; a27++){
                    var u27 = t4[s25] | t4[s25 + 1] << 8 | t4[s25 + 2] << 16 | t4[s25 + 3] << 24;
                    i20.index = s25, n34[o35 + a27] = this.deserialize(t4, i20), s25 += u27;
                }
                return s25;
            }, O3.BSON_INT32_MAX = 2147483647, O3.BSON_INT32_MIN = -2147483648, O3.BSON_INT64_MAX = Math.pow(2, 63) - 1, O3.BSON_INT64_MIN = -Math.pow(2, 63), O3.JS_INT_MAX = 9007199254740992, O3.JS_INT_MIN = -9007199254740992, O3.BSON_DATA_NUMBER = 1, O3.BSON_DATA_STRING = 2, O3.BSON_DATA_OBJECT = 3, O3.BSON_DATA_ARRAY = 4, O3.BSON_DATA_BINARY = 5, O3.BSON_DATA_OID = 7, O3.BSON_DATA_BOOLEAN = 8, O3.BSON_DATA_DATE = 9, O3.BSON_DATA_NULL = 10, O3.BSON_DATA_REGEXP = 11, O3.BSON_DATA_CODE = 13, O3.BSON_DATA_SYMBOL = 14, O3.BSON_DATA_CODE_W_SCOPE = 15, O3.BSON_DATA_INT = 16, O3.BSON_DATA_TIMESTAMP = 17, O3.BSON_DATA_LONG = 18, O3.BSON_DATA_MIN_KEY = 255, O3.BSON_DATA_MAX_KEY = 127, O3.BSON_BINARY_SUBTYPE_DEFAULT = 0, O3.BSON_BINARY_SUBTYPE_FUNCTION = 1, O3.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2, O3.BSON_BINARY_SUBTYPE_UUID = 3, O3.BSON_BINARY_SUBTYPE_MD5 = 4, O3.BSON_BINARY_SUBTYPE_USER_DEFINED = 128, t2.exports = O3, t2.exports.Code = f3, t2.exports.Map = n30, t2.exports.Symbol = c20, t2.exports.BSON = O3, t2.exports.DBRef = d2, t2.exports.Binary = _2, t2.exports.ObjectID = a26, t2.exports.Long = o32, t2.exports.Timestamp = s23, t2.exports.Double = i19, t2.exports.Int32 = l2, t2.exports.MinKey = h5, t2.exports.MaxKey = y2, t2.exports.BSONRegExp = u26, t2.exports.Decimal128 = p2;
        },
        function(t2, e3) {
            function r2(t4) {
                if (!(this instanceof r2)) return new r2(t4);
                this._bsontype = "Double", this.value = t4;
            }
            r2.prototype.valueOf = function() {
                return this.value;
            }, r2.prototype.toJSON = function() {
                return this.value;
            }, t2.exports = r2, t2.exports.Double = r2;
        },
        function(t2, e3) {
            function r2(t4, e17) {
                if (!(this instanceof r2)) return new r2(t4, e17);
                this._bsontype = "Timestamp", this.low_ = 0 | t4, this.high_ = 0 | e17;
            }
            r2.prototype.toInt = function() {
                return this.low_;
            }, r2.prototype.toNumber = function() {
                return this.high_ * r2.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
            }, r2.prototype.toJSON = function() {
                return this.toString();
            }, r2.prototype.toString = function(t4) {
                var e17 = t4 || 10;
                if (e17 < 2 || 36 < e17) throw Error("radix out of range: " + e17);
                if (this.isZero()) return "0";
                if (this.isNegative()) {
                    if (this.equals(r2.MIN_VALUE)) {
                        var n30 = r2.fromNumber(e17), o32 = this.div(n30), i19 = o32.multiply(n30).subtract(this);
                        return o32.toString(e17) + i19.toInt().toString(e17);
                    }
                    return "-" + this.negate().toString(e17);
                }
                var s23 = r2.fromNumber(Math.pow(e17, 6));
                i19 = this;
                for(var a26 = ""; !i19.isZero();){
                    var u26 = i19.div(s23), c20 = i19.subtract(u26.multiply(s23)).toInt().toString(e17);
                    if ((i19 = u26).isZero()) return c20 + a26;
                    for(; c20.length < 6;)c20 = "0" + c20;
                    a26 = "" + c20 + a26;
                }
            }, r2.prototype.getHighBits = function() {
                return this.high_;
            }, r2.prototype.getLowBits = function() {
                return this.low_;
            }, r2.prototype.getLowBitsUnsigned = function() {
                return this.low_ >= 0 ? this.low_ : r2.TWO_PWR_32_DBL_ + this.low_;
            }, r2.prototype.getNumBitsAbs = function() {
                if (this.isNegative()) return this.equals(r2.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();
                for(var t4 = 0 !== this.high_ ? this.high_ : this.low_, e17 = 31; e17 > 0 && 0 == (t4 & 1 << e17); e17--);
                return 0 !== this.high_ ? e17 + 33 : e17 + 1;
            }, r2.prototype.isZero = function() {
                return 0 === this.high_ && 0 === this.low_;
            }, r2.prototype.isNegative = function() {
                return this.high_ < 0;
            }, r2.prototype.isOdd = function() {
                return 1 == (1 & this.low_);
            }, r2.prototype.equals = function(t4) {
                return this.high_ === t4.high_ && this.low_ === t4.low_;
            }, r2.prototype.notEquals = function(t4) {
                return this.high_ !== t4.high_ || this.low_ !== t4.low_;
            }, r2.prototype.lessThan = function(t4) {
                return this.compare(t4) < 0;
            }, r2.prototype.lessThanOrEqual = function(t4) {
                return this.compare(t4) <= 0;
            }, r2.prototype.greaterThan = function(t4) {
                return this.compare(t4) > 0;
            }, r2.prototype.greaterThanOrEqual = function(t4) {
                return this.compare(t4) >= 0;
            }, r2.prototype.compare = function(t4) {
                if (this.equals(t4)) return 0;
                var e17 = this.isNegative(), r29 = t4.isNegative();
                return e17 && !r29 ? -1 : !e17 && r29 ? 1 : this.subtract(t4).isNegative() ? -1 : 1;
            }, r2.prototype.negate = function() {
                return this.equals(r2.MIN_VALUE) ? r2.MIN_VALUE : this.not().add(r2.ONE);
            }, r2.prototype.add = function(t4) {
                var e17 = this.high_ >>> 16, n34 = 65535 & this.high_, o35 = this.low_ >>> 16, i20 = 65535 & this.low_, s23 = t4.high_ >>> 16, a26 = 65535 & t4.high_, u28 = t4.low_ >>> 16, c22 = 0, l2 = 0, f3 = 0, p2 = 0;
                return f3 += (p2 += i20 + (65535 & t4.low_)) >>> 16, p2 &= 65535, l2 += (f3 += o35 + u28) >>> 16, f3 &= 65535, c22 += (l2 += n34 + a26) >>> 16, l2 &= 65535, c22 += e17 + s23, c22 &= 65535, r2.fromBits(f3 << 16 | p2, c22 << 16 | l2);
            }, r2.prototype.subtract = function(t4) {
                return this.add(t4.negate());
            }, r2.prototype.multiply = function(t4) {
                if (this.isZero()) return r2.ZERO;
                if (t4.isZero()) return r2.ZERO;
                if (this.equals(r2.MIN_VALUE)) return t4.isOdd() ? r2.MIN_VALUE : r2.ZERO;
                if (t4.equals(r2.MIN_VALUE)) return this.isOdd() ? r2.MIN_VALUE : r2.ZERO;
                if (this.isNegative()) return t4.isNegative() ? this.negate().multiply(t4.negate()) : this.negate().multiply(t4).negate();
                if (t4.isNegative()) return this.multiply(t4.negate()).negate();
                if (this.lessThan(r2.TWO_PWR_24_) && t4.lessThan(r2.TWO_PWR_24_)) return r2.fromNumber(this.toNumber() * t4.toNumber());
                var e17 = this.high_ >>> 16, n34 = 65535 & this.high_, o35 = this.low_ >>> 16, i20 = 65535 & this.low_, s23 = t4.high_ >>> 16, a26 = 65535 & t4.high_, u28 = t4.low_ >>> 16, c22 = 65535 & t4.low_, l2 = 0, f3 = 0, p2 = 0, h5 = 0;
                return p2 += (h5 += i20 * c22) >>> 16, h5 &= 65535, f3 += (p2 += o35 * c22) >>> 16, p2 &= 65535, f3 += (p2 += i20 * u28) >>> 16, p2 &= 65535, l2 += (f3 += n34 * c22) >>> 16, f3 &= 65535, l2 += (f3 += o35 * u28) >>> 16, f3 &= 65535, l2 += (f3 += i20 * a26) >>> 16, f3 &= 65535, l2 += e17 * c22 + n34 * u28 + o35 * a26 + i20 * s23, l2 &= 65535, r2.fromBits(p2 << 16 | h5, l2 << 16 | f3);
            }, r2.prototype.div = function(t4) {
                if (t4.isZero()) throw Error("division by zero");
                if (this.isZero()) return r2.ZERO;
                if (this.equals(r2.MIN_VALUE)) {
                    if (t4.equals(r2.ONE) || t4.equals(r2.NEG_ONE)) return r2.MIN_VALUE;
                    if (t4.equals(r2.MIN_VALUE)) return r2.ONE;
                    var e17 = this.shiftRight(1).div(t4).shiftLeft(1);
                    if (e17.equals(r2.ZERO)) return t4.isNegative() ? r2.ONE : r2.NEG_ONE;
                    var n34 = this.subtract(t4.multiply(e17));
                    return e17.add(n34.div(t4));
                }
                if (t4.equals(r2.MIN_VALUE)) return r2.ZERO;
                if (this.isNegative()) return t4.isNegative() ? this.negate().div(t4.negate()) : this.negate().div(t4).negate();
                if (t4.isNegative()) return this.div(t4.negate()).negate();
                var o35 = r2.ZERO;
                for(n34 = this; n34.greaterThanOrEqual(t4);){
                    e17 = Math.max(1, Math.floor(n34.toNumber() / t4.toNumber()));
                    for(var i20 = Math.ceil(Math.log(e17) / Math.LN2), s23 = i20 <= 48 ? 1 : Math.pow(2, i20 - 48), a26 = r2.fromNumber(e17), u28 = a26.multiply(t4); u28.isNegative() || u28.greaterThan(n34);)e17 -= s23, u28 = (a26 = r2.fromNumber(e17)).multiply(t4);
                    a26.isZero() && (a26 = r2.ONE), o35 = o35.add(a26), n34 = n34.subtract(u28);
                }
                return o35;
            }, r2.prototype.modulo = function(t4) {
                return this.subtract(this.div(t4).multiply(t4));
            }, r2.prototype.not = function() {
                return r2.fromBits(~this.low_, ~this.high_);
            }, r2.prototype.and = function(t4) {
                return r2.fromBits(this.low_ & t4.low_, this.high_ & t4.high_);
            }, r2.prototype.or = function(t4) {
                return r2.fromBits(this.low_ | t4.low_, this.high_ | t4.high_);
            }, r2.prototype.xor = function(t4) {
                return r2.fromBits(this.low_ ^ t4.low_, this.high_ ^ t4.high_);
            }, r2.prototype.shiftLeft = function(t4) {
                if (0 === (t4 &= 63)) return this;
                var e19 = this.low_;
                if (t4 < 32) {
                    var n35 = this.high_;
                    return r2.fromBits(e19 << t4, n35 << t4 | e19 >>> 32 - t4);
                }
                return r2.fromBits(0, e19 << t4 - 32);
            }, r2.prototype.shiftRight = function(t4) {
                if (0 === (t4 &= 63)) return this;
                var e19 = this.high_;
                if (t4 < 32) {
                    var n36 = this.low_;
                    return r2.fromBits(n36 >>> t4 | e19 << 32 - t4, e19 >> t4);
                }
                return r2.fromBits(e19 >> t4 - 32, e19 >= 0 ? 0 : -1);
            }, r2.prototype.shiftRightUnsigned = function(t4) {
                if (0 === (t4 &= 63)) return this;
                var e19 = this.high_;
                if (t4 < 32) {
                    var n37 = this.low_;
                    return r2.fromBits(n37 >>> t4 | e19 << 32 - t4, e19 >>> t4);
                }
                return 32 === t4 ? r2.fromBits(e19, 0) : r2.fromBits(e19 >>> t4 - 32, 0);
            }, r2.fromInt = function(t4) {
                if (-128 <= t4 && t4 < 128) {
                    var e19 = r2.INT_CACHE_[t4];
                    if (e19) return e19;
                }
                var n38 = new r2(0 | t4, t4 < 0 ? -1 : 0);
                return -128 <= t4 && t4 < 128 && (r2.INT_CACHE_[t4] = n38), n38;
            }, r2.fromNumber = function(t4) {
                return isNaN(t4) || !isFinite(t4) ? r2.ZERO : t4 <= -r2.TWO_PWR_63_DBL_ ? r2.MIN_VALUE : t4 + 1 >= r2.TWO_PWR_63_DBL_ ? r2.MAX_VALUE : t4 < 0 ? r2.fromNumber(-t4).negate() : new r2(t4 % r2.TWO_PWR_32_DBL_ | 0, t4 / r2.TWO_PWR_32_DBL_ | 0);
            }, r2.fromBits = function(t4, e20) {
                return new r2(t4, e20);
            }, r2.fromString = function(t4, e20) {
                if (0 === t4.length) throw Error("number format error: empty string");
                var n38 = e20 || 10;
                if (n38 < 2 || 36 < n38) throw Error("radix out of range: " + n38);
                if ("-" === t4.charAt(0)) return r2.fromString(t4.substring(1), n38).negate();
                if (t4.indexOf("-") >= 0) throw Error('number format error: interior "-" character: ' + t4);
                for(var o35 = r2.fromNumber(Math.pow(n38, 8)), i21 = r2.ZERO, s25 = 0; s25 < t4.length; s25 += 8){
                    var a27 = Math.min(8, t4.length - s25), u29 = parseInt(t4.substring(s25, s25 + a27), n38);
                    if (a27 < 8) {
                        var c22 = r2.fromNumber(Math.pow(n38, a27));
                        i21 = i21.multiply(c22).add(r2.fromNumber(u29));
                    } else i21 = (i21 = i21.multiply(o35)).add(r2.fromNumber(u29));
                }
                return i21;
            }, r2.INT_CACHE_ = {
            }, r2.TWO_PWR_16_DBL_ = 65536, r2.TWO_PWR_24_DBL_ = 16777216, r2.TWO_PWR_32_DBL_ = r2.TWO_PWR_16_DBL_ * r2.TWO_PWR_16_DBL_, r2.TWO_PWR_31_DBL_ = r2.TWO_PWR_32_DBL_ / 2, r2.TWO_PWR_48_DBL_ = r2.TWO_PWR_32_DBL_ * r2.TWO_PWR_16_DBL_, r2.TWO_PWR_64_DBL_ = r2.TWO_PWR_32_DBL_ * r2.TWO_PWR_32_DBL_, r2.TWO_PWR_63_DBL_ = r2.TWO_PWR_64_DBL_ / 2, r2.ZERO = r2.fromInt(0), r2.ONE = r2.fromInt(1), r2.NEG_ONE = r2.fromInt(-1), r2.MAX_VALUE = r2.fromBits(-1, 2147483647), r2.MIN_VALUE = r2.fromBits(0, -2147483648), r2.TWO_PWR_24_ = r2.fromInt(16777216), t2.exports = r2, t2.exports.Timestamp = r2;
        },
        function(t2, e3, r2) {
            (function(e20, n38) {
                var o35 = "inspect", i21 = r2(16), s25 = parseInt(16777215 * Math.random(), 10), a28 = new RegExp("^[0-9a-fA-F]{24}$");
                try {
                    if (e20 && e20.from) {
                        var u30 = true;
                        o35 = r2(4).inspect.custom || "inspect";
                    }
                } catch (t4) {
                    u30 = false;
                }
                for(var c23 = function t4(e21) {
                    if (e21 instanceof t4) return e21;
                    if (!(this instanceof t4)) return new t4(e21);
                    if (this._bsontype = "ObjectID", null == e21 || "number" == typeof e21) return this.id = this.generate(e21), void (t4.cacheHexString && (this.__id = this.toString("hex")));
                    var r29 = t4.isValid(e21);
                    if (!r29 && null != e21) throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
                    if (r29 && "string" == typeof e21 && 24 === e21.length && u30) return new t4(i21.toBuffer(e21, "hex"));
                    if (r29 && "string" == typeof e21 && 24 === e21.length) return t4.createFromHexString(e21);
                    if (null == e21 || 12 !== e21.length) {
                        if (null != e21 && "function" == typeof e21.toHexString) return e21;
                        throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
                    }
                    this.id = e21, t4.cacheHexString && (this.__id = this.toString("hex"));
                }, l2 = [], f3 = 0; f3 < 256; f3++)l2[f3] = (f3 <= 15 ? "0" : "") + f3.toString(16);
                c23.prototype.toHexString = function() {
                    if (c23.cacheHexString && this.__id) return this.__id;
                    var t5 = "";
                    if (!this.id || !this.id.length) throw new Error("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [" + JSON.stringify(this.id) + "]");
                    if (this.id instanceof h5) return t5 = y2(this.id), c23.cacheHexString && (this.__id = t5), t5;
                    for(var e21 = 0; e21 < this.id.length; e21++)t5 += l2[this.id.charCodeAt(e21)];
                    return c23.cacheHexString && (this.__id = t5), t5;
                }, c23.prototype.get_inc = function() {
                    return c23.index = (c23.index + 1) % 16777215;
                }, c23.prototype.getInc = function() {
                    return this.get_inc();
                }, c23.prototype.generate = function(t5) {
                    "number" != typeof t5 && (t5 = ~~(Date.now() / 1000));
                    var e21 = ((void 0) === n38 || 1 === n38.pid ? Math.floor(100000 * Math.random()) : n38.pid) % 65535, r29 = this.get_inc(), o36 = i21.allocBuffer(12);
                    return o36[3] = 255 & t5, o36[2] = t5 >> 8 & 255, o36[1] = t5 >> 16 & 255, o36[0] = t5 >> 24 & 255, o36[6] = 255 & s25, o36[5] = s25 >> 8 & 255, o36[4] = s25 >> 16 & 255, o36[8] = 255 & e21, o36[7] = e21 >> 8 & 255, o36[11] = 255 & r29, o36[10] = r29 >> 8 & 255, o36[9] = r29 >> 16 & 255, o36;
                }, c23.prototype.toString = function(t5) {
                    return this.id && this.id.copy ? this.id.toString("string" == typeof t5 ? t5 : "hex") : this.toHexString();
                }, c23.prototype[o35] = c23.prototype.toString, c23.prototype.toJSON = function() {
                    return this.toHexString();
                }, c23.prototype.equals = function(t5) {
                    return t5 instanceof c23 ? this.toString() === t5.toString() : "string" == typeof t5 && c23.isValid(t5) && 12 === t5.length && this.id instanceof h5 ? t5 === this.id.toString("binary") : "string" == typeof t5 && c23.isValid(t5) && 24 === t5.length ? t5.toLowerCase() === this.toHexString() : "string" == typeof t5 && c23.isValid(t5) && 12 === t5.length ? t5 === this.id : !(null == t5 || !(t5 instanceof c23 || t5.toHexString)) && t5.toHexString() === this.toHexString();
                }, c23.prototype.getTimestamp = function() {
                    var t5 = new Date, e21 = this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;
                    return t5.setTime(1000 * Math.floor(e21)), t5;
                }, c23.index = ~~(16777215 * Math.random()), c23.createPk = function() {
                    return new c23;
                }, c23.createFromTime = function(t5) {
                    var e21 = i21.toBuffer([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]);
                    return e21[3] = 255 & t5, e21[2] = t5 >> 8 & 255, e21[1] = t5 >> 16 & 255, e21[0] = t5 >> 24 & 255, new c23(e21);
                };
                var p2 = [];
                for(f3 = 0; f3 < 10;)p2[48 + f3] = f3++;
                for(; f3 < 16;)p2[55 + f3] = p2[87 + f3] = f3++;
                var h5 = e20, y2 = function(t5) {
                    return t5.toString("hex");
                };
                c23.createFromHexString = function(t5) {
                    if ((void 0) === t5 || null != t5 && 24 !== t5.length) throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
                    if (u30) return new c23(i21.toBuffer(t5, "hex"));
                    for(var e21 = new h5(12), r29 = 0, n39 = 0; n39 < 24;)e21[r29++] = p2[t5.charCodeAt(n39++)] << 4 | p2[t5.charCodeAt(n39++)];
                    return new c23(e21);
                }, c23.isValid = function(t5) {
                    return null != t5 && ("number" == typeof t5 || ("string" == typeof t5 ? 12 === t5.length || 24 === t5.length && a28.test(t5) : t5 instanceof c23 || t5 instanceof h5 || "function" == typeof t5.toHexString && (t5.id instanceof h5 || "string" == typeof t5.id) && (12 === t5.id.length || 24 === t5.id.length && a28.test(t5.id))));
                }, Object.defineProperty(c23.prototype, "generationTime", {
                    enumerable: true,
                    get: function() {
                        return this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;
                    },
                    set: function(t5) {
                        this.id[3] = 255 & t5, this.id[2] = t5 >> 8 & 255, this.id[1] = t5 >> 16 & 255, this.id[0] = t5 >> 24 & 255;
                    }
                }), t2.exports = c23, t2.exports.ObjectID = c23, t2.exports.ObjectId = c23;
            }).call(this, r2(2).Buffer, r2(7));
        },
        function(t2, e3) {
            function r2(t4, e20) {
                if (!(this instanceof r2)) return new r2;
                this._bsontype = "BSONRegExp", this.pattern = t4 || "", this.options = e20 || "";
                for(var n38 = 0; n38 < this.options.length; n38++)if ("i" !== this.options[n38] && "m" !== this.options[n38] && "x" !== this.options[n38] && "l" !== this.options[n38] && "s" !== this.options[n38] && "u" !== this.options[n38]) throw new Error("the regular expression options [" + this.options[n38] + "] is not supported");
            }
            t2.exports = r2, t2.exports.BSONRegExp = r2;
        },
        function(t2, e3, r2) {
            (function(e20) {
                var n38 = e20 && r2(4).inspect.custom || "inspect";
                function o35(t4) {
                    if (!(this instanceof o35)) return new o35(t4);
                    this._bsontype = "Symbol", this.value = t4;
                }
                o35.prototype.valueOf = function() {
                    return this.value;
                }, o35.prototype.toString = function() {
                    return this.value;
                }, o35.prototype[n38] = function() {
                    return this.value;
                }, o35.prototype.toJSON = function() {
                    return this.value;
                }, t2.exports = o35, t2.exports.Symbol = o35;
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3) {
            var r2 = function t4(e20, r29) {
                if (!(this instanceof t4)) return new t4(e20, r29);
                this._bsontype = "Code", this.code = e20, this.scope = r29;
            };
            r2.prototype.toJSON = function() {
                return {
                    scope: this.scope,
                    code: this.code
                };
            }, t2.exports = r2, t2.exports.Code = r2;
        },
        function(t2, e3, r2) {
            "use strict";
            var n38 = r2(23), o35 = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/, i21 = /^(\+|-)?(Infinity|inf)$/i, s25 = /^(\+|-)?NaN$/i, a28 = 6176, u31 = [
                124,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ].reverse(), c23 = [
                248,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ].reverse(), l2 = [
                120,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ].reverse(), f3 = /^([-+])?(\d+)?$/, p2 = r2(16), h5 = function(t4) {
                return !isNaN(parseInt(t4, 10));
            }, y2 = function(t4) {
                var e20 = n38.fromNumber(1000000000), r29 = n38.fromNumber(0), o36 = 0;
                if (!(t4.parts[0] || t4.parts[1] || t4.parts[2] || t4.parts[3])) return {
                    quotient: t4,
                    rem: r29
                };
                for(o36 = 0; o36 <= 3; o36++)r29 = (r29 = r29.shiftLeft(32)).add(new n38(t4.parts[o36], 0)), t4.parts[o36] = r29.div(e20).low_, r29 = r29.modulo(e20);
                return {
                    quotient: t4,
                    rem: r29
                };
            }, d2 = function(t4) {
                this._bsontype = "Decimal128", this.bytes = t4;
            };
            d2.fromString = function(t4) {
                var e20, r29 = false, y10 = false, _2 = false, v2 = 0, m2 = 0, g2 = 0, b2 = 0, w4 = 0, O3 = [
                    0
                ], S3 = 0, A = 0, $2 = 0, E3 = 0, j2 = 0, P = 0, x2 = [
                    0,
                    0
                ], T2 = [
                    0,
                    0
                ], N3 = 0;
                if ((t4 = t4.trim()).length >= 7000) throw new Error(t4 + " not a valid Decimal128 string");
                var k2 = t4.match(o35), B2 = t4.match(i21), R2 = t4.match(s25);
                if (!k2 && !B2 && !R2 || 0 === t4.length) throw new Error(t4 + " not a valid Decimal128 string");
                if (k2 && k2[4] && (void 0) === k2[2]) throw new Error(t4 + " not a valid Decimal128 string");
                if ("+" !== t4[N3] && "-" !== t4[N3] || (r29 = "-" === t4[N3++]), !h5(t4[N3]) && "." !== t4[N3]) {
                    if ("i" === t4[N3] || "I" === t4[N3]) return new d2(p2.toBuffer(r29 ? c23 : l2));
                    if ("N" === t4[N3]) return new d2(p2.toBuffer(u31));
                }
                for(; h5(t4[N3]) || "." === t4[N3];)if ("." !== t4[N3]) S3 < 34 && ("0" !== t4[N3] || _2) && (_2 || (w4 = m2), _2 = true, O3[A++] = parseInt(t4[N3], 10), S3 += 1), _2 && (g2 += 1), y10 && (b2 += 1), m2 += 1, N3 += 1;
                else {
                    if (y10) return new d2(p2.toBuffer(u31));
                    y10 = true, N3 += 1;
                }
                if (y10 && !m2) throw new Error(t4 + " not a valid Decimal128 string");
                if ("e" === t4[N3] || "E" === t4[N3]) {
                    var C2 = t4.substr(++N3).match(f3);
                    if (!C2 || !C2[2]) return new d2(p2.toBuffer(u31));
                    j2 = parseInt(C2[0], 10), N3 += C2[0].length;
                }
                if (t4[N3]) return new d2(p2.toBuffer(u31));
                if ($2 = 0, S3) {
                    if (E3 = S3 - 1, v2 = g2, 0 !== j2 && 1 !== v2) for(; "0" === t4[w4 + v2 - 1];)v2 -= 1;
                } else $2 = 0, E3 = 0, O3[0] = 0, g2 = 1, S3 = 1, v2 = 0;
                for(j2 <= b2 && b2 - j2 > 16384 ? j2 = -6176 : j2 -= b2; j2 > 6111;){
                    if ((E3 += 1) - $2 > 34) {
                        var D = O3.join("");
                        if (D.match(/^0+$/)) {
                            j2 = 6111;
                            break;
                        }
                        return new d2(p2.toBuffer(r29 ? c23 : l2));
                    }
                    j2 -= 1;
                }
                for(; j2 < -6176 || S3 < g2;){
                    if (0 === E3) {
                        j2 = -6176, v2 = 0;
                        break;
                    }
                    if (S3 < g2 ? g2 -= 1 : E3 -= 1, !(j2 < 6111)) {
                        if ((D = O3.join("")).match(/^0+$/)) {
                            j2 = 6111;
                            break;
                        }
                        return new d2(p2.toBuffer(r29 ? c23 : l2));
                    }
                    j2 += 1;
                }
                if (E3 - $2 + 1 < v2 && "0" !== t4[v2]) {
                    var M2 = m2;
                    y10 && -6176 === j2 && (w4 += 1, M2 += 1);
                    var I = parseInt(t4[w4 + E3 + 1], 10), F2 = 0;
                    if (I >= 5 && (F2 = 1, 5 === I)) for(F2 = O3[E3] % 2 == 1, P = w4 + E3 + 2; P < M2; P++)if (parseInt(t4[P], 10)) {
                        F2 = 1;
                        break;
                    }
                    if (F2) for(var L2 = E3; L2 >= 0 && (++O3[L2]) > 9; L2--)if (O3[L2] = 0, 0 === L2) {
                        if (!(j2 < 6111)) return new d2(p2.toBuffer(r29 ? c23 : l2));
                        j2 += 1, O3[L2] = 1;
                    }
                }
                if (x2 = n38.fromNumber(0), T2 = n38.fromNumber(0), 0 === v2) x2 = n38.fromNumber(0), T2 = n38.fromNumber(0);
                else if (E3 - $2 < 17) for(L2 = $2, T2 = n38.fromNumber(O3[L2++]), x2 = new n38(0, 0); L2 <= E3; L2++)T2 = (T2 = T2.multiply(n38.fromNumber(10))).add(n38.fromNumber(O3[L2]));
                else {
                    for(L2 = $2, x2 = n38.fromNumber(O3[L2++]); L2 <= E3 - 17; L2++)x2 = (x2 = x2.multiply(n38.fromNumber(10))).add(n38.fromNumber(O3[L2]));
                    for(T2 = n38.fromNumber(O3[L2++]); L2 <= E3; L2++)T2 = (T2 = T2.multiply(n38.fromNumber(10))).add(n38.fromNumber(O3[L2]));
                }
                var U2, V2, q2, W2, H = function(t5, e21) {
                    if (!t5 && !e21) return {
                        high: n38.fromNumber(0),
                        low: n38.fromNumber(0)
                    };
                    var r30 = t5.shiftRightUnsigned(32), o36 = new n38(t5.getLowBits(), 0), i22 = e21.shiftRightUnsigned(32), s26 = new n38(e21.getLowBits(), 0), a29 = r30.multiply(i22), u32 = r30.multiply(s26), c24 = o36.multiply(i22), l19 = o36.multiply(s26);
                    return a29 = a29.add(u32.shiftRightUnsigned(32)), u32 = new n38(u32.getLowBits(), 0).add(c24).add(l19.shiftRightUnsigned(32)), {
                        high: a29 = a29.add(u32.shiftRightUnsigned(32)),
                        low: l19 = u32.shiftLeft(32).add(new n38(l19.getLowBits(), 0))
                    };
                }(x2, n38.fromString("100000000000000000"));
                H.low = H.low.add(T2), U2 = H.low, V2 = T2, q2 = U2.high_ >>> 0, W2 = V2.high_ >>> 0, (q2 < W2 || q2 === W2 && U2.low_ >>> 0 < V2.low_ >>> 0) && (H.high = H.high.add(n38.fromNumber(1))), e20 = j2 + a28;
                var Y2 = {
                    low: n38.fromNumber(0),
                    high: n38.fromNumber(0)
                };
                H.high.shiftRightUnsigned(49).and(n38.fromNumber(1)).equals(n38.fromNumber) ? (Y2.high = Y2.high.or(n38.fromNumber(3).shiftLeft(61)), Y2.high = Y2.high.or(n38.fromNumber(e20).and(n38.fromNumber(16383).shiftLeft(47))), Y2.high = Y2.high.or(H.high.and(n38.fromNumber(140737488355327)))) : (Y2.high = Y2.high.or(n38.fromNumber(16383 & e20).shiftLeft(49)), Y2.high = Y2.high.or(H.high.and(n38.fromNumber(562949953421311)))), Y2.low = H.low, r29 && (Y2.high = Y2.high.or(n38.fromString("9223372036854775808")));
                var K2 = p2.allocBuffer(16);
                return N3 = 0, K2[N3++] = 255 & Y2.low.low_, K2[N3++] = Y2.low.low_ >> 8 & 255, K2[N3++] = Y2.low.low_ >> 16 & 255, K2[N3++] = Y2.low.low_ >> 24 & 255, K2[N3++] = 255 & Y2.low.high_, K2[N3++] = Y2.low.high_ >> 8 & 255, K2[N3++] = Y2.low.high_ >> 16 & 255, K2[N3++] = Y2.low.high_ >> 24 & 255, K2[N3++] = 255 & Y2.high.low_, K2[N3++] = Y2.high.low_ >> 8 & 255, K2[N3++] = Y2.high.low_ >> 16 & 255, K2[N3++] = Y2.high.low_ >> 24 & 255, K2[N3++] = 255 & Y2.high.high_, K2[N3++] = Y2.high.high_ >> 8 & 255, K2[N3++] = Y2.high.high_ >> 16 & 255, K2[N3++] = Y2.high.high_ >> 24 & 255, new d2(K2);
            };
            a28 = 6176, d2.prototype.toString = function() {
                for(var t4, e20, r29, o36, i22, s26, u32 = 0, c24 = new Array(36), l19 = 0; l19 < c24.length; l19++)c24[l19] = 0;
                var f17, p12, h8, d10, _2, v2 = 0, m2 = false, g2 = {
                    parts: new Array(4)
                }, b2 = [];
                v2 = 0;
                var w4 = this.bytes;
                if (o36 = w4[v2++] | w4[v2++] << 8 | w4[v2++] << 16 | w4[v2++] << 24, r29 = w4[v2++] | w4[v2++] << 8 | w4[v2++] << 16 | w4[v2++] << 24, e20 = w4[v2++] | w4[v2++] << 8 | w4[v2++] << 16 | w4[v2++] << 24, t4 = w4[v2++] | w4[v2++] << 8 | w4[v2++] << 16 | w4[v2++] << 24, v2 = 0, ({
                    low: new n38(o36, r29),
                    high: new n38(e20, t4)
                }).high.lessThan(n38.ZERO) && b2.push("-"), (i22 = t4 >> 26 & 31) >> 3 == 3) {
                    if (30 === i22) return b2.join("") + "Infinity";
                    if (31 === i22) return "NaN";
                    s26 = t4 >> 15 & 16383, h8 = 8 + (t4 >> 14 & 1);
                } else h8 = t4 >> 14 & 7, s26 = t4 >> 17 & 16383;
                if (f17 = s26 - a28, g2.parts[0] = (16383 & t4) + ((15 & h8) << 14), g2.parts[1] = e20, g2.parts[2] = r29, g2.parts[3] = o36, 0 === g2.parts[0] && 0 === g2.parts[1] && 0 === g2.parts[2] && 0 === g2.parts[3]) m2 = true;
                else for(_2 = 3; _2 >= 0; _2--){
                    var O3 = 0, S3 = y2(g2);
                    if (g2 = S3.quotient, O3 = S3.rem.low_) for(d10 = 8; d10 >= 0; d10--)c24[9 * _2 + d10] = O3 % 10, O3 = Math.floor(O3 / 10);
                }
                if (m2) u32 = 1, c24[v2] = 0;
                else for(u32 = 36, l19 = 0; !c24[v2];)l19++, u32 -= 1, v2 += 1;
                if ((p12 = u32 - 1 + f17) >= 34 || p12 <= -7 || f17 > 0) {
                    for(b2.push(c24[v2++]), u32 -= 1, b2.push("."), l19 = 0; l19 < u32; l19++)b2.push(c24[v2++]);
                    b2.push("E"), p12 > 0 ? b2.push("+" + p12) : b2.push(p12);
                } else if (f17 >= 0) for(l19 = 0; l19 < u32; l19++)b2.push(c24[v2++]);
                else {
                    var A = u32 + f17;
                    if (A > 0) for(l19 = 0; l19 < A; l19++)b2.push(c24[v2++]);
                    else b2.push("0");
                    for(b2.push("."); (A++) < 0;)b2.push("0");
                    for(l19 = 0; l19 < u32 - Math.max(A - 1, 0); l19++)b2.push(c24[v2++]);
                }
                return b2.join("");
            }, d2.prototype.toJSON = function() {
                return {
                    $numberDecimal: this.toString()
                };
            }, t2.exports = d2, t2.exports.Decimal128 = d2;
        },
        function(t2, e3) {
            function r2() {
                if (!(this instanceof r2)) return new r2;
                this._bsontype = "MinKey";
            }
            t2.exports = r2, t2.exports.MinKey = r2;
        },
        function(t2, e3) {
            function r2() {
                if (!(this instanceof r2)) return new r2;
                this._bsontype = "MaxKey";
            }
            t2.exports = r2, t2.exports.MaxKey = r2;
        },
        function(t2, e3) {
            function r2(t4, e20, n38) {
                if (!(this instanceof r2)) return new r2(t4, e20, n38);
                this._bsontype = "DBRef", this.namespace = t4, this.oid = e20, this.db = n38;
            }
            r2.prototype.toJSON = function() {
                return {
                    $ref: this.namespace,
                    $id: this.oid,
                    $db: null == this.db ? "" : this.db
                };
            }, t2.exports = r2, t2.exports.DBRef = r2;
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = r2(114);
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = new Set([
                "__proto__",
                "constructor",
                "prototype"
            ]);
        },
        function(t2, e3, r2) {
            "use strict";
            var n38 = r2(51);
            /*!
 * ignore
 */ t2.exports = function(t4) {
                var e20 = null != this ? this.path : null;
                return n38(t4, e20);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n38 = r2(13);
            /*!
 * Given a value, cast it to a boolean, or throw a `CastError` if the value
 * cannot be casted. `null` and `undefined` are considered valid.
 *
 * @param {Any} value
 * @param {String} [path] optional the path to set on the CastError
 * @return {Boolean|null|undefined}
 * @throws {CastError} if `value` is not one of the allowed values
 * @api private
 */ t2.exports = function(e20, r29) {
                if (t2.exports.convertToTrue.has(e20)) return true;
                if (t2.exports.convertToFalse.has(e20)) return false;
                if (null == e20) return e20;
                throw new n38("boolean", e20, r29);
            }, t2.exports.convertToTrue = new Set([
                true,
                "true",
                1,
                "1",
                "yes"
            ]), t2.exports.convertToFalse = new Set([
                false,
                "false",
                0,
                "0",
                "no"
            ]);
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e20) {
                /*!
 * Centralize this so we can more easily work around issues with people
 * stubbing out `process.nextTick()` in tests using sinon:
 * https://github.com/sinonjs/lolex#automatically-incrementing-mocked-time
 * See gh-6074
 */ t2.exports = function(t4) {
                    return e20.nextTick(t4);
                };
            }).call(this, r2(7));
        },
        function(t2, e3, r2) {
            "use strict";
            (function(n38) {
                /*!
 * Module dependencies.
 */ function o35(t4, e20, r29) {
                    return e20 in t4 ? Object.defineProperty(t4, e20, {
                        value: r29,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    }) : t4[e20] = r29, t4;
                }
                function i21(t4) {
                    return (i21 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
                        return typeof t5;
                    } : function(t5) {
                        return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
                    })(t4);
                }
                function s25(t4, e20) {
                    var r29 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
                    if (!r29) {
                        if (Array.isArray(t4) || (r29 = (function(t5, e21) {
                            if (!t5) return;
                            if ("string" == typeof t5) return a28(t5, e21);
                            var r30 = Object.prototype.toString.call(t5).slice(8, -1);
                            "Object" === r30 && t5.constructor && (r30 = t5.constructor.name);
                            if ("Map" === r30 || "Set" === r30) return Array.from(t5);
                            if ("Arguments" === r30 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r30)) return a28(t5, e21);
                        })(t4)) || e20 && t4 && "number" == typeof t4.length) {
                            r29 && (t4 = r29);
                            var n39 = 0, o36 = function() {
                            };
                            return {
                                s: o36,
                                n: function() {
                                    return n39 >= t4.length ? {
                                        done: true
                                    } : {
                                        done: false,
                                        value: t4[n39++]
                                    };
                                },
                                e: function(t5) {
                                    throw t5;
                                },
                                f: o36
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var i22, s26 = true, u31 = false;
                    return {
                        s: function() {
                            r29 = r29.call(t4);
                        },
                        n: function() {
                            var t5 = r29.next();
                            return s26 = t5.done, t5;
                        },
                        e: function(t5) {
                            u31 = true, i22 = t5;
                        },
                        f: function() {
                            try {
                                s26 || null == r29.return || r29.return();
                            } finally{
                                if (u31) throw i22;
                            }
                        }
                    };
                }
                function a28(t4, e20) {
                    (null == e20 || e20 > t4.length) && (e20 = t4.length);
                    for(var r29 = 0, n40 = new Array(e20); r29 < e20; r29++)n40[r29] = t4[r29];
                    return n40;
                }
                var u31, c23 = r2(19).EventEmitter, l2 = r2(139), f3 = r2(14), p2 = r2(6), h5 = r2(9), y2 = r2(140), d2 = r2(54), _2 = r2(75), v2 = r2(0).arrayParentSymbol, m2 = r2(3), g2 = r2(141), b2 = r2(71), w4 = r2(48), O4 = r2(15).get().ReadPreference, S4 = r2(142), A = r2(4), $2 = r2(1), E3 = r2(146), j2 = r2(147).middlewareFunctions, P = r2(77).middlewareFunctions, x2 = j2.concat(P).reduce(function(t4, e20) {
                    return t4.add(e20);
                }, new Set), T2 = 0;
                function N3(t4, e20) {
                    if (!(this instanceof N3)) return new N3(t4, e20);
                    if (this.obj = t4, this.paths = {
                    }, this.aliases = {
                    }, this.subpaths = {
                    }, this.virtuals = {
                    }, this.singleNestedPaths = {
                    }, this.nested = {
                    }, this.inherits = {
                    }, this.callQueue = [], this._indexes = [], this.methods = {
                    }, this.methodOptions = {
                    }, this.statics = {
                    }, this.tree = {
                    }, this.query = {
                    }, this.childSchemas = [], this.plugins = [], this.$id = ++T2, this.s = {
                        hooks: new l2
                    }, this.options = this.defaultOptions(e20), Array.isArray(t4)) {
                        var r29, n40 = s25(t4);
                        try {
                            for(n40.s(); !(r29 = n40.n()).done;){
                                var o37 = r29.value;
                                this.add(o37);
                            }
                        } catch (t5) {
                            n40.e(t5);
                        } finally{
                            n40.f();
                        }
                    } else t4 && this.add(t4);
                    var i22 = t4 && t4._id && $2.isObject(t4._id);
                    !this.paths._id && !this.options.noId && this.options._id && !i22 && _2(this), this.setupTimestamp(this.options.timestamps);
                }
                /*!
 * Create virtual properties with alias field
 */ /*!
 * Inherit from EventEmitter.
 */ N3.prototype = Object.create(c23.prototype), N3.prototype.constructor = N3, N3.prototype.instanceOfSchema = true, /*!
 * ignore
 */ Object.defineProperty(N3.prototype, "$schemaType", {
                    configurable: false,
                    enumerable: false,
                    writable: true
                }), Object.defineProperty(N3.prototype, "childSchemas", {
                    configurable: false,
                    enumerable: true,
                    writable: true
                }), N3.prototype.obj, N3.prototype.paths, N3.prototype.tree, N3.prototype.clone = function() {
                    var t4 = this, e20 = new (null == this.base ? N3 : this.base.Schema)({
                    }, this._userProvidedOptions);
                    return e20.base = this.base, e20.obj = this.obj, e20.options = $2.clone(this.options), e20.callQueue = this.callQueue.map(function(t5) {
                        return t5;
                    }), e20.methods = $2.clone(this.methods), e20.methodOptions = $2.clone(this.methodOptions), e20.statics = $2.clone(this.statics), e20.query = $2.clone(this.query), e20.plugins = Array.prototype.slice.call(this.plugins), e20._indexes = $2.clone(this._indexes), e20.s.hooks = this.s.hooks.clone(), e20.tree = $2.clone(this.tree), e20.paths = $2.clone(this.paths), e20.nested = $2.clone(this.nested), e20.subpaths = $2.clone(this.subpaths), e20.singleNestedPaths = $2.clone(this.singleNestedPaths), e20.childSchemas = /*!
 * ignore
 */ (function(t5) {
                        for(var e21 = [], r30 = 0, n41 = Object.keys(t5.paths); r30 < n41.length; r30++){
                            var o38 = n41[r30], i22 = t5.paths[o38];
                            (i22.$isMongooseDocumentArray || i22.$isSingleNested) && e21.push({
                                schema: i22.schema,
                                model: i22.caster
                            });
                        }
                        return e21;
                    })(e20), e20.virtuals = $2.clone(this.virtuals), e20.$globalPluginsApplied = this.$globalPluginsApplied, e20.$isRootDiscriminator = this.$isRootDiscriminator, e20.$implicitlyCreated = this.$implicitlyCreated, null != this.discriminatorMapping && (e20.discriminatorMapping = Object.assign({
                    }, this.discriminatorMapping)), null != this.discriminators && (e20.discriminators = Object.assign({
                    }, this.discriminators)), e20.aliases = Object.assign({
                    }, this.aliases), e20.on("init", function(e21) {
                        return t4.emit("init", e21);
                    }), e20;
                }, N3.prototype.pick = function(t4, e20) {
                    var r30 = new N3({
                    }, e20 || this.options);
                    if (!Array.isArray(t4)) throw new f3('Schema#pick() only accepts an array argument, got "' + i21(t4) + '"');
                    var n41, a29 = s25(t4);
                    try {
                        for(a29.s(); !(n41 = a29.n()).done;){
                            var u32 = n41.value;
                            if (this.nested[u32]) r30.add(o35({
                            }, u32, m2(this.tree, u32)));
                            else {
                                var c24 = this.path(u32);
                                if (null == c24) throw new f3("Path `" + u32 + "` is not in the schema");
                                r30.add(o35({
                                }, u32, c24));
                            }
                        }
                    } catch (t5) {
                        a29.e(t5);
                    } finally{
                        a29.f();
                    }
                    return r30;
                }, N3.prototype.defaultOptions = function(t4) {
                    t4 && false === t4.safe && (t4.safe = {
                        w: 0
                    }), t4 && t4.safe && 0 === t4.safe.w && (t4.versionKey = false), this._userProvidedOptions = null == t4 ? {
                    } : $2.clone(t4);
                    var e20 = m2(this, "base.options", {
                    });
                    if ((t4 = $2.options({
                        strict: !("strict" in e20) || e20.strict,
                        strictQuery: "strictQuery" in e20 && e20.strictQuery,
                        bufferCommands: true,
                        capped: false,
                        versionKey: "__v",
                        optimisticConcurrency: false,
                        discriminatorKey: "__t",
                        minimize: true,
                        autoIndex: null,
                        shardKey: null,
                        read: null,
                        validateBeforeSave: true,
                        noId: false,
                        _id: true,
                        noVirtualId: false,
                        id: true,
                        typeKey: "type",
                        typePojoToMixed: !("typePojoToMixed" in e20) || e20.typePojoToMixed
                    }, $2.clone(t4))).read && (t4.read = O4(t4.read)), t4.optimisticConcurrency && !t4.versionKey) throw new f3("Must set `versionKey` if using `optimisticConcurrency`");
                    return t4;
                }, N3.prototype.add = function(t4, e20) {
                    if (t4 instanceof N3 || null != t4 && t4.instanceOfSchema) return b2(this, t4), this;
                    if (false === t4._id && null == e20 && (this.options._id = false), "__proto__." === (e20 = e20 || "") || "constructor." === e20 || "prototype." === e20) return this;
                    for(var r30 = 0, n41 = Object.keys(t4); r30 < n41.length; r30++){
                        var i23 = n41[r30], a29 = e20 + i23;
                        if (null == t4[i23]) throw new TypeError("Invalid value for schema path `" + a29 + '`, got value "' + t4[i23] + '"');
                        if ("_id" !== i23 || false !== t4[i23]) {
                            if (t4[i23] instanceof d2 || "VirtualType" === m2(t4[i23], "constructor.name", null)) this.virtual(t4[i23]);
                            else {
                                if (Array.isArray(t4[i23]) && 1 === t4[i23].length && null == t4[i23][0]) throw new TypeError("Invalid value for schema Array path `" + a29 + '`, got value "' + t4[i23][0] + '"');
                                if ($2.isPOJO(t4[i23]) || t4[i23] instanceof h5) {
                                    if (Object.keys(t4[i23]).length < 1) e20 && (this.nested[e20.substr(0, e20.length - 1)] = true), this.path(a29, t4[i23]);
                                    else if (!t4[i23][this.options.typeKey] || "type" === this.options.typeKey && t4[i23].type.type) this.nested[a29] = true, this.add(t4[i23], a29 + ".");
                                    else if (!this.options.typePojoToMixed && $2.isPOJO(t4[i23][this.options.typeKey])) {
                                        e20 && (this.nested[e20.substr(0, e20.length - 1)] = true);
                                        var u33 = new N3(t4[i23][this.options.typeKey], {
                                            typePojoToMixed: false
                                        }), c25 = Object.assign({
                                        }, t4[i23], o35({
                                        }, this.options.typeKey, u33));
                                        this.path(e20 + i23, c25);
                                    } else e20 && (this.nested[e20.substr(0, e20.length - 1)] = true), this.path(e20 + i23, t4[i23]);
                                } else e20 && (this.nested[e20.substr(0, e20.length - 1)] = true), this.path(e20 + i23, t4[i23]);
                            }
                        }
                    }
                    return (function(t5, e21) {
                        var r31, n42 = s25(e21 = e21 || Object.keys(t5.paths));
                        try {
                            for(n42.s(); !(r31 = n42.n()).done;){
                                var o39 = r31.value, i24 = m2(t5.paths[o39], "options");
                                if (null != i24) {
                                    var a30 = t5.paths[o39].path, u34 = i24.alias;
                                    if (u34) {
                                        if ("string" != typeof u34) throw new Error("Invalid value for alias option on " + a30 + ", got " + u34);
                                        t5.aliases[u34] = a30, t5.virtual(u34).get(function(t6) {
                                            return function() {
                                                return "function" == typeof this.get ? this.get(t6) : this[t6];
                                            };
                                        }(a30)).set(function(t6) {
                                            return function(e22) {
                                                return this.$set(t6, e22);
                                            };
                                        }(a30));
                                    }
                                }
                            }
                        } catch (t6) {
                            n42.e(t6);
                        } finally{
                            n42.f();
                        }
                    })(this, Object.keys(t4).map(function(t5) {
                        return e20 ? e20 + t5 : t5;
                    })), this;
                }, N3.reserved = Object.create(null), N3.prototype.reserved = N3.reserved;
                var k2 = N3.reserved;
                /*!
 * ignore
 */ function B2(t4) {
                    return /\.\d+/.test(t4) ? t4.replace(/\.\d+\./g, ".$.").replace(/\.\d+$/, ".$") : t4;
                }
                /*!
 * ignore
 */ function R2(t4, e20) {
                    for(var r30 = 0, n41 = Object.keys(t4.paths); r30 < n41.length; r30++){
                        var o40 = n41[r30];
                        if (o40.includes(".$*")) {
                            if (new RegExp("^" + o40.replace(/\.\$\*/g, "\\.[^.]+") + "$").test(e20)) return t4.paths[o40];
                        }
                    }
                    return null;
                }
                /*!
 * ignore. Deprecated re: #6405
 */ function C3(t4, e20) {
                    var r30 = e20.split(/\.(\d+)\.|\.(\d+)$/).filter(Boolean);
                    if (r30.length < 2) return t4.paths.hasOwnProperty(r30[0]) ? t4.paths[r30[0]] : "adhocOrUndefined";
                    var n41 = t4.path(r30[0]), o41 = false;
                    if (!n41) return "adhocOrUndefined";
                    for(var i25 = r30.length - 1, s26 = 1; s26 < r30.length; ++s26){
                        o41 = false;
                        var a31 = r30[s26];
                        if (s26 === i25 && n41 && !/\D/.test(a31)) {
                            n41 = n41.$isMongooseDocumentArray ? n41.$embeddedSchemaType : n41 instanceof u31.Array ? n41.caster : void 0;
                            break;
                        }
                        if (/\D/.test(a31)) {
                            if (!n41 || !n41.schema) {
                                n41 = void 0;
                                break;
                            }
                            o41 = "nested" === n41.schema.pathType(a31), n41 = n41.schema.path(a31);
                        } else n41 instanceof u31.Array && s26 !== i25 && (n41 = n41.caster);
                    }
                    return t4.subpaths[e20] = n41, n41 ? "real" : o41 ? "nested" : "adhocOrUndefined";
                }
                /*!
 * ignore
 */ k2.prototype = k2.emit = k2.listeners = k2.on = k2.removeListener = k2.collection = k2.errors = k2.get = k2.init = k2.isModified = k2.isNew = k2.populated = k2.remove = k2.save = k2.toObject = k2.validate = 1, N3.prototype.path = function(t4, e20) {
                    var r30 = B2(t4);
                    if ((void 0) === e20) {
                        var n41 = function(t5, e21, r31) {
                            if (t5.paths.hasOwnProperty(e21)) return t5.paths[e21];
                            if (t5.subpaths.hasOwnProperty(r31)) return t5.subpaths[r31];
                            if (t5.singleNestedPaths.hasOwnProperty(r31) && "object" === i21(t5.singleNestedPaths[r31])) return t5.singleNestedPaths[r31];
                            return null;
                        }(this, t4, r30);
                        if (null != n41) return n41;
                        var o41 = R2(this, t4);
                        return null != o41 ? o41 : null != (n41 = this.hasMixedParent(r30)) ? n41 : /\.\d+\.?.*$/.test(t4) ? (function(t5, e21) {
                            return C3(t5, e21), t5.subpaths[e21];
                        })(this, t4) : void 0;
                    }
                    var a32 = t4.split(".")[0];
                    if (k2[a32]) throw new Error("`" + a32 + "` may not be used as a schema pathname");
                    "object" === i21(e20) && $2.hasUserDefinedProperty(e20, "ref") && E3(e20.ref, t4);
                    var u35, c26 = t4.split(/\./), l19 = c26.pop(), f17 = this.tree, h8 = "", y10 = s25(c26);
                    try {
                        for(y10.s(); !(u35 = y10.n()).done;){
                            var d10 = u35.value;
                            if (h8 = h8 += (h8.length > 0 ? "." : "") + d10, f17[d10] || (this.nested[h8] = true, f17[d10] = {
                            }), "object" !== i21(f17[d10])) {
                                var _7 = "Cannot set nested path `" + t4 + "`. Parent path `" + h8 + "` already set to type " + f17[d10].name + ".";
                                throw new Error(_7);
                            }
                            f17 = f17[d10];
                        }
                    } catch (t5) {
                        y10.e(t5);
                    } finally{
                        y10.f();
                    }
                    f17[l19] = $2.clone(e20), this.paths[t4] = this.interpretAsType(t4, e20, this.options);
                    var v5 = this.paths[t4];
                    if (v5.$isSchemaMap) {
                        var m4 = t4 + ".$*", g3 = {
                            type: {
                            }
                        };
                        if ($2.hasUserDefinedProperty(e20, "of")) g3 = $2.isPOJO(e20.of) && Object.keys(e20.of).length > 0 && !$2.hasUserDefinedProperty(e20.of, this.options.typeKey) ? new N3(e20.of) : e20.of;
                        this.paths[m4] = this.interpretAsType(m4, g3, this.options), v5.$__schemaType = this.paths[m4];
                    }
                    if (v5.$isSingleNested) {
                        for(var b3 = 0, w5 = Object.keys(v5.schema.paths); b3 < w5.length; b3++){
                            var O5 = w5[b3];
                            this.singleNestedPaths[t4 + "." + O5] = v5.schema.paths[O5];
                        }
                        for(var S5 = 0, A1 = Object.keys(v5.schema.singleNestedPaths); S5 < A1.length; S5++){
                            var j3 = A1[S5];
                            this.singleNestedPaths[t4 + "." + j3] = v5.schema.singleNestedPaths[j3];
                        }
                        for(var P1 = 0, x3 = Object.keys(v5.schema.subpaths); P1 < x3.length; P1++){
                            var T3 = x3[P1];
                            this.singleNestedPaths[t4 + "." + T3] = v5.schema.subpaths[T3];
                        }
                        for(var D = 0, M3 = Object.keys(v5.schema.nested); D < M3.length; D++){
                            var I = M3[D];
                            this.singleNestedPaths[t4 + "." + I] = "nested";
                        }
                        Object.defineProperty(v5.schema, "base", {
                            configurable: true,
                            enumerable: false,
                            writable: false,
                            value: this.base
                        }), v5.caster.base = this.base, this.childSchemas.push({
                            schema: v5.schema,
                            model: v5.caster
                        });
                    } else v5.$isMongooseDocumentArray && (Object.defineProperty(v5.schema, "base", {
                        configurable: true,
                        enumerable: false,
                        writable: false,
                        value: this.base
                    }), v5.casterConstructor.base = this.base, this.childSchemas.push({
                        schema: v5.schema,
                        model: v5.casterConstructor
                    }));
                    if (v5.$isMongooseArray && v5.caster instanceof p2) {
                        for(var F3 = t4, L3 = v5, U2 = []; L3.$isMongooseArray;)F3 += ".$", L3.$isMongooseDocumentArray ? (L3.$embeddedSchemaType._arrayPath = F3, L3.$embeddedSchemaType._arrayParentPath = t4, L3 = L3.$embeddedSchemaType.clone()) : (L3.caster._arrayPath = F3, L3.caster._arrayParentPath = t4, L3 = L3.caster.clone()), L3.path = F3, U2.push(L3);
                        for(var V2 = 0, q2 = U2; V2 < q2.length; V2++){
                            var W2 = q2[V2];
                            this.subpaths[W2.path] = W2;
                        }
                    }
                    if (v5.$isMongooseDocumentArray) {
                        for(var H = 0, Y2 = Object.keys(v5.schema.paths); H < Y2.length; H++){
                            var K2 = Y2[H];
                            this.subpaths[t4 + "." + K2] = v5.schema.paths[K2], v5.schema.paths[K2].$isUnderneathDocArray = true;
                        }
                        for(var z = 0, Q = Object.keys(v5.schema.subpaths); z < Q.length; z++){
                            var J = Q[z];
                            this.subpaths[t4 + "." + J] = v5.schema.subpaths[J], v5.schema.subpaths[J].$isUnderneathDocArray = true;
                        }
                        for(var G = 0, X2 = Object.keys(v5.schema.singleNestedPaths); G < X2.length; G++){
                            var Z = X2[G], tt = v5.schema.singleNestedPaths[Z];
                            this.subpaths[t4 + "." + Z] = tt, "object" === i21(tt) && null != tt && (tt.$isUnderneathDocArray = true);
                        }
                    }
                    return this;
                }, Object.defineProperty(N3.prototype, "base", {
                    configurable: true,
                    enumerable: false,
                    writable: true,
                    value: null
                }), N3.prototype.interpretAsType = function(t4, e20, r30) {
                    if (e20 instanceof p2) {
                        if (e20.path === t4) return e20;
                        var o42 = e20.clone();
                        return o42.path = t4, o42;
                    }
                    var s26 = null != this.base ? this.base.Schema.Types : N3.Types;
                    if (!($2.isPOJO(e20) || e20 instanceof h5) && "Object" !== $2.getFunctionName(e20.constructor)) {
                        var a32 = e20;
                        (e20 = {
                        })[r30.typeKey] = a32;
                    }
                    var u35, c26 = !e20[r30.typeKey] || "type" === r30.typeKey && e20.type.type ? {
                    } : e20[r30.typeKey];
                    if ($2.isPOJO(c26) || "mixed" === c26) return new s26.Mixed(t4, e20);
                    if (Array.isArray(c26) || c26 === Array || "array" === c26 || c26 === s26.Array) {
                        var l19 = c26 === Array || "array" === c26 ? e20.cast || e20.of : c26[0];
                        if (l19 && l19.instanceOfSchema) return new s26.DocumentArray(t4, l19, e20);
                        if (l19 && l19[r30.typeKey] && l19[r30.typeKey].instanceOfSchema) return new s26.DocumentArray(t4, l19[r30.typeKey], e20, l19);
                        if (Array.isArray(l19)) return new s26.Array(t4, this.interpretAsType(t4, l19, r30), e20);
                        if ("string" == typeof l19) l19 = s26[l19.charAt(0).toUpperCase() + l19.substring(1)];
                        else if (l19 && (!l19[r30.typeKey] || "type" === r30.typeKey && l19.type.type) && $2.isPOJO(l19)) {
                            if (Object.keys(l19).length) {
                                var f17 = {
                                    minimize: r30.minimize
                                };
                                r30.typeKey && (f17.typeKey = r30.typeKey), r30.hasOwnProperty("strict") && (f17.strict = r30.strict), r30.hasOwnProperty("typePojoToMixed") && (f17.typePojoToMixed = r30.typePojoToMixed), this._userProvidedOptions.hasOwnProperty("_id") ? f17._id = this._userProvidedOptions._id : N3.Types.DocumentArray.defaultOptions && null != N3.Types.DocumentArray.defaultOptions._id && (f17._id = N3.Types.DocumentArray.defaultOptions._id);
                                var y10 = new N3(l19, f17);
                                return y10.$implicitlyCreated = true, new s26.DocumentArray(t4, y10, e20);
                            }
                            return new s26.Array(t4, s26.Mixed, e20);
                        }
                        if (l19 && (u35 = "string" == typeof (c26 = !l19[r30.typeKey] || "type" === r30.typeKey && l19.type.type ? l19 : l19[r30.typeKey]) ? c26 : c26.schemaName || $2.getFunctionName(c26), !s26.hasOwnProperty(u35))) throw new TypeError("Invalid schema configuration: " + "`".concat(u35, "` is not a valid type within the array `").concat(t4, "`.") + "See http://bit.ly/mongoose-schematypes for a list of valid schema types.");
                        return new s26.Array(t4, l19 || s26.Mixed, e20, r30);
                    }
                    if (c26 && c26.instanceOfSchema) return new s26.Embedded(c26, t4, e20);
                    if ((u35 = n38.isBuffer(c26) ? "Buffer" : "function" == typeof c26 || "object" === i21(c26) ? c26.schemaName || $2.getFunctionName(c26) : null == c26 ? "" + c26 : c26.toString()) && (u35 = u35.charAt(0).toUpperCase() + u35.substring(1)), "ObjectID" === u35 && (u35 = "ObjectId"), null == s26[u35]) throw new TypeError("Invalid schema configuration: `".concat(u35, "` is not ") + "a valid type at path `".concat(t4, "`. See ") + "http://bit.ly/mongoose-schematypes for a list of valid schema types.");
                    return new s26[u35](t4, e20);
                }, N3.prototype.eachPath = function(t4) {
                    for(var e20 = Object.keys(this.paths), r30 = e20.length, n42 = 0; n42 < r30; ++n42)t4(e20[n42], this.paths[e20[n42]]);
                    return this;
                }, N3.prototype.requiredPaths = function(t4) {
                    if (this._requiredpaths && !t4) return this._requiredpaths;
                    for(var e20 = Object.keys(this.paths), r30 = e20.length, n42 = []; r30--;){
                        var o43 = e20[r30];
                        this.paths[o43].isRequired && n42.push(o43);
                    }
                    return this._requiredpaths = n42, this._requiredpaths;
                }, N3.prototype.indexedPaths = function() {
                    return this._indexedpaths || (this._indexedpaths = this.indexes()), this._indexedpaths;
                }, N3.prototype.pathType = function(t4) {
                    var e20 = B2(t4);
                    if (this.paths.hasOwnProperty(t4)) return "real";
                    if (this.virtuals.hasOwnProperty(t4)) return "virtual";
                    if (this.nested.hasOwnProperty(t4)) return "nested";
                    if (this.subpaths.hasOwnProperty(e20) || this.subpaths.hasOwnProperty(t4)) return "real";
                    var r30 = this.singleNestedPaths.hasOwnProperty(e20) || this.singleNestedPaths.hasOwnProperty(t4);
                    return r30 ? "nested" === r30 ? "nested" : "real" : null != R2(this, t4) ? "real" : /\.\d+\.|\.\d+$/.test(t4) ? C3(this, t4) : "adhocOrUndefined";
                }, N3.prototype.hasMixedParent = function(t4) {
                    var e20 = t4.split(/\./g);
                    t4 = "";
                    for(var r30 = 0; r30 < e20.length; ++r30)if (t4 = r30 > 0 ? t4 + "." + e20[r30] : e20[r30], this.paths.hasOwnProperty(t4) && this.paths[t4] instanceof u31.Mixed) return this.paths[t4];
                    return null;
                }, N3.prototype.setupTimestamp = function(t4) {
                    return S4(this, t4);
                }, N3.prototype.queue = function(t4, e20) {
                    return this.callQueue.push([
                        t4,
                        e20
                    ]), this;
                }, N3.prototype.pre = function(t4) {
                    if (t4 instanceof RegExp) {
                        var e20, r30 = Array.prototype.slice.call(arguments, 1), n42 = s25(x2);
                        try {
                            for(n42.s(); !(e20 = n42.n()).done;){
                                var o44 = e20.value;
                                t4.test(o44) && this.pre.apply(this, [
                                    o44
                                ].concat(r30));
                            }
                        } catch (t5) {
                            n42.e(t5);
                        } finally{
                            n42.f();
                        }
                        return this;
                    }
                    if (Array.isArray(t4)) {
                        var i25, a33 = Array.prototype.slice.call(arguments, 1), u35 = s25(t4);
                        try {
                            for(u35.s(); !(i25 = u35.n()).done;){
                                var c26 = i25.value;
                                this.pre.apply(this, [
                                    c26
                                ].concat(a33));
                            }
                        } catch (t5) {
                            u35.e(t5);
                        } finally{
                            u35.f();
                        }
                        return this;
                    }
                    return this.s.hooks.pre.apply(this.s.hooks, arguments), this;
                }, N3.prototype.post = function(t4) {
                    if (t4 instanceof RegExp) {
                        var e21, r31 = Array.prototype.slice.call(arguments, 1), n43 = s25(x2);
                        try {
                            for(n43.s(); !(e21 = n43.n()).done;){
                                var o45 = e21.value;
                                t4.test(o45) && this.post.apply(this, [
                                    o45
                                ].concat(r31));
                            }
                        } catch (t5) {
                            n43.e(t5);
                        } finally{
                            n43.f();
                        }
                        return this;
                    }
                    if (Array.isArray(t4)) {
                        var i26, a34 = Array.prototype.slice.call(arguments, 1), u36 = s25(t4);
                        try {
                            for(u36.s(); !(i26 = u36.n()).done;){
                                var c27 = i26.value;
                                this.post.apply(this, [
                                    c27
                                ].concat(a34));
                            }
                        } catch (t5) {
                            u36.e(t5);
                        } finally{
                            u36.f();
                        }
                        return this;
                    }
                    return this.s.hooks.post.apply(this.s.hooks, arguments), this;
                }, N3.prototype.plugin = function(t4, e22) {
                    if ("function" != typeof t4) throw new Error('First param to `schema.plugin()` must be a function, got "' + i21(t4) + '"');
                    if (e22 && e22.deduplicate) {
                        var r32, n44 = s25(this.plugins);
                        try {
                            for(n44.s(); !(r32 = n44.n()).done;){
                                if (r32.value.fn === t4) return this;
                            }
                        } catch (t5) {
                            n44.e(t5);
                        } finally{
                            n44.f();
                        }
                    }
                    return this.plugins.push({
                        fn: t4,
                        opts: e22
                    }), t4(this, e22), this;
                }, N3.prototype.method = function(t4, e22, r33) {
                    if ("string" != typeof t4) for(var n45 in t4)this.methods[n45] = t4[n45], this.methodOptions[n45] = $2.clone(r33);
                    else this.methods[t4] = e22, this.methodOptions[t4] = $2.clone(r33);
                    return this;
                }, N3.prototype.static = function(t4, e22) {
                    if ("string" != typeof t4) for(var r33 in t4)this.statics[r33] = t4[r33];
                    else this.statics[t4] = e22;
                    return this;
                }, N3.prototype.index = function(t4, e22) {
                    return t4 || (t4 = {
                    }), e22 || (e22 = {
                    }), e22.expires && $2.expires(e22), this._indexes.push([
                        t4,
                        e22
                    ]), this;
                }, N3.prototype.set = function(t4, e22, r33) {
                    if (1 === arguments.length) return this.options[t4];
                    switch(t4){
                        case "read":
                            this.options[t4] = O4(e22, r33), this._userProvidedOptions[t4] = this.options[t4];
                            break;
                        case "safe":
                            D(this.options, e22), this._userProvidedOptions[t4] = this.options[t4];
                            break;
                        case "timestamps":
                            this.setupTimestamp(e22), this.options[t4] = e22, this._userProvidedOptions[t4] = this.options[t4];
                            break;
                        case "_id":
                            this.options[t4] = e22, this._userProvidedOptions[t4] = this.options[t4], e22 && !this.paths._id ? _2(this) : !e22 && null != this.paths._id && this.paths._id.auto && this.remove("_id");
                            break;
                        default:
                            this.options[t4] = e22, this._userProvidedOptions[t4] = this.options[t4];
                    }
                    return this;
                };
                /*!
 * ignore
 */ var D = A.deprecate(function(t4, e22) {
                    t4.safe = false === e22 ? {
                        w: 0
                    } : e22;
                }, "Mongoose: The `safe` option for schemas is deprecated. Use the `writeConcern` option instead: http://bit.ly/mongoose-write-concern");
                N3.prototype.get = function(t4) {
                    return this.options[t4];
                };
                var M4 = "2d 2dsphere hashed text".split(" ");
                /*!
 * ignore
 */ function I(t4, e22) {
                    var r33, n45 = e22.split("."), o46 = n45.pop(), i27 = t4.tree, a35 = s25(n45);
                    try {
                        for(a35.s(); !(r33 = a35.n()).done;)i27 = i27[r33.value];
                    } catch (t5) {
                        a35.e(t5);
                    } finally{
                        a35.f();
                    }
                    delete i27[o46];
                }
                /*!
 * ignore
 */ function F4(t4) {
                    return t4.startsWith("$[") && t4.endsWith("]");
                }
                /*!
 * Module exports.
 */ Object.defineProperty(N3, "indexTypes", {
                    get: function() {
                        return M4;
                    },
                    set: function() {
                        throw new Error("Cannot overwrite Schema.indexTypes");
                    }
                }), N3.prototype.indexes = function() {
                    return g2(this);
                }, N3.prototype.virtual = function(t4, e22) {
                    var r33 = this;
                    if (t4 instanceof d2 || null != t4 && "VirtualType" === t4.constructor.name) return this.virtual(t4.path, t4.options);
                    if (e22 = new y2(e22), $2.hasUserDefinedProperty(e22, [
                        "ref",
                        "refPath"
                    ])) {
                        if (null == e22.localField) throw new Error("Reference virtuals require `localField` option");
                        if (null == e22.foreignField) throw new Error("Reference virtuals require `foreignField` option");
                        this.pre("init", function(r34) {
                            if (w4.has(t4, r34)) {
                                var n45 = w4.get(t4, r34);
                                this.$$populatedVirtuals || (this.$$populatedVirtuals = {
                                }), e22.justOne || e22.count ? this.$$populatedVirtuals[t4] = Array.isArray(n45) ? n45[0] : n45 : this.$$populatedVirtuals[t4] = Array.isArray(n45) ? n45 : null == n45 ? [] : [
                                    n45
                                ], w4.unset(t4, r34);
                            }
                        });
                        var n46 = this.virtual(t4);
                        return n46.options = e22, n46.set(function(r34) {
                            this.$$populatedVirtuals || (this.$$populatedVirtuals = {
                            }), e22.justOne || e22.count ? (this.$$populatedVirtuals[t4] = Array.isArray(r34) ? r34[0] : r34, "object" !== i21(this.$$populatedVirtuals[t4]) && (this.$$populatedVirtuals[t4] = e22.count ? r34 : null)) : (this.$$populatedVirtuals[t4] = Array.isArray(r34) ? r34 : null == r34 ? [] : [
                                r34
                            ], this.$$populatedVirtuals[t4] = this.$$populatedVirtuals[t4].filter(function(t5) {
                                return t5 && "object" === i21(t5);
                            }));
                        }), "function" == typeof e22.get && n46.get(e22.get), n46;
                    }
                    var o46 = this.virtuals, s26 = t4.split(".");
                    if ("real" === this.pathType(t4)) throw new Error('Virtual path "' + t4 + '" conflicts with a real path in the schema');
                    o46[t4] = s26.reduce(function(r34, n47, o47) {
                        return r34[n47] || (r34[n47] = o47 === s26.length - 1 ? new d2(e22, t4) : {
                        }), r34[n47];
                    }, this.tree);
                    for(var a35 = s26[0], u37 = 0; u37 < s26.length - 1; ++u37){
                        if (null != this.paths[a35] && this.paths[a35].$isMongooseDocumentArray) {
                            if ("break" === (function() {
                                var t5 = s26.slice(u37 + 1).join(".");
                                return r33.paths[a35].schema.virtual(t5).get(function(e23, r34, n47) {
                                    var o47 = n47.__parentArray[v2], i27 = a35 + "." + n47.__index + "." + t5;
                                    return o47.get(i27);
                                }), "break";
                            })()) break;
                        }
                        a35 += "." + s26[u37 + 1];
                    }
                    return o46[t4];
                }, N3.prototype.virtualpath = function(t4) {
                    return this.virtuals.hasOwnProperty(t4) ? this.virtuals[t4] : null;
                }, N3.prototype.remove = function(t4) {
                    return "string" == typeof t4 && (t4 = [
                        t4
                    ]), Array.isArray(t4) && t4.forEach(function(t5) {
                        if (null != this.path(t5) || this.nested[t5]) {
                            if (this.nested[t5]) {
                                var e22, r33 = s25(Object.keys(this.paths).concat(Object.keys(this.nested)));
                                try {
                                    for(r33.s(); !(e22 = r33.n()).done;){
                                        var n47 = e22.value;
                                        n47.startsWith(t5 + ".") && (delete this.paths[n47], delete this.nested[n47], I(this, n47));
                                    }
                                } catch (t6) {
                                    r33.e(t6);
                                } finally{
                                    r33.f();
                                }
                                return delete this.nested[t5], void I(this, t5);
                            }
                            delete this.paths[t5], I(this, t5);
                        }
                    }, this), this;
                }, N3.prototype.loadClass = function(t4, e23) {
                    return t4 === Object.prototype || t4 === Function.prototype || t4.prototype.hasOwnProperty("$isMongooseModelPrototype") || (this.loadClass(Object.getPrototypeOf(t4), e23), e23 || Object.getOwnPropertyNames(t4).forEach(function(e24) {
                        if (!e24.match(/^(length|name|prototype|constructor|__proto__)$/)) {
                            var r34 = Object.getOwnPropertyDescriptor(t4, e24);
                            this.static(e24, r34.value);
                        }
                    }, this), Object.getOwnPropertyNames(t4.prototype).forEach(function(r35) {
                        if (!r35.match(/^(constructor)$/)) {
                            var n48 = Object.getOwnPropertyDescriptor(t4.prototype, r35);
                            e23 || "function" == typeof n48.value && this.method(r35, n48.value), "function" == typeof n48.get && (this.virtuals[r35] && (this.virtuals[r35].getters = []), this.virtual(r35).get(n48.get)), "function" == typeof n48.set && (this.virtuals[r35] && (this.virtuals[r35].setters = []), this.virtual(r35).set(n48.set));
                        }
                    }, this)), this;
                }, /*!
 * ignore
 */ N3.prototype._getSchema = function(t4) {
                    var e23 = this.path(t4), r35 = [];
                    if (e23) return e23.$fullPath = t4, e23;
                    for(var n49 = t4.split("."), o46 = 0; o46 < n49.length; ++o46)("$" === n49[o46] || F4(n49[o46])) && (n49[o46] = "0");
                    return (function t5(e24, n50) {
                        for(var o47, i27, s26 = e24.length + 1; s26--;)if (i27 = e24.slice(0, s26).join("."), o47 = n50.path(i27)) {
                            if (r35.push(i27), o47.caster) {
                                if (o47.caster instanceof u31.Mixed) return o47.caster.$fullPath = r35.join("."), o47.caster;
                                if (s26 !== e24.length && o47.schema) {
                                    var a35 = void 0;
                                    return "$" === e24[s26] || F4(e24[s26]) ? s26 + 1 === e24.length ? o47 : ((a35 = t5(e24.slice(s26 + 1), o47.schema)) && (a35.$isUnderneathDocArray = a35.$isUnderneathDocArray || !o47.schema.$isSingleNested), a35) : ((a35 = t5(e24.slice(s26), o47.schema)) && (a35.$isUnderneathDocArray = a35.$isUnderneathDocArray || !o47.schema.$isSingleNested), a35);
                                }
                            } else if (o47.$isSchemaMap) return s26 + 1 >= e24.length ? o47.$__schemaType : t5(e24.slice(s26 + 1), o47.$__schemaType.schema);
                            return o47.$fullPath = r35.join("."), o47;
                        }
                    })(n49, this);
                }, /*!
 * ignore
 */ N3.prototype._getPathType = function(t4) {
                    if (this.path(t4)) return "real";
                    return (function t5(e23, r35) {
                        for(var n49, o46, i27 = e23.length + 1; i27--;){
                            if (o46 = e23.slice(0, i27).join("."), n49 = r35.path(o46)) return n49.caster ? n49.caster instanceof u31.Mixed ? {
                                schema: n49,
                                pathType: "mixed"
                            } : i27 !== e23.length && n49.schema ? "$" === e23[i27] || F4(e23[i27]) ? i27 === e23.length - 1 ? {
                                schema: n49,
                                pathType: "nested"
                            } : t5(e23.slice(i27 + 1), n49.schema) : t5(e23.slice(i27), n49.schema) : {
                                schema: n49,
                                pathType: n49.$isSingleNested ? "nested" : "array"
                            } : {
                                schema: n49,
                                pathType: "real"
                            };
                            if (i27 === e23.length && r35.nested[o46]) return {
                                schema: r35,
                                pathType: "nested"
                            };
                        }
                        return {
                            schema: n49 || r35,
                            pathType: "undefined"
                        };
                    })(t4.split("."), this);
                }, t2.exports = e3 = N3, N3.Types = u31 = r2(55), /*!
 * ignore
 */ e3.ObjectId = u31.ObjectId;
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            var n38 = r2(1);
            function o35(t4, e23) {
                this.path = e23, this.getters = [], this.setters = [], this.options = Object.assign({
                }, t4);
            }
            o35.prototype._applyDefaultGetters = function() {
                if (!(this.getters.length > 0 || this.setters.length > 0)) {
                    var t4 = "$" + this.path;
                    this.getters.push(function() {
                        return this[t4];
                    }), this.setters.push(function(e23) {
                        this[t4] = e23;
                    });
                }
            }, /*!
 * ignore
 */ o35.prototype.clone = function() {
                var t5 = new o35(this.options, this.path);
                return t5.getters = [].concat(this.getters), t5.setters = [].concat(this.setters), t5;
            }, o35.prototype.get = function(t5) {
                return this.getters.push(t5), this;
            }, o35.prototype.set = function(t5) {
                return this.setters.push(t5), this;
            }, o35.prototype.applyGetters = function(t5, e23) {
                n38.hasUserDefinedProperty(this.options, [
                    "ref",
                    "refPath"
                ]) && e23.$$populatedVirtuals && e23.$$populatedVirtuals.hasOwnProperty(this.path) && (t5 = e23.$$populatedVirtuals[this.path]);
                for(var r35 = t5, o46 = this.getters.length - 1; o46 >= 0; o46--)r35 = this.getters[o46].call(e23, r35, this, e23);
                return r35;
            }, o35.prototype.applySetters = function(t5, e23) {
                for(var r35 = t5, n49 = this.setters.length - 1; n49 >= 0; n49--)r35 = this.setters[n49].call(e23, r35, this, e23);
                return r35;
            }, /*!
 * exports
 */ t2.exports = o35;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module exports.
 */ e3.String = r2(148), e3.Number = r2(79), e3.Boolean = r2(152), e3.DocumentArray = r2(153), e3.Embedded = r2(160), e3.Array = r2(56), e3.Buffer = r2(162), e3.Date = r2(164), e3.ObjectId = r2(167), e3.Mixed = r2(25), e3.Decimal128 = e3.Decimal = r2(169), e3.Map = r2(171), e3.Oid = e3.ObjectId, e3.Object = e3.Mixed, e3.Bool = e3.Boolean, e3.ObjectID = e3.ObjectId;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n38(t5, e23) {
                var r35 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                if (!r35) {
                    if (Array.isArray(t5) || (r35 = (function(t6, e24) {
                        if (!t6) return;
                        if ("string" == typeof t6) return o35(t6, e24);
                        var r36 = Object.prototype.toString.call(t6).slice(8, -1);
                        "Object" === r36 && t6.constructor && (r36 = t6.constructor.name);
                        if ("Map" === r36 || "Set" === r36) return Array.from(t6);
                        if ("Arguments" === r36 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r36)) return o35(t6, e24);
                    })(t5)) || e23 && t5 && "number" == typeof t5.length) {
                        r35 && (t5 = r35);
                        var n49 = 0, i21 = function() {
                        };
                        return {
                            s: i21,
                            n: function() {
                                return n49 >= t5.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t5[n49++]
                                };
                            },
                            e: function(t6) {
                                throw t6;
                            },
                            f: i21
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s25, a28 = true, u31 = false;
                return {
                    s: function() {
                        r35 = r35.call(t5);
                    },
                    n: function() {
                        var t6 = r35.next();
                        return a28 = t6.done, t6;
                    },
                    e: function(t6) {
                        u31 = true, s25 = t6;
                    },
                    f: function() {
                        try {
                            a28 || null == r35.return || r35.return();
                        } finally{
                            if (u31) throw s25;
                        }
                    }
                };
            }
            function o35(t5, e23) {
                (null == e23 || e23 > t5.length) && (e23 = t5.length);
                for(var r35 = 0, n50 = new Array(e23); r35 < e23; r35++)n50[r35] = t5[r35];
                return n50;
            }
            var i27, s25, a28 = r2(50), u31 = r2(73), c23 = r2(14), l2 = r2(154), f3 = r2(6), p2 = f3.CastError, h5 = r2(25), y2 = r2(155), d2 = r2(156), _2 = r2(3), v2 = r2(82), m2 = r2(4), g2 = r2(1), b2 = r2(34).castToNumber, w4 = r2(83), O4 = r2(35), S4 = Symbol("mongoose#isNestedArray"), A2 = Object.freeze({
            });
            function $2(t5, e23, n50, o46) {
                s25 || (s25 = r2(36).Embedded);
                var i28, a36, u37 = "type";
                if (o46 && o46.typeKey && (u37 = o46.typeKey), this.schemaOptions = o46, e23) {
                    var c28 = {
                    };
                    g2.isPOJO(e23) && (e23[u37] ? (delete (c28 = g2.clone(e23))[u37], e23 = e23[u37]) : e23 = h5), null != n50 && null != n50.ref && null == c28.ref && (c28.ref = n50.ref), e23 === Object && (e23 = h5);
                    var l20 = "string" == typeof e23 ? e23 : g2.getFunctionName(e23), p12 = r2(55), y11 = p12.hasOwnProperty(l20) ? p12[l20] : e23;
                    if (this.casterConstructor = y11, this.casterConstructor instanceof $2 && (this.casterConstructor[S4] = true), "function" != typeof y11 || y11.$isArraySubdocument || y11.$isSchemaMap) this.caster = y11, this.caster instanceof s25 || (this.caster.path = t5);
                    else {
                        var d11 = this.caster instanceof s25 ? null : t5;
                        this.caster = new y11(d11, c28);
                    }
                    this.$embeddedSchemaType = this.caster;
                }
                if (this.$isMongooseArray = true, f3.call(this, t5, n50, "Array"), null != this.defaultValue && (i28 = this.defaultValue, a36 = "function" == typeof i28), !("defaultValue" in this) || (void 0) !== this.defaultValue) {
                    var _8 = function() {
                        var t6 = [];
                        return a36 ? t6 = i28.call(this) : null != i28 && (t6 = t6.concat(i28)), t6;
                    };
                    _8.$runBeforeSetters = !a36, this.default(_8);
                }
            }
            $2.schemaName = "Array", $2.options = {
                castNonArrays: true
            }, $2.defaultOptions = {
            }, $2.set = f3.set, /*!
 * Inherits from SchemaType.
 */ $2.prototype = Object.create(f3.prototype), $2.prototype.constructor = $2, $2.prototype.OptionsConstructor = l2, /*!
 * ignore
 */ $2._checkRequired = f3.prototype.checkRequired, $2.checkRequired = f3.checkRequired, $2.prototype.checkRequired = function(t5, e23) {
                return f3._isRef(this, t5, e23, true) ? !!t5 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : $2.checkRequired())(t5);
            }, $2.prototype.enum = function() {
                for(var t5 = this;;){
                    var e23 = _2(t5, "caster.instance");
                    if ("Array" !== e23) {
                        if ("String" !== e23 && "Number" !== e23) throw new Error("`enum` can only be set on an array of strings or numbers , not " + e23);
                        break;
                    }
                    t5 = t5.caster;
                }
                var r35 = arguments;
                return !Array.isArray(arguments) && g2.isObject(arguments) && (r35 = g2.object.vals(r35)), t5.caster.enum.apply(t5.caster, r35), this;
            }, $2.prototype.applyGetters = function(t5, e24) {
                if (null != e24 && null != e24.$__ && e24.populated(this.path)) return t5;
                var r35 = f3.prototype.applyGetters.call(this, t5, e24);
                if (Array.isArray(r35)) for(var n50 = r35.length, o46 = 0; o46 < n50; ++o46)r35[o46] = this.caster.applyGetters(r35[o46], e24);
                return r35;
            }, $2.prototype._applySetters = function(t5, e24, r35, n50) {
                if (this.casterConstructor instanceof $2 && $2.options.castNonArrays && !this[S4]) {
                    for(var o46 = 0, i28 = this; null != i28 && i28 instanceof $2 && !i28.$isMongooseDocumentArray;)++o46, i28 = i28.casterConstructor;
                    if (null != t5 && t5.length > 0) {
                        var s26 = y2(t5);
                        if (s26.min === s26.max && s26.max < o46 && s26.containsNonArrayItem) for(var a36 = s26.max; a36 < o46; ++a36)t5 = [
                            t5
                        ];
                    }
                }
                return f3.prototype._applySetters.call(this, t5, e24, r35, n50);
            }, $2.prototype.cast = function(t5, e24, n50, o47, s27) {
                var a37, u37;
                if (i27 || (i27 = r2(36).Array), Array.isArray(t5)) {
                    var l21 = t5.length;
                    if (!l21 && e24) {
                        var f18 = e24.schema.indexedPaths(), y12 = this.path;
                        for(a37 = 0, u37 = f18.length; a37 < u37; ++a37){
                            var d12 = f18[a37][0][y12];
                            if ("2dsphere" === d12 || "2d" === d12) return;
                        }
                        var _9 = this.path.endsWith(".coordinates") ? this.path.substr(0, this.path.lastIndexOf(".")) : null;
                        if (null != _9) for(a37 = 0, u37 = f18.length; a37 < u37; ++a37){
                            if ("2dsphere" === f18[a37][0][_9]) return;
                        }
                    }
                    if (t5 = i27(t5, (s27 = s27 || A2).path || this._arrayPath || this.path, e24, this), n50 && null != e24 && null != e24.$__ && e24.populated(this.path)) return t5;
                    var v5 = this.caster;
                    if (v5 && this.casterConstructor !== h5) try {
                        for(a37 = 0; a37 < l21; a37++){
                            if ("Number" === v5.instance && (void 0) === t5[a37]) throw new c23("Mongoose number arrays disallow storing undefined");
                            var g4 = {
                            };
                            v5.$isMongooseArray && (null != s27.arrayPath || null != v5._arrayParentPath) && (g4.arrayPathIndex = a37), t5[a37] = v5.applySetters(t5[a37], e24, n50, void 0, g4);
                        }
                    } catch (e25) {
                        throw new p2("[" + e25.kind + "]", m2.inspect(t5), this.path + "." + a37, e25, this);
                    }
                    return t5;
                }
                if (n50 || $2.options.castNonArrays) return e24 && n50 && e24.markModified(this.path), this.cast([
                    t5
                ], e24, n50);
                throw new p2("Array", m2.inspect(t5), this.path, null, this);
            }, /*!
 * ignore
 */ $2.prototype._castForPopulate = function(t5, e24) {
                if (i27 || (i27 = r2(36).Array), Array.isArray(t5)) {
                    var n50, o47 = t5.length, s27 = this.caster;
                    if (s27 && this.casterConstructor !== h5) try {
                        for(n50 = 0; n50 < o47; n50++){
                            var a37 = {
                            };
                            s27.$isMongooseArray && null != s27._arrayParentPath && (a37.arrayPathIndex = n50), t5[n50] = s27.cast(t5[n50], e24, false, void 0, a37);
                        }
                    } catch (e25) {
                        throw new p2("[" + e25.kind + "]", m2.inspect(t5), this.path + "." + n50, e25, this);
                    }
                    return t5;
                }
                throw new p2("Array", m2.inspect(t5), this.path, null, this);
            }, /*!
 * Ignore
 */ $2.prototype.discriminator = function(t5, e24) {
                for(var r35 = this; r35.$isMongooseArray && !r35.$isMongooseDocumentArray;)if (null == (r35 = r35.casterConstructor) || "function" == typeof r35) throw new c23("You can only add an embedded discriminator on a document array, " + this.path + " is a plain array");
                return r35.discriminator(t5, e24);
            }, /*!
 * ignore
 */ $2.prototype.clone = function() {
                var t5 = Object.assign({
                }, this.options), e24 = new this.constructor(this.path, this.caster, t5, this.schemaOptions);
                return e24.validators = this.validators.slice(), (void 0) !== this.requiredValidator && (e24.requiredValidator = this.requiredValidator), e24;
            }, $2.prototype.castForQuery = function(t5, e24) {
                var r35, n51, o48 = this;
                if (2 === arguments.length) {
                    if (!(r35 = this.$conditionalHandlers[t5])) throw new Error("Can't use " + t5 + " with Array.");
                    n51 = r35.call(this, e24);
                } else {
                    n51 = t5;
                    var i29 = this.casterConstructor;
                    if (n51 && i29.discriminators && i29.schema && i29.schema.options && i29.schema.options.discriminatorKey) {
                        if ("string" == typeof n51[i29.schema.options.discriminatorKey] && i29.discriminators[n51[i29.schema.options.discriminatorKey]]) i29 = i29.discriminators[n51[i29.schema.options.discriminatorKey]];
                        else {
                            var s28 = O4(i29.discriminators, n51[i29.schema.options.discriminatorKey]);
                            s28 && (i29 = s28);
                        }
                    }
                    var a38 = this.casterConstructor.prototype, u37 = a38 && (a38.castForQuery || a38.cast);
                    !u37 && i29.castForQuery && (u37 = i29.castForQuery);
                    var c29 = this.caster;
                    Array.isArray(n51) ? (this.setters.reverse().forEach(function(t6) {
                        n51 = t6.call(o48, n51, o48);
                    }), n51 = n51.map(function(t6) {
                        return g2.isObject(t6) && t6.$elemMatch ? t6 : u37 ? t6 = u37.call(c29, t6) : null != t6 ? t6 = new i29(t6) : t6;
                    })) : u37 ? n51 = u37.call(c29, n51) : null != n51 && (n51 = new i29(n51));
                }
                return n51;
            };
            var E3 = $2.prototype.$conditionalHandlers = {
            };
            function j2(t5) {
                return function(e24) {
                    if (!Array.isArray(e24)) throw new TypeError("conditional " + t5 + " requires an array");
                    var r35, o48 = [], i30 = n38(e24);
                    try {
                        for(i30.s(); !(r35 = i30.n()).done;){
                            var s29 = r35.value;
                            o48.push(d2(this.casterConstructor.schema, s29));
                        }
                    } catch (t6) {
                        i30.e(t6);
                    } finally{
                        i30.f();
                    }
                    return o48;
                };
            }
            E3.$all = function(t5) {
                return Array.isArray(t5) || (t5 = [
                    t5
                ]), t5 = t5.map(function(t6) {
                    if (g2.isObject(t6)) {
                        var e24 = {
                        };
                        return e24[this.path] = t6, d2(this.casterConstructor.schema, e24)[this.path];
                    }
                    return t6;
                }, this), this.castForQuery(t5);
            }, E3.$options = String, E3.$elemMatch = function(t5) {
                for(var e25 = Object.keys(t5), r35 = e25.length, n51 = 0; n51 < r35; ++n51){
                    var o48 = e25[n51], i30 = t5[o48];
                    v2(o48) && null != i30 && (t5[o48] = this.castForQuery(o48, i30));
                }
                var s30 = _2(this, "casterConstructor.schema.options.discriminatorKey"), a39 = _2(this, "casterConstructor.schema.discriminators", {
                });
                return null != s30 && null != t5[s30] && null != a39[t5[s30]] ? d2(a39[t5[s30]], t5) : d2(this.casterConstructor.schema, t5);
            }, E3.$geoIntersects = w4.cast$geoIntersects, E3.$or = j2("$or"), E3.$and = j2("$and"), E3.$nor = j2("$nor"), E3.$near = E3.$nearSphere = w4.cast$near, E3.$within = E3.$geoWithin = w4.cast$within, E3.$size = E3.$minDistance = E3.$maxDistance = b2, E3.$exists = a28, E3.$type = u31, E3.$eq = E3.$gt = E3.$gte = E3.$lt = E3.$lte = E3.$ne = E3.$regex = $2.prototype.castForQuery, E3.$nin = f3.prototype.$conditionalHandlers.$nin, E3.$in = f3.prototype.$conditionalHandlers.$in, /*!
 * Module exports.
 */ t2.exports = $2;
        },
        function(t2, e3, r2) {
            "use strict";
            var n38, o35 = r2(0).documentSchemaSymbol, i27 = r2(3), s25 = r2(17).internalToObjectOptions, a28 = r2(1), u31 = r2(0).getSymbol, c23 = r2(0).scopeSymbol;
            /*!
 * Compiles schemas.
 */ function l2(t5, e25, o49, i31) {
                n38 = n38 || r2(12);
                for(var s30, u38, c30 = Object.keys(t5), l22 = c30.length, p2 = 0; p2 < l22; ++p2)s30 = t5[u38 = c30[p2]], f3(u38, a28.isPOJO(s30) && Object.keys(s30).length && (!s30[i31.typeKey] || "type" === i31.typeKey && s30.type.type) ? s30 : null, e25, o49, c30, i31);
            }
            /*!
 * Defines the accessor named prop on the incoming prototype.
 */ function f3(t5, e25, f19, p2, h5, y2) {
                n38 = n38 || r2(12);
                var d2 = (p2 ? p2 + "." : "") + t5;
                p2 = p2 || "", e25 ? Object.defineProperty(f19, t5, {
                    enumerable: true,
                    configurable: true,
                    get: function() {
                        var t6, r35, s30 = this;
                        if (this.$__.getters || (this.$__.getters = {
                        }), !this.$__.getters[d2]) {
                            var u38 = Object.create(n38.prototype, (t6 = this, r35 = {
                            }, Object.getOwnPropertyNames(t6).forEach(function(e26) {
                                r35[e26] = Object.getOwnPropertyDescriptor(t6, e26), r35[e26].get ? delete r35[e26] : r35[e26].enumerable = -1 === [
                                    "isNew",
                                    "$__",
                                    "errors",
                                    "_doc",
                                    "$locals",
                                    "$op",
                                    "__parentArray",
                                    "__index",
                                    "$isDocumentArrayElement"
                                ].indexOf(e26);
                            }), r35));
                            p2 || (u38.$__[c23] = this), u38.$__.nestedPath = d2, Object.defineProperty(u38, "schema", {
                                enumerable: false,
                                configurable: true,
                                writable: false,
                                value: f19.schema
                            }), Object.defineProperty(u38, "$__schema", {
                                enumerable: false,
                                configurable: true,
                                writable: false,
                                value: f19.schema
                            }), Object.defineProperty(u38, o35, {
                                enumerable: false,
                                configurable: true,
                                writable: false,
                                value: f19.schema
                            }), Object.defineProperty(u38, "toObject", {
                                enumerable: false,
                                configurable: true,
                                writable: false,
                                value: function() {
                                    return a28.clone(s30.get(d2, null, {
                                        virtuals: i27(this, "schema.options.toObject.virtuals", null)
                                    }));
                                }
                            }), Object.defineProperty(u38, "$__get", {
                                enumerable: false,
                                configurable: true,
                                writable: false,
                                value: function() {
                                    return s30.get(d2, null, {
                                        virtuals: i27(this, "schema.options.toObject.virtuals", null)
                                    });
                                }
                            }), Object.defineProperty(u38, "toJSON", {
                                enumerable: false,
                                configurable: true,
                                writable: false,
                                value: function() {
                                    return s30.get(d2, null, {
                                        virtuals: i27(s30, "schema.options.toJSON.virtuals", null)
                                    });
                                }
                            }), Object.defineProperty(u38, "$__isNested", {
                                enumerable: false,
                                configurable: true,
                                writable: false,
                                value: true
                            });
                            var h8 = Object.freeze({
                                minimize: true,
                                virtuals: false,
                                getters: false,
                                transform: false
                            });
                            Object.defineProperty(u38, "$isEmpty", {
                                enumerable: false,
                                configurable: true,
                                writable: false,
                                value: function() {
                                    return 0 === Object.keys(this.get(d2, null, h8) || {
                                    }).length;
                                }
                            }), Object.defineProperty(u38, "$__parent", {
                                enumerable: false,
                                configurable: true,
                                writable: false,
                                value: this
                            }), l2(e25, u38, d2, y2), this.$__.getters[d2] = u38;
                        }
                        return this.$__.getters[d2];
                    },
                    set: function(t6) {
                        null != t6 && t6.$__isNested ? t6 = t6.$__get() : t6 instanceof n38 && !t6.$__isNested && (t6 = t6.toObject(s25)), (this.$__[c23] || this).$set(d2, t6);
                    }
                }) : Object.defineProperty(f19, t5, {
                    enumerable: true,
                    configurable: true,
                    get: function() {
                        return this[u31].call(this.$__[c23] || this, d2);
                    },
                    set: function(t6) {
                        this.$set.call(this.$__[c23] || this, d2, t6);
                    }
                });
            }
            /*!
 * exports
 */ e3.compile = l2, e3.defineKey = f3;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ function n38(t5) {
                return (n38 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t6) {
                    return typeof t6;
                } : function(t6) {
                    return t6 && "function" == typeof Symbol && t6.constructor === Symbol && t6 !== Symbol.prototype ? "symbol" : typeof t6;
                })(t5);
            }
            t2.exports = function(t5) {
                return null == t5 || "object" !== n38(t5) || !("$meta" in t5) && !("$slice" in t5);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e25) {
                if ((void 0) !== e25.Map) t2.exports = e25.Map, t2.exports.Map = e25.Map;
                else {
                    var r35 = function(t5) {
                        this._keys = [], this._values = {
                        };
                        for(var e26 = 0; e26 < t5.length; e26++)if (null != t5[e26]) {
                            var r36 = t5[e26], n38 = r36[0], o35 = r36[1];
                            this._keys.push(n38), this._values[n38] = {
                                v: o35,
                                i: this._keys.length - 1
                            };
                        }
                    };
                    r35.prototype.clear = function() {
                        this._keys = [], this._values = {
                        };
                    }, r35.prototype.delete = function(t5) {
                        var e26 = this._values[t5];
                        return null != e26 && (delete this._values[t5], this._keys.splice(e26.i, 1), true);
                    }, r35.prototype.entries = function() {
                        var t5 = this, e26 = 0;
                        return {
                            next: function() {
                                var r37 = t5._keys[e26++];
                                return {
                                    value: (void 0) !== r37 ? [
                                        r37,
                                        t5._values[r37].v
                                    ] : void 0,
                                    done: (void 0) === r37
                                };
                            }
                        };
                    }, r35.prototype.forEach = function(t5, e26) {
                        e26 = e26 || this;
                        for(var r37 = 0; r37 < this._keys.length; r37++){
                            var n51 = this._keys[r37];
                            t5.call(e26, this._values[n51].v, n51, e26);
                        }
                    }, r35.prototype.get = function(t5) {
                        return this._values[t5] ? this._values[t5].v : void 0;
                    }, r35.prototype.has = function(t5) {
                        return null != this._values[t5];
                    }, r35.prototype.keys = function() {
                        var t5 = this, e26 = 0;
                        return {
                            next: function() {
                                var r37 = t5._keys[e26++];
                                return {
                                    value: (void 0) !== r37 ? r37 : void 0,
                                    done: (void 0) === r37
                                };
                            }
                        };
                    }, r35.prototype.set = function(t5, e26) {
                        return this._values[t5] ? (this._values[t5].v = e26, this) : (this._keys.push(t5), this._values[t5] = {
                            v: e26,
                            i: this._keys.length - 1
                        }, this);
                    }, r35.prototype.values = function() {
                        var t5 = this, e26 = 0;
                        return {
                            next: function() {
                                var r37 = t5._keys[e26++];
                                return {
                                    value: (void 0) !== r37 ? t5._values[r37].v : void 0,
                                    done: (void 0) === r37
                                };
                            }
                        };
                    }, Object.defineProperty(r35.prototype, "size", {
                        enumerable: true,
                        get: function() {
                            return this._keys.length;
                        }
                    }), t2.exports = r35, t2.exports.Map = r35;
                }
            }).call(this, r2(11));
        },
        function(t2, e3) {
            var r2 = function t5(e25) {
                if (!(this instanceof t5)) return new t5(e25);
                this._bsontype = "Int32", this.value = e25;
            };
            r2.prototype.valueOf = function() {
                return this.value;
            }, r2.prototype.toJSON = function() {
                return this.value;
            }, t2.exports = r2, t2.exports.Int32 = r2;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n52 = r2(12), o49 = r2(180), i27 = false;
            t2.exports = function() {
                return i27 ? o49 : n52;
            }, /*!
 * ignore
 */ t2.exports.setBrowser = function(t5) {
                i27 = t5;
            };
        },
        function(t2, e3) {
            t2.exports = function(t5, e25, r2) {
                var n52 = [], o49 = t5.length;
                if (0 === o49) return n52;
                var i27 = e25 < 0 ? Math.max(0, e25 + o49) : e25 || 0;
                for((void 0) !== r2 && (o49 = r2 < 0 ? r2 + o49 : r2); (o49--) > i27;)n52[o49 - i27] = t5[o49];
                return n52;
            };
        },
        function(t2, e3, r2) {
            /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ var n52 = r2(2), o49 = n52.Buffer;
            function i27(t5, e25) {
                for(var r37 in t5)e25[r37] = t5[r37];
            }
            function s25(t5, e25, r37) {
                return o49(t5, e25, r37);
            }
            o49.from && o49.alloc && o49.allocUnsafe && o49.allocUnsafeSlow ? t2.exports = n52 : (i27(n52, e3), e3.Buffer = s25), s25.prototype = Object.create(o49.prototype), i27(o49, s25), s25.from = function(t5, e25, r37) {
                if ("number" == typeof t5) throw new TypeError("Argument must not be a number");
                return o49(t5, e25, r37);
            }, s25.alloc = function(t5, e25, r37) {
                if ("number" != typeof t5) throw new TypeError("Argument must be a number");
                var n53 = o49(t5);
                return (void 0) !== e25 ? "string" == typeof r37 ? n53.fill(e25, r37) : n53.fill(e25) : n53.fill(0), n53;
            }, s25.allocUnsafe = function(t5) {
                if ("number" != typeof t5) throw new TypeError("Argument must be a number");
                return o49(t5);
            }, s25.allocUnsafeSlow = function(t5) {
                if ("number" != typeof t5) throw new TypeError("Argument must be a number");
                return n52.SlowBuffer(t5);
            };
        },
        function(t2, e3) {
            function r2(t5) {
                return (r2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t6) {
                    return typeof t6;
                } : function(t6) {
                    return t6 && "function" == typeof Symbol && t6.constructor === Symbol && t6 !== Symbol.prototype ? "symbol" : typeof t6;
                })(t5);
            }
            var n52 = Object.prototype.toString;
            t2.exports = function(t5) {
                if ("object" != r2(e25 = t5) || "[object RegExp]" != n52.call(e25)) throw new TypeError("Not a RegExp");
                var e25, o49 = [];
                t5.global && o49.push("g"), t5.multiline && o49.push("m"), t5.ignoreCase && o49.push("i"), t5.dotAll && o49.push("s"), t5.unicode && o49.push("u"), t5.sticky && o49.push("y");
                var i27 = new RegExp(t5.source, o49.join(""));
                return "number" == typeof t5.lastIndex && (i27.lastIndex = t5.lastIndex), i27;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = function(t5) {
                return t5.name ? t5.name : (t5.toString().trim().match(/^function\s*([^\s(]+)/) || [])[1];
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n52 = r2(3);
            /*!
 * Get the bson type, if it exists
 */ t2.exports = function(t5, e25) {
                return n52(t5, "_bsontype", void 0) === e25;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e25) {
                /*!
 * ignore
 */ var n52 = r2(22), o49 = r2(118), i27 = {
                    _promise: null,
                    get: function() {
                        return i27._promise;
                    },
                    set: function(t5) {
                        n52.ok("function" == typeof t5, "mongoose.Promise must be a function, got ".concat(t5)), i27._promise = t5, o49.Promise = t5;
                    }
                };
                /*!
 * Use native promises by default
 */ i27.set(e25.Promise), t2.exports = i27;
            }).call(this, r2(11));
        },
        function(t2, e3, r2) {
            "use strict";
            (function(t5, n52) {
                /*!
 * Module dependencies.
 */ function o49(t6) {
                    return (o49 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                        return typeof t7;
                    } : function(t7) {
                        return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                    })(t6);
                }
                var i27 = r2(120).Buffer, s25 = r2(64), a28 = [
                    "__proto__",
                    "constructor",
                    "prototype"
                ], u31 = e3.clone = function t6(r37, n53) {
                    if (null == r37) return r37;
                    if (Array.isArray(r37)) return e3.cloneArray(r37, n53);
                    if (r37.constructor) {
                        if (/ObjectI[dD]$/.test(r37.constructor.name)) return "function" == typeof r37.clone ? r37.clone() : new r37.constructor(r37.id);
                        if ("ReadPreference" === r37.constructor.name) return new r37.constructor(r37.mode, t6(r37.tags, n53));
                        if ("Binary" == r37._bsontype && r37.buffer && r37.value) return "function" == typeof r37.clone ? r37.clone() : new r37.constructor(r37.value(true), r37.sub_type);
                        if ("Date" === r37.constructor.name || "Function" === r37.constructor.name) return new r37.constructor(+r37);
                        if ("RegExp" === r37.constructor.name) return s25(r37);
                        if ("Buffer" === r37.constructor.name) return e3.cloneBuffer(r37);
                    }
                    return l22(r37) ? e3.cloneObject(r37, n53) : r37.valueOf ? r37.valueOf() : void 0;
                };
                /*!
 * ignore
 */ e3.cloneObject = function(t7, e25) {
                    for(var r37, n53, o50 = e25 && e25.minimize, i31 = {
                    }, s30 = 0, c23 = Object.keys(t7); s30 < c23.length; s30++){
                        var l2 = c23[s30];
                        -1 === a28.indexOf(l2) && (n53 = u31(t7[l2], e25), o50 && (void 0) === n53 || (r37 || (r37 = true), i31[l2] = n53));
                    }
                    return o50 ? r37 && i31 : i31;
                }, e3.cloneArray = function(t7, e25) {
                    for(var r37 = [], n53 = 0, o50 = t7.length; n53 < o50; n53++)r37.push(u31(t7[n53], e25));
                    return r37;
                }, e3.tick = function(t7) {
                    if ("function" == typeof t7) return function() {
                        var e25 = arguments;
                        f3(function() {
                            t7.apply(this, e25);
                        });
                    };
                }, e3.merge = function t7(r37, n53) {
                    for(var o50, i31 = Object.keys(n53), s30 = i31.length; s30--;)o50 = i31[s30], -1 === a28.indexOf(o50) && ((void 0) === r37[o50] ? r37[o50] = n53[o50] : e3.isObject(n53[o50]) ? t7(r37[o50], n53[o50]) : r37[o50] = n53[o50]);
                }, e3.mergeClone = function t8(r37, n53) {
                    for(var o50, i31 = Object.keys(n53), s30 = i31.length; s30--;)o50 = i31[s30], -1 === a28.indexOf(o50) && ((void 0) === r37[o50] ? r37[o50] = u31(n53[o50]) : e3.isObject(n53[o50]) ? t8(r37[o50], n53[o50]) : r37[o50] = u31(n53[o50]));
                }, e3.readPref = function(t9) {
                    switch(t9){
                        case "p":
                            t9 = "primary";
                            break;
                        case "pp":
                            t9 = "primaryPreferred";
                            break;
                        case "s":
                            t9 = "secondary";
                            break;
                        case "sp":
                            t9 = "secondaryPreferred";
                            break;
                        case "n":
                            t9 = "nearest";
                    }
                    return t9;
                }, e3.readConcern = function(t9) {
                    if ("string" == typeof t9) {
                        switch(t9){
                            case "l":
                                t9 = "local";
                                break;
                            case "a":
                                t9 = "available";
                                break;
                            case "m":
                                t9 = "majority";
                                break;
                            case "lz":
                                t9 = "linearizable";
                                break;
                            case "s":
                                t9 = "snapshot";
                        }
                        t9 = {
                            level: t9
                        };
                    }
                    return t9;
                };
                var c23 = Object.prototype.toString;
                e3.toString = function(t9) {
                    return c23.call(t9);
                };
                var l22 = e3.isObject = function(t9) {
                    return "[object Object]" == e3.toString(t9);
                };
                e3.isArray = function(t9) {
                    return Array.isArray(t9) || "object" == o49(t9) && "[object Array]" == e3.toString(t9);
                }, e3.keys = Object.keys, e3.create = "function" == typeof Object.create ? Object.create : function(t9) {
                    if (arguments.length > 1) throw new Error("Adding properties is not supported");
                    function e25() {
                    }
                    return e25.prototype = t9, new e25;
                }, e3.inherits = function(t9, r37) {
                    t9.prototype = e3.create(r37.prototype), t9.prototype.constructor = t9;
                };
                var f3 = e3.soon = "function" == typeof t5 ? t5 : n52.nextTick;
                e3.cloneBuffer = function(t9) {
                    var e25 = i27.alloc(t9.length);
                    return t9.copy(e25, 0, 0, t9.length), e25;
                }, e3.isArgumentsObject = function(t9) {
                    return "[object Arguments]" === Object.prototype.toString.call(t9);
                };
            }).call(this, r2(69).setImmediate, r2(7));
        },
        function(t2, e3, r2) {
            (function(t5) {
                var n52 = (void 0) !== t5 && t5 || "undefined" != typeof self && self || window, o49 = Function.prototype.apply;
                function i27(t6, e25) {
                    this._id = t6, this._clearFn = e25;
                }
                e3.setTimeout = function() {
                    return new i27(o49.call(setTimeout, n52, arguments), clearTimeout);
                }, e3.setInterval = function() {
                    return new i27(o49.call(setInterval, n52, arguments), clearInterval);
                }, e3.clearTimeout = e3.clearInterval = function(t6) {
                    t6 && t6.close();
                }, i27.prototype.unref = i27.prototype.ref = function() {
                }, i27.prototype.close = function() {
                    this._clearFn.call(n52, this._id);
                }, e3.enroll = function(t6, e25) {
                    clearTimeout(t6._idleTimeoutId), t6._idleTimeout = e25;
                }, e3.unenroll = function(t6) {
                    clearTimeout(t6._idleTimeoutId), t6._idleTimeout = -1;
                }, e3._unrefActive = e3.active = function(t6) {
                    clearTimeout(t6._idleTimeoutId);
                    var e25 = t6._idleTimeout;
                    e25 >= 0 && (t6._idleTimeoutId = setTimeout(function() {
                        t6._onTimeout && t6._onTimeout();
                    }, e25));
                }, r2(119), e3.setImmediate = "undefined" != typeof self && self.setImmediate || (void 0) !== t5 && t5.setImmediate || this && this.setImmediate, e3.clearImmediate = "undefined" != typeof self && self.clearImmediate || (void 0) !== t5 && t5.clearImmediate || this && this.clearImmediate;
            }).call(this, r2(11));
        },
        function(t2, e3, r2) {
            "use strict";
            (function(t5, r37, n52, o49) {
                function i27(t6) {
                    return (i27 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                        return typeof t7;
                    } : function(t7) {
                        return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                    })(t6);
                }
                e3.isNode = (void 0) !== t5 && "object" == i27(r37) && "object" == ((void 0) === n52 ? "undefined" : i27(n52)) && "function" == typeof o49 && t5.argv, e3.isMongo = !e3.isNode && "function" == typeof printjson && "function" == typeof ObjectId && "function" == typeof rs && "function" == typeof sh, e3.isBrowser = !e3.isNode && !e3.isMongo && "undefined" != typeof window, e3.type = e3.isNode ? "node" : e3.isMongo ? "mongo" : e3.isBrowser ? "browser" : "unknown";
            }).call(this, r2(7), r2(125)(t2), r2(11), r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = function(t5, e25, r37) {
                for(var n52 = {
                }, o49 = 0, i27 = Object.keys(e25.tree); o49 < i27.length; o49++){
                    var s25 = i27[o49];
                    r37 && (t5.paths[s25] || t5.nested[s25] || t5.singleNestedPaths[s25]) || (n52[s25] = e25.tree[s25]);
                }
                for(var a28 in t5.add(n52), t5.callQueue = t5.callQueue.concat(e25.callQueue), t5.method(e25.methods), t5.static(e25.statics), e25.query)t5.query[a28] = e25.query[a28];
                for(var u31 in e25.virtuals)t5.virtuals[u31] = e25.virtuals[u31].clone();
                t5.s.hooks.merge(e25.s.hooks, false);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n52(t5) {
                return (n52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t6) {
                    return typeof t6;
                } : function(t6) {
                    return t6 && "function" == typeof Symbol && t6.constructor === Symbol && t6 !== Symbol.prototype ? "symbol" : typeof t6;
                })(t5);
            }
            function o49(t5, e25) {
                for(var r37 = 0; r37 < e25.length; r37++){
                    var n53 = e25[r37];
                    n53.enumerable = n53.enumerable || false, n53.configurable = true, "value" in n53 && (n53.writable = true), Object.defineProperty(t5, n53.key, n53);
                }
            }
            function i27(t5, e25) {
                return (i27 = Object.setPrototypeOf || function(t6, e26) {
                    return t6.__proto__ = e26, t6;
                })(t5, e25);
            }
            function s30(t5) {
                var e25 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t6) {
                        return false;
                    }
                }();
                return function() {
                    var r37, n54 = u31(t5);
                    if (e25) {
                        var o50 = u31(this).constructor;
                        r37 = Reflect.construct(n54, arguments, o50);
                    } else r37 = n54.apply(this, arguments);
                    return a28(this, r37);
                };
            }
            function a28(t5, e25) {
                return !e25 || "object" !== n52(e25) && "function" != typeof e25 ? (function(t6) {
                    if ((void 0) === t6) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                })(t5) : e25;
            }
            function u31(t5) {
                return (u31 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t6) {
                    return t6.__proto__ || Object.getPrototypeOf(t6);
                })(t5);
            }
            var c23 = r2(5), l22 = function(t5) {
                (function(t6, e25) {
                    if ("function" != typeof e25 && null !== e25) throw new TypeError("Super expression must either be null or a function");
                    t6.prototype = Object.create(e25 && e25.prototype, {
                        constructor: {
                            value: t6,
                            writable: true,
                            configurable: true
                        }
                    }), e25 && i27(t6, e25);
                })(u39, t5);
                var e25, r37, n54, a39 = s30(u39);
                function u39(t6) {
                    var e26;
                    (function(t7, e27) {
                        if (!(t7 instanceof e27)) throw new TypeError("Cannot call a class as a function");
                    })(this, u39);
                    var r38 = t6.message;
                    r38 || (r38 = c23.messages.general.default);
                    var n55 = f3(r38, t6);
                    return e26 = a39.call(this, n55), t6 = Object.assign({
                    }, t6, {
                        message: n55
                    }), e26.properties = t6, e26.kind = t6.type, e26.path = t6.path, e26.value = t6.value, e26.reason = t6.reason, e26;
                }
                /*!
   * toString helper
   * TODO remove? This defaults to `${this.name}: ${this.message}`
   */ return e25 = u39, r37 = [
                    {
                        key: "toString",
                        value: function() {
                            return this.message;
                        }
                    },
                    {
                        key: "toJSON",
                        value: function() {
                            return Object.assign({
                                name: this.name,
                                message: this.message
                            }, this);
                        }
                    }
                ], o49(e25.prototype, r37), n54 && o49(e25, n54), u39;
            }(c23);
            /*!
 * Formats error messages
 */ function f3(t5, e25) {
                if ("function" == typeof t5) return t5(e25);
                for(var r37 = 0, n54 = Object.keys(e25); r37 < n54.length; r37++){
                    var o51 = n54[r37];
                    "message" !== o51 && (t5 = t5.replace("{" + o51.toUpperCase() + "}", e25[o51]));
                }
                return t5;
            }
            /*!
 * exports
 */ Object.defineProperty(l22.prototype, "name", {
                value: "ValidatorError"
            }), /*!
 * The object used to define this validator. Not enumerable to hide
 * it from `require('util').inspect()` output re: gh-3925
 */ Object.defineProperty(l22.prototype, "properties", {
                enumerable: false,
                writable: true,
                value: null
            }), l22.prototype.formatMessage = f3, t2.exports = l22;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ t2.exports = function(t5) {
                if (Array.isArray(t5)) {
                    if (!t5.every(function(t6) {
                        return "number" == typeof t6 || "string" == typeof t6;
                    })) throw new Error("$type array values must be strings or numbers");
                    return t5;
                }
                if ("number" != typeof t5 && "string" != typeof t5) throw new Error("$type parameter must be number, string, or array of numbers and strings");
                return t5;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n52(t5) {
                return (n52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t6) {
                    return typeof t6;
                } : function(t6) {
                    return t6 && "function" == typeof Symbol && t6.constructor === Symbol && t6 !== Symbol.prototype ? "symbol" : typeof t6;
                })(t5);
            }
            function o49(t5, e25) {
                return (o49 = Object.setPrototypeOf || function(t6, e26) {
                    return t6.__proto__ = e26, t6;
                })(t5, e25);
            }
            function i27(t5) {
                var e25 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t6) {
                        return false;
                    }
                }();
                return function() {
                    var r37, n54 = a28(t5);
                    if (e25) {
                        var o52 = a28(this).constructor;
                        r37 = Reflect.construct(n54, arguments, o52);
                    } else r37 = n54.apply(this, arguments);
                    return s30(this, r37);
                };
            }
            function s30(t5, e25) {
                return !e25 || "object" !== n52(e25) && "function" != typeof e25 ? (function(t6) {
                    if ((void 0) === t6) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                })(t5) : e25;
            }
            function a28(t5) {
                return (a28 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t6) {
                    return t6.__proto__ || Object.getPrototypeOf(t6);
                })(t5);
            }
            var u31 = function(t5) {
                (function(t6, e25) {
                    if ("function" != typeof e25 && null !== e25) throw new TypeError("Super expression must either be null or a function");
                    t6.prototype = Object.create(e25 && e25.prototype, {
                        constructor: {
                            value: t6,
                            writable: true,
                            configurable: true
                        }
                    }), e25 && o49(t6, e25);
                })(r37, t5);
                var e25 = i27(r37);
                function r37(t6, n54) {
                    var o53;
                    (function(t7, e26) {
                        if (!(t7 instanceof e26)) throw new TypeError("Cannot call a class as a function");
                    })(this, r37);
                    var i31 = Array.isArray(n54) ? "array" : "primitive value";
                    return (o53 = e25.call(this, "Tried to set nested object field `" + t6 + "` to ".concat(i31, " `") + n54 + "` and strict mode is set to throw.")).path = t6, o53;
                }
                return r37;
            }(r2(5));
            Object.defineProperty(u31.prototype, "name", {
                value: "ObjectExpectedError"
            }), t2.exports = u31;
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = function(t5) {
                var e25 = {
                    _id: {
                        auto: true
                    }
                };
                e25._id[t5.options.typeKey] = "ObjectId", t5.add(e25);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = /*!
 * ignore
 */ function(t5, e25) {
                if (null == t5) return null;
                if ("boolean" == typeof t5) return e25;
                if ("boolean" == typeof t5[e25]) return t5[e25] ? e25 : null;
                if (!(e25 in t5)) return e25;
                return t5[e25];
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n52 = r2(33), o49 = r2(24);
            /*!
 * Register hooks for this model
 *
 * @param {Model} model
 * @param {Schema} schema
 */ function i27(t5, e25, r37) {
                var s30 = {
                    useErrorHandlers: true,
                    numCallbackParams: 1,
                    nullResultByDefault: true,
                    contextParameter: true
                }, a28 = (r37 = r37 || {
                }).decorateDoc ? t5 : t5.prototype;
                t5.$appliedHooks = true;
                for(var u31 = 0, c23 = Object.keys(e25.paths); u31 < c23.length; u31++){
                    var l22 = c23[u31], f3 = e25.paths[l22], p2 = null;
                    if (f3.$isSingleNested) p2 = f3.caster;
                    else {
                        if (!f3.$isMongooseDocumentArray) continue;
                        p2 = f3.Constructor;
                    }
                    if (!p2.$appliedHooks && (i27(p2, f3.schema, r37), null != p2.discriminators)) for(var h5 = 0, y2 = Object.keys(p2.discriminators); h5 < y2.length; h5++){
                        var d2 = y2[h5];
                        i27(p2.discriminators[d2], p2.discriminators[d2].schema, r37);
                    }
                }
                var _2 = e25.s.hooks.filter(function(t6) {
                    return "updateOne" === t6.name || "deleteOne" === t6.name ? !!t6.document : "remove" === t6.name || "init" === t6.name ? null == t6.document || !!t6.document : null == t6.query && null == t6.document || false !== t6.document;
                }).filter(function(t6) {
                    return !e25.methods[t6.name] || !t6.fn[n52.builtInMiddleware];
                });
                t5._middleware = _2, a28.$__originalValidate = a28.$__originalValidate || a28.$__validate;
                for(var v2 = 0, m2 = [
                    "save",
                    "validate",
                    "remove",
                    "deleteOne"
                ]; v2 < m2.length; v2++){
                    var g2 = m2[v2], b2 = "validate" === g2 ? "$__originalValidate" : "$__".concat(g2), w4 = _2.createWrapper(g2, a28[b2], null, s30);
                    a28["$__".concat(g2)] = w4;
                }
                a28.$__init = _2.createWrapperSync("init", a28.$__init, null, s30);
                for(var O4 = Object.keys(e25.methods), S4 = Object.assign({
                }, s30, {
                    checkForPromise: true
                }), A2 = function() {
                    var e26 = E3[$2];
                    if (!_2.hasHooks(e26)) return "continue";
                    var r38 = a28[e26];
                    a28[e26] = function() {
                        var r39 = this, n54 = Array.prototype.slice.call(arguments), i31 = n54.slice(-1).pop(), s31 = "function" == typeof i31 ? n54.slice(0, n54.length - 1) : n54;
                        return o49(i31, function(t6) {
                            return r39["$__".concat(e26)].apply(r39, s31.concat([
                                t6
                            ]));
                        }, t5.events);
                    }, a28["$__".concat(e26)] = _2.createWrapper(e26, r38, null, S4);
                }, $2 = 0, E3 = O4; $2 < E3.length; $2++)A2();
            }
            /*!
 * ignore
 */ t2.exports = i27, /*!
 * ignore
 */ i27.middlewareFunctions = [
                "deleteOne",
                "save",
                "validate",
                "remove",
                "updateOne",
                "init"
            ];
        },
        function(t2, e3, r2) {
            "use strict";
            var n52 = r2(13);
            /*!
 * Given a value, cast it to a string, or throw a `CastError` if the value
 * cannot be casted. `null` and `undefined` are considered valid.
 *
 * @param {Any} value
 * @param {String} [path] optional the path to set on the CastError
 * @return {string|null|undefined}
 * @throws {CastError}
 * @api private
 */ t2.exports = function(t5, e25) {
                if (null == t5) return t5;
                if (t5._id && "string" == typeof t5._id) return t5._id;
                if (t5.toString && t5.toString !== Object.prototype.toString && !Array.isArray(t5)) return t5.toString();
                throw new n52("string", t5, e25);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module requirements.
 */ var n52 = r2(5), o49 = r2(150), i27 = r2(6), s30 = r2(151), a28 = r2(80), u31 = r2(1), c23 = i27.CastError;
            function l23(t5, e25) {
                i27.call(this, t5, e25, "Number");
            }
            /*!
 * ignore
 */ function f19(t5) {
                return this.cast(t5);
            }
            l23.get = i27.get, l23.set = i27.set, /*!
 * ignore
 */ l23._cast = s30, l23.cast = function(t5) {
                return 0 === arguments.length || (false === t5 && (t5 = this._defaultCaster), this._cast = t5), this._cast;
            }, /*!
 * ignore
 */ l23._defaultCaster = function(t5) {
                if ("number" != typeof t5) throw new Error;
                return t5;
            }, l23.schemaName = "Number", l23.defaultOptions = {
            }, /*!
 * Inherits from SchemaType.
 */ l23.prototype = Object.create(i27.prototype), l23.prototype.constructor = l23, l23.prototype.OptionsConstructor = o49, /*!
 * ignore
 */ l23._checkRequired = function(t5) {
                return "number" == typeof t5 || t5 instanceof Number;
            }, l23.checkRequired = i27.checkRequired, l23.prototype.checkRequired = function(t5, e25) {
                return i27._isRef(this, t5, e25, true) ? !!t5 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : l23.checkRequired())(t5);
            }, l23.prototype.min = function(t5, e25) {
                if (this.minValidator && (this.validators = this.validators.filter(function(t6) {
                    return t6.validator !== this.minValidator;
                }, this)), null != t5) {
                    var r37 = e25 || n52.messages.Number.min;
                    r37 = r37.replace(/{MIN}/, t5), this.validators.push({
                        validator: this.minValidator = function(e26) {
                            return null == e26 || e26 >= t5;
                        },
                        message: r37,
                        type: "min",
                        min: t5
                    });
                }
                return this;
            }, l23.prototype.max = function(t5, e25) {
                if (this.maxValidator && (this.validators = this.validators.filter(function(t6) {
                    return t6.validator !== this.maxValidator;
                }, this)), null != t5) {
                    var r38 = e25 || n52.messages.Number.max;
                    r38 = r38.replace(/{MAX}/, t5), this.validators.push({
                        validator: this.maxValidator = function(e26) {
                            return null == e26 || e26 <= t5;
                        },
                        message: r38,
                        type: "max",
                        max: t5
                    });
                }
                return this;
            }, l23.prototype.enum = function(t5, e25) {
                return this.enumValidator && (this.validators = this.validators.filter(function(t6) {
                    return t6.validator !== this.enumValidator;
                }, this)), Array.isArray(t5) || (t5 = u31.isObject(t5) ? u31.object.vals(t5) : Array.prototype.slice.call(arguments), e25 = n52.messages.Number.enum), e25 = null == e25 ? n52.messages.Number.enum : e25, this.enumValidator = function(e26) {
                    return null == e26 || -1 !== t5.indexOf(e26);
                }, this.validators.push({
                    validator: this.enumValidator,
                    message: e25,
                    type: "enum",
                    enumValues: t5
                }), this;
            }, l23.prototype.cast = function(t5, e25, r39) {
                if (i27._isRef(this, t5, e25, r39)) return "number" == typeof t5 ? t5 : this._castRef(t5, e25, r39);
                var n54, o53 = t5 && (void 0) !== t5._id ? t5._id : t5;
                n54 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : l23.cast();
                try {
                    return n54(o53);
                } catch (t6) {
                    throw new c23("Number", o53, this.path, t6, this);
                }
            }, l23.prototype.$conditionalHandlers = u31.options(i27.prototype.$conditionalHandlers, {
                $bitsAllClear: a28,
                $bitsAnyClear: a28,
                $bitsAllSet: a28,
                $bitsAnySet: a28,
                $gt: f19,
                $gte: f19,
                $lt: f19,
                $lte: f19,
                $mod: function(t5) {
                    var e25 = this;
                    return Array.isArray(t5) ? t5.map(function(t6) {
                        return e25.cast(t6);
                    }) : [
                        this.cast(t5)
                    ];
                }
            }), l23.prototype.castForQuery = function(t5, e25) {
                var r39;
                if (2 === arguments.length) {
                    if (!(r39 = this.$conditionalHandlers[t5])) throw new c23("number", e25, this.path, null, this);
                    return r39.call(this, e25);
                }
                return e25 = this._castForQuery(t5);
            }, /*!
 * Module exports.
 */ t2.exports = l23;
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e25) {
                /*!
 * Module requirements.
 */ var n52 = r2(13);
                /*!
 * ignore
 */ /*!
 * ignore
 */ function o49(t5, e26) {
                    var r39 = Number(e26);
                    if (isNaN(r39)) throw new n52("number", e26, t5);
                    return r39;
                }
                t2.exports = function(t5) {
                    var r39 = this;
                    return Array.isArray(t5) ? t5.map(function(t6) {
                        return o49(r39.path, t6);
                    }) : e25.isBuffer(t5) ? t5 : o49(r39.path, t5);
                };
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            var n52 = r2(8);
            t2.exports = function(t5, e25) {
                return "string" == typeof t5 && "string" == typeof e25 || "number" == typeof t5 && "number" == typeof e25 ? t5 === e25 : t5 instanceof n52 && e25 instanceof n52 && t5.toString() === e25.toString();
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n52 = new Set([
                "$ref",
                "$id",
                "$db"
            ]);
            t2.exports = function(t5) {
                return t5.startsWith("$") && !n52.has(t5);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module requirements.
 */ var n52 = r2(34).castArraysOfNumbers, o49 = r2(34).castToNumber;
            function i27(t5, e25) {
                switch(t5.$geometry.type){
                    case "Polygon":
                    case "LineString":
                    case "Point":
                        n52(t5.$geometry.coordinates, e25);
                }
                return s30(e25, t5), t5;
            }
            function s30(t5, e25) {
                e25.$maxDistance && (e25.$maxDistance = o49.call(t5, e25.$maxDistance)), e25.$minDistance && (e25.$minDistance = o49.call(t5, e25.$minDistance));
            }
            /*!
 * ignore
 */ e3.cast$geoIntersects = function(t5) {
                if (!t5.$geometry) return;
                return i27(t5, this), t5;
            }, e3.cast$near = function(t5) {
                var e25 = r2(56);
                if (Array.isArray(t5)) return n52(t5, this), t5;
                if (s30(this, t5), t5 && t5.$geometry) return i27(t5, this);
                if (!Array.isArray(t5)) throw new TypeError("$near must be either an array or an object with a $geometry property");
                return e25.prototype.castForQuery.call(this, t5);
            }, e3.cast$within = function(t5) {
                var e25 = this;
                if (s30(this, t5), t5.$box || t5.$polygon) {
                    var r39 = t5.$box ? "$box" : "$polygon";
                    t5[r39].forEach(function(t6) {
                        if (!Array.isArray(t6)) throw new TypeError("Invalid $within $box argument. Expected an array, received " + t6);
                        t6.forEach(function(r40, n54) {
                            t6[n54] = o49.call(e25, r40);
                        });
                    });
                } else if (t5.$center || t5.$centerSphere) {
                    var n54 = t5.$center ? "$center" : "$centerSphere";
                    t5[n54].forEach(function(r40, i31) {
                        Array.isArray(r40) ? r40.forEach(function(t6, n55) {
                            r40[n55] = o49.call(e25, t6);
                        }) : t5[n54][i31] = o49.call(e25, r40);
                    });
                } else t5.$geometry && i27(t5, this);
                return t5;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n52 = r2(85), o49 = r2(12), i27 = r2(0).arrayAtomicsSymbol, s30 = r2(0).arrayParentSymbol, a28 = r2(0).arrayPathSymbol, u31 = r2(0).arraySchemaSymbol, c23 = Array.prototype.push;
            /*!
 * Module exports.
 */ t2.exports = function(t5, e25, r40, l23) {
                var f19;
                if (Array.isArray(t5)) {
                    var p13 = t5.length;
                    if (0 === p13) f19 = new n52;
                    else if (1 === p13) (f19 = new n52(1))[0] = t5[0];
                    else if (p13 < 10000) f19 = new n52, c23.apply(f19, t5);
                    else {
                        f19 = new n52;
                        for(var h9 = 0; h9 < p13; ++h9)c23.call(f19, t5[h9]);
                    }
                    null != t5[i27] ? f19[i27] = t5[i27] : f19[i27] = {
                    };
                } else (f19 = new n52)[i27] = {
                };
                return f19[a28] = e25, f19[u31] = void 0, r40 && r40 instanceof o49 && (f19[s30] = r40, f19[u31] = l23 || r40.schema.path(e25)), f19;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e25) {
                function n52(t5) {
                    return (n52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t6) {
                        return typeof t6;
                    } : function(t6) {
                        return t6 && "function" == typeof Symbol && t6.constructor === Symbol && t6 !== Symbol.prototype ? "symbol" : typeof t6;
                    })(t5);
                }
                function o49(t5, e26) {
                    var r40 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                    if (!r40) {
                        if (Array.isArray(t5) || (r40 = (function(t6, e27) {
                            if (!t6) return;
                            if ("string" == typeof t6) return i27(t6, e27);
                            var r41 = Object.prototype.toString.call(t6).slice(8, -1);
                            "Object" === r41 && t6.constructor && (r41 = t6.constructor.name);
                            if ("Map" === r41 || "Set" === r41) return Array.from(t6);
                            if ("Arguments" === r41 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r41)) return i27(t6, e27);
                        })(t5)) || e26 && t5 && "number" == typeof t5.length) {
                            r40 && (t5 = r40);
                            var n55 = 0, o53 = function() {
                            };
                            return {
                                s: o53,
                                n: function() {
                                    return n55 >= t5.length ? {
                                        done: true
                                    } : {
                                        done: false,
                                        value: t5[n55++]
                                    };
                                },
                                e: function(t6) {
                                    throw t6;
                                },
                                f: o53
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var s30, a28 = true, u31 = false;
                    return {
                        s: function() {
                            r40 = r40.call(t5);
                        },
                        n: function() {
                            var t6 = r40.next();
                            return a28 = t6.done, t6;
                        },
                        e: function(t6) {
                            u31 = true, s30 = t6;
                        },
                        f: function() {
                            try {
                                a28 || null == r40.return || r40.return();
                            } finally{
                                if (u31) throw s30;
                            }
                        }
                    };
                }
                function i27(t5, e26) {
                    (null == e26 || e26 > t5.length) && (e26 = t5.length);
                    for(var r40 = 0, n56 = new Array(e26); r40 < e26; r40++)n56[r40] = t5[r40];
                    return n56;
                }
                function s30(t5, e26) {
                    if (!(t5 instanceof e26)) throw new TypeError("Cannot call a class as a function");
                }
                function a28(t5, e26) {
                    for(var r40 = 0; r40 < e26.length; r40++){
                        var n56 = e26[r40];
                        n56.enumerable = n56.enumerable || false, n56.configurable = true, "value" in n56 && (n56.writable = true), Object.defineProperty(t5, n56.key, n56);
                    }
                }
                function u31(t5, e26, r40) {
                    return (u31 = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t6, e27, r41) {
                        var n57 = function(t7, e28) {
                            for(; !Object.prototype.hasOwnProperty.call(t7, e28) && null !== (t7 = y13(t7)););
                            return t7;
                        }(t6, e27);
                        if (n57) {
                            var o54 = Object.getOwnPropertyDescriptor(n57, e27);
                            return o54.get ? o54.get.call(r41) : o54.value;
                        }
                    })(t5, e26, r40 || t5);
                }
                function c23(t5, e26) {
                    return !e26 || "object" !== n52(e26) && "function" != typeof e26 ? (function(t6) {
                        if ((void 0) === t6) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t6;
                    })(t5) : e26;
                }
                function l23(t5) {
                    var e26 = "function" == typeof Map ? new Map : void 0;
                    return (l23 = function(t6) {
                        if (null === t6 || (r40 = t6, -1 === Function.toString.call(r40).indexOf("[native code]"))) return t6;
                        var r40;
                        if ("function" != typeof t6) throw new TypeError("Super expression must either be null or a function");
                        if ((void 0) !== e26) {
                            if (e26.has(t6)) return e26.get(t6);
                            e26.set(t6, n57);
                        }
                        function n57() {
                            return f19(t6, arguments, y13(this).constructor);
                        }
                        return n57.prototype = Object.create(t6.prototype, {
                            constructor: {
                                value: n57,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        }), h10(n57, t6);
                    })(t5);
                }
                function f19(t5, e26, r40) {
                    return (f19 = p14() ? Reflect.construct : function(t6, e27, r41) {
                        var n57 = [
                            null
                        ];
                        n57.push.apply(n57, e27);
                        var o55 = new (Function.bind.apply(t6, n57));
                        return r41 && h10(o55, r41.prototype), o55;
                    }).apply(null, arguments);
                }
                function p14() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t5) {
                        return false;
                    }
                }
                function h10(t5, e26) {
                    return (h10 = Object.setPrototypeOf || function(t6, e27) {
                        return t6.__proto__ = e27, t6;
                    })(t5, e26);
                }
                function y13(t5) {
                    return (y13 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t6) {
                        return t6.__proto__ || Object.getPrototypeOf(t6);
                    })(t5);
                }
                var d13 = r2(12), _2 = r2(26), v2 = r2(14), m2 = r2(8), g5 = r2(86), b4 = r2(3), w6 = r2(17).internalToObjectOptions, O4 = r2(1), S4 = r2(4), A2 = r2(0).arrayAtomicsSymbol, $2 = r2(0).arrayParentSymbol, E3 = r2(0).arrayPathSymbol, j2 = r2(0).arraySchemaSymbol, P2 = r2(0).populateModelSymbol, x2 = Symbol("mongoose#Array#sliced"), T2 = Array.prototype.push, N3 = Symbol("mongoose#MongooseCoreArray#validators"), k2 = function(t5) {
                    (function(t6, e26) {
                        if ("function" != typeof e26 && null !== e26) throw new TypeError("Super expression must either be null or a function");
                        t6.prototype = Object.create(e26 && e26.prototype, {
                            constructor: {
                                value: t6,
                                writable: true,
                                configurable: true
                            }
                        }), e26 && h10(t6, e26);
                    })(S6, t5);
                    var r40, n57, o55, i31, l24, f20 = (r40 = S6, n57 = p14(), function() {
                        var t6, e26 = y13(r40);
                        if (n57) {
                            var o56 = y13(this).constructor;
                            t6 = Reflect.construct(e26, arguments, o56);
                        } else t6 = e26.apply(this, arguments);
                        return c23(this, t6);
                    });
                    function S6() {
                        return s30(this, S6), f20.apply(this, arguments);
                    }
                    return o55 = S6, i31 = [
                        {
                            key: "isMongooseArray",
                            get: function() {
                                return true;
                            }
                        },
                        {
                            key: "validators",
                            get: function() {
                                return this[N3];
                            },
                            set: function(t6) {
                                this[N3] = t6;
                            }
                        },
                        {
                            key: "$__getAtomics",
                            value: function() {
                                var t6 = [], e26 = Object.keys(this[A2] || {
                                }), r41 = e26.length, n58 = Object.assign({
                                }, w6, {
                                    _isNested: true
                                });
                                if (0 === r41) return t6[0] = [
                                    "$set",
                                    this.toObject(n58)
                                ], t6;
                                for(; r41--;){
                                    var o57 = e26[r41], i32 = this[A2][o57];
                                    O4.isMongooseObject(i32) ? i32 = i32.toObject(n58) : Array.isArray(i32) ? i32 = this.toObject.call(i32, n58) : null != i32 && Array.isArray(i32.$each) ? i32.$each = this.toObject.call(i32.$each, n58) : null != i32 && "function" == typeof i32.valueOf && (i32 = i32.valueOf()), "$addToSet" === o57 && (i32 = {
                                        $each: i32
                                    }), t6.push([
                                        o57,
                                        i32
                                    ]);
                                }
                                return t6;
                            }
                        },
                        {
                            key: "$atomics",
                            value: function() {
                                return this[A2];
                            }
                        },
                        {
                            key: "$parent",
                            value: function() {
                                return this[$2];
                            }
                        },
                        {
                            key: "$path",
                            value: function() {
                                return this[E3];
                            }
                        },
                        {
                            key: "$shift",
                            value: function() {
                                if (this._registerAtomic("$pop", -1), this._markModified(), !this._shifted) return this._shifted = true, [].shift.call(this);
                            }
                        },
                        {
                            key: "$pop",
                            value: function() {
                                if (this._registerAtomic("$pop", 1), this._markModified(), !this._popped) return this._popped = true, [].pop.call(this);
                            }
                        },
                        {
                            key: "$schema",
                            value: function() {
                                return this[j2];
                            }
                        },
                        {
                            key: "_cast",
                            value: function(t6) {
                                var r41, n58 = false;
                                return this[$2] && (n58 = this[$2].populated(this[E3], true)), n58 && null != t6 ? (r41 = n58.options[P2], (e25.isBuffer(t6) || t6 instanceof m2 || !O4.isObject(t6)) && (t6 = {
                                    _id: t6
                                }), t6.$__schema && t6.$__schema.discriminatorMapping && (void 0) !== t6.$__schema.discriminatorMapping.key || (t6 = new r41(t6)), this[j2].caster.applySetters(t6, this[$2], true)) : this[j2].caster.applySetters(t6, this[$2], false);
                            }
                        },
                        {
                            key: "_mapCast",
                            value: function(t6, e26) {
                                return this._cast(t6, this.length + e26);
                            }
                        },
                        {
                            key: "_markModified",
                            value: function(t6) {
                                var e26, r41 = this[$2];
                                if (r41) {
                                    if (e26 = this[E3], arguments.length && (e26 = e26 + "." + t6), null != e26 && e26.endsWith(".$")) return this;
                                    r41.markModified(e26, arguments.length > 0 ? t6 : r41);
                                }
                                return this;
                            }
                        },
                        {
                            key: "_registerAtomic",
                            value: function(t6, e26) {
                                if (!this[x2]) {
                                    if ("$set" === t6) return this[A2] = {
                                        $set: e26
                                    }, g5(this[$2], this[E3]), this._markModified(), this;
                                    var r41, n58 = this[A2];
                                    if ("$pop" === t6 && !("$pop" in n58)) {
                                        var o58 = this;
                                        this[$2].once("save", function() {
                                            o58._popped = o58._shifted = null;
                                        });
                                    }
                                    if (this[A2].$set || Object.keys(n58).length && !(t6 in n58)) return this[A2] = {
                                        $set: this
                                    }, this;
                                    if ("$pullAll" === t6 || "$addToSet" === t6) n58[t6] || (n58[t6] = []), n58[t6] = n58[t6].concat(e26);
                                    else if ("$pullDocs" === t6) {
                                        var i33 = n58.$pull || (n58.$pull = {
                                        });
                                        e26[0] instanceof _2 ? (r41 = i33.$or || (i33.$or = []), Array.prototype.push.apply(r41, e26.map(function(t7) {
                                            return t7.toObject({
                                                transform: false,
                                                virtuals: false
                                            });
                                        }))) : (r41 = i33._id || (i33._id = {
                                            $in: []
                                        })).$in = r41.$in.concat(e26);
                                    } else "$push" === t6 ? (n58.$push = n58.$push || {
                                        $each: []
                                    }, null != e26 && O4.hasUserDefinedProperty(e26, "$each") ? n58.$push = e26 : n58.$push.$each = n58.$push.$each.concat(e26)) : n58[t6] = e26;
                                    return this;
                                }
                            }
                        },
                        {
                            key: "addToSet",
                            value: function() {
                                B2(this, arguments);
                                var t6 = [].map.call(arguments, this._mapCast, this);
                                t6 = this[j2].applySetters(t6, this[$2]);
                                var e26 = [], r42 = "";
                                return t6[0] instanceof _2 ? r42 = "doc" : t6[0] instanceof Date && (r42 = "date"), t6.forEach(function(t7) {
                                    var n59, o59 = +t7;
                                    switch(r42){
                                        case "doc":
                                            n59 = this.some(function(e27) {
                                                return e27.equals(t7);
                                            });
                                            break;
                                        case "date":
                                            n59 = this.some(function(t8) {
                                                return +t8 === o59;
                                            });
                                            break;
                                        default:
                                            n59 = ~this.indexOf(t7);
                                    }
                                    n59 || ([].push.call(this, t7), this._registerAtomic("$addToSet", t7), this._markModified(), [].push.call(e26, t7));
                                }, this), e26;
                            }
                        },
                        {
                            key: "hasAtomics",
                            value: function() {
                                return O4.isPOJO(this[A2]) ? Object.keys(this[A2]).length : 0;
                            }
                        },
                        {
                            key: "includes",
                            value: function(t6, e26) {
                                return -1 !== this.indexOf(t6, e26);
                            }
                        },
                        {
                            key: "indexOf",
                            value: function(t6, e26) {
                                t6 instanceof m2 && (t6 = t6.toString()), e26 = null == e26 ? 0 : e26;
                                for(var r42 = this.length, n59 = e26; n59 < r42; ++n59)if (t6 == this[n59]) return n59;
                                return -1;
                            }
                        },
                        {
                            key: "inspect",
                            value: function() {
                                return JSON.stringify(this);
                            }
                        },
                        {
                            key: "nonAtomicPush",
                            value: function() {
                                var t6 = [].map.call(arguments, this._mapCast, this), e26 = [].push.apply(this, t6);
                                return this._registerAtomic("$set", this), this._markModified(), e26;
                            }
                        },
                        {
                            key: "pop",
                            value: function() {
                                var t6 = [].pop.call(this);
                                return this._registerAtomic("$set", this), this._markModified(), t6;
                            }
                        },
                        {
                            key: "pull",
                            value: function() {
                                for(var t6, e26 = [].map.call(arguments, this._cast, this), r42 = this[$2].get(this[E3]), n59 = r42.length; n59--;)if ((t6 = r42[n59]) instanceof d13) {
                                    var o59 = e26.some(function(e27) {
                                        return t6.equals(e27);
                                    });
                                    o59 && [].splice.call(r42, n59, 1);
                                } else ~r42.indexOf.call(e26, t6) && [].splice.call(r42, n59, 1);
                                return e26[0] instanceof _2 ? this._registerAtomic("$pullDocs", e26.map(function(t7) {
                                    return t7.$__getValue("_id") || t7;
                                })) : this._registerAtomic("$pullAll", e26), this._markModified(), g5(this[$2], this[E3]) > 0 && this._registerAtomic("$set", this), this;
                            }
                        },
                        {
                            key: "push",
                            value: function() {
                                var t6 = arguments, e26 = t6, r42 = null != t6[0] && O4.hasUserDefinedProperty(t6[0], "$each");
                                if (r42 && (e26 = t6[0], t6 = t6[0].$each), null == this[j2]) return T2.apply(this, t6);
                                B2(this, t6);
                                var n59, o60 = this[$2];
                                t6 = [].map.call(t6, this._mapCast, this), t6 = this[j2].applySetters(t6, o60, void 0, void 0, {
                                    skipDocumentArrayCast: true
                                });
                                var i34 = this[A2];
                                if (r42) {
                                    if (e26.$each = t6, b4(i34, "$push.$each.length", 0) > 0 && i34.$push.$position != i34.$position) throw new v2("Cannot call `Array#push()` multiple times with different `$position`");
                                    null != e26.$position ? ([].splice.apply(this, [
                                        e26.$position,
                                        0
                                    ].concat(t6)), n59 = this.length) : n59 = [].push.apply(this, t6);
                                } else {
                                    if (b4(i34, "$push.$each.length", 0) > 0 && null != i34.$push.$position) throw new v2("Cannot call `Array#push()` multiple times with different `$position`");
                                    e26 = t6, n59 = [].push.apply(this, t6);
                                }
                                return this._registerAtomic("$push", e26), this._markModified(), n59;
                            }
                        },
                        {
                            key: "remove",
                            value: function() {
                                return this.pull.apply(this, arguments);
                            }
                        },
                        {
                            key: "set",
                            value: function(t6, e26) {
                                var r42 = this._cast(e26, t6);
                                return this[t6] = r42, this._markModified(t6), this;
                            }
                        },
                        {
                            key: "shift",
                            value: function() {
                                var t6 = [].shift.call(this);
                                return this._registerAtomic("$set", this), this._markModified(), t6;
                            }
                        },
                        {
                            key: "sort",
                            value: function() {
                                var t6 = [].sort.apply(this, arguments);
                                return this._registerAtomic("$set", this), t6;
                            }
                        },
                        {
                            key: "splice",
                            value: function() {
                                var t6;
                                if (B2(this, Array.prototype.slice.call(arguments, 2)), arguments.length) {
                                    var e26;
                                    if (null == this[j2]) e26 = arguments;
                                    else {
                                        e26 = [];
                                        for(var r42 = 0; r42 < arguments.length; ++r42)e26[r42] = r42 < 2 ? arguments[r42] : this._cast(arguments[r42], arguments[0] + (r42 - 2));
                                    }
                                    t6 = [].splice.apply(this, e26), this._registerAtomic("$set", this);
                                }
                                return t6;
                            }
                        },
                        {
                            key: "slice",
                            value: function() {
                                var t6 = u31(y13(S6.prototype), "slice", this).apply(this, arguments);
                                return t6[$2] = this[$2], t6[j2] = this[j2], t6[A2] = this[A2], t6[E3] = this[E3], t6[x2] = true, t6;
                            }
                        },
                        {
                            key: "filter",
                            value: function() {
                                var t6 = u31(y13(S6.prototype), "filter", this).apply(this, arguments);
                                return t6[$2] = this[$2], t6[j2] = this[j2], t6[A2] = this[A2], t6[E3] = this[E3], t6;
                            }
                        },
                        {
                            key: "toBSON",
                            value: function() {
                                return this.toObject(w6);
                            }
                        },
                        {
                            key: "toObject",
                            value: function(t6) {
                                return t6 && t6.depopulate ? ((t6 = O4.clone(t6))._isNested = true, [].concat(this).map(function(e27) {
                                    return e27 instanceof d13 ? e27.toObject(t6) : e27;
                                })) : [].concat(this);
                            }
                        },
                        {
                            key: "unshift",
                            value: function() {
                                var t6;
                                return B2(this, arguments), null == this[j2] ? t6 = arguments : (t6 = [].map.call(arguments, this._cast, this), t6 = this[j2].applySetters(t6, this[$2])), [].unshift.apply(this, t6), this._registerAtomic("$set", this), this._markModified(), this.length;
                            }
                        }
                    ], a28(o55.prototype, i31), l24 && a28(o55, l24), S6;
                }(l23(Array));
                /*!
 * ignore
 */ function B2(t5, e27) {
                    var r40, n57, i31, s31 = null == t5 ? null : b4(t5[j2], "caster.options.ref", null);
                    0 === t5.length && e27.length > 0 && /*!
 * ignore
 */ (function(t6, e28) {
                        if (!e28) return false;
                        var r43, n59 = o49(t6);
                        try {
                            for(n59.s(); !(r43 = n59.n()).done;){
                                var i34 = r43.value;
                                if (null == i34) return false;
                                var s32 = i34.constructor;
                                if (!(i34 instanceof d13) || s32.modelName !== e28 && s32.baseModelName !== e28) return false;
                            }
                        } catch (t7) {
                            n59.e(t7);
                        } finally{
                            n59.f();
                        }
                        return true;
                    })(e27, s31) && t5[$2].populated(t5[E3], [], (r40 = {
                    }, n57 = P2, i31 = e27[0].constructor, n57 in r40 ? Object.defineProperty(r40, n57, {
                        value: i31,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    }) : r40[n57] = i31, r40));
                }
                S4.inspect.custom && (k2.prototype[S4.inspect.custom] = k2.prototype.inspect), t2.exports = k2;
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ t2.exports = function(t5, e25, r40) {
                var n52 = (r40 = r40 || {
                }).skipDocArrays, o49 = 0;
                if (!t5) return o49;
                for(var i27 = 0, s30 = Object.keys(t5.$__.activePaths.states.modify); i27 < s30.length; i27++){
                    var a28 = s30[i27];
                    if (n52) {
                        var u31 = t5.$__schema.path(a28);
                        if (u31 && u31.$isMongooseDocumentArray) continue;
                    }
                    a28.startsWith(e25 + ".") && (delete t5.$__.activePaths.states.modify[a28], ++o49);
                }
                return o49;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n52 = r2(15).get().Binary, o49 = r2(1), i27 = r2(63).Buffer;
            function s30(t5, e25, r40) {
                var n57, a39, c23, l23, f19, p14 = arguments.length;
                return n57 = 0 === p14 || null == arguments[0] ? 0 : t5, Array.isArray(e25) ? (c23 = e25[0], l23 = e25[1]) : a39 = e25, f19 = "number" == typeof n57 || n57 instanceof Number ? i27.alloc(n57) : i27.from(n57, a39, r40), o49.decorate(f19, s30.mixin), f19.isMongooseBuffer = true, f19[s30.pathSymbol] = c23, f19[u39] = l23, f19._subtype = 0, f19;
            }
            var a39 = Symbol.for("mongoose#Buffer#_path"), u39 = Symbol.for("mongoose#Buffer#_parent");
            s30.pathSymbol = a39, /*!
 * Inherit from Buffer.
 */ s30.mixin = {
                _subtype: void 0,
                _markModified: function() {
                    var t5 = this[u39];
                    return t5 && t5.markModified(this[s30.pathSymbol]), this;
                },
                write: function() {
                    var t5 = i27.prototype.write.apply(this, arguments);
                    return t5 > 0 && this._markModified(), t5;
                },
                copy: function(t5) {
                    var e25 = i27.prototype.copy.apply(this, arguments);
                    return t5 && t5.isMongooseBuffer && t5._markModified(), e25;
                }
            }, /*!
 * Compile other Buffer methods marking this buffer as modified.
 */ "writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 writeFloat writeDouble fill utf8Write binaryWrite asciiWrite set writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE writeInt16LE writeInt16BE writeInt32LE writeInt32BE writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE".split(" ").forEach(function(t5) {
                i27.prototype[t5] && (s30.mixin[t5] = function() {
                    var e25 = i27.prototype[t5].apply(this, arguments);
                    return this._markModified(), e25;
                });
            }), s30.mixin.toObject = function(t5) {
                var e25 = "number" == typeof t5 ? t5 : this._subtype || 0;
                return new n52(i27.from(this), e25);
            }, s30.mixin.toBSON = function() {
                return new n52(this, this._subtype || 0);
            }, s30.mixin.equals = function(t5) {
                if (!i27.isBuffer(t5)) return false;
                if (this.length !== t5.length) return false;
                for(var e25 = 0; e25 < this.length; ++e25)if (this[e25] !== t5[e25]) return false;
                return true;
            }, s30.mixin.subtype = function(t5) {
                if ("number" != typeof t5) throw new TypeError("Invalid subtype. Expected a number");
                this._subtype !== t5 && this._markModified(), this._subtype = t5;
            }, /*!
 * Module exports.
 */ s30.Binary = n52, t2.exports = s30;
        },
        function(t2, e3, r2) {
            "use strict";
            var n52 = r2(15).get().ObjectId, o49 = r2(22);
            t2.exports = function(t5) {
                if (null == t5) return t5;
                if (t5 instanceof n52) return t5;
                if (t5._id) {
                    if (t5._id instanceof n52) return t5._id;
                    if (t5._id.toString instanceof Function) return new n52(t5._id.toString());
                }
                if (t5.toString instanceof Function) return new n52(t5.toString());
                o49.ok(false);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n52(t5) {
                return (n52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t6) {
                    return typeof t6;
                } : function(t6) {
                    return t6 && "function" == typeof Symbol && t6.constructor === Symbol && t6 !== Symbol.prototype ? "symbol" : typeof t6;
                })(t5);
            }
            function o49(t5, e25) {
                var r40 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                if (!r40) {
                    if (Array.isArray(t5) || (r40 = (function(t6, e27) {
                        if (!t6) return;
                        if ("string" == typeof t6) return i27(t6, e27);
                        var r43 = Object.prototype.toString.call(t6).slice(8, -1);
                        "Object" === r43 && t6.constructor && (r43 = t6.constructor.name);
                        if ("Map" === r43 || "Set" === r43) return Array.from(t6);
                        if ("Arguments" === r43 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r43)) return i27(t6, e27);
                    })(t5)) || e25 && t5 && "number" == typeof t5.length) {
                        r40 && (t5 = r40);
                        var n57 = 0, o55 = function() {
                        };
                        return {
                            s: o55,
                            n: function() {
                                return n57 >= t5.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t5[n57++]
                                };
                            },
                            e: function(t6) {
                                throw t6;
                            },
                            f: o55
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s30, a39 = true, u39 = false;
                return {
                    s: function() {
                        r40 = r40.call(t5);
                    },
                    n: function() {
                        var t6 = r40.next();
                        return a39 = t6.done, t6;
                    },
                    e: function(t6) {
                        u39 = true, s30 = t6;
                    },
                    f: function() {
                        try {
                            a39 || null == r40.return || r40.return();
                        } finally{
                            if (u39) throw s30;
                        }
                    }
                };
            }
            function i27(t5, e25) {
                (null == e25 || e25 > t5.length) && (e25 = t5.length);
                for(var r40 = 0, n59 = new Array(e25); r40 < e25; r40++)n59[r40] = t5[r40];
                return n59;
            }
            function s30(t5, e25) {
                for(var r40 = 0; r40 < e25.length; r40++){
                    var n59 = e25[r40];
                    n59.enumerable = n59.enumerable || false, n59.configurable = true, "value" in n59 && (n59.writable = true), Object.defineProperty(t5, n59.key, n59);
                }
            }
            function a39(t5, e25, r40) {
                return (a39 = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t6, e27, r43) {
                    var n60 = function(t7, e28) {
                        for(; !Object.prototype.hasOwnProperty.call(t7, e28) && null !== (t7 = h10(t7)););
                        return t7;
                    }(t6, e27);
                    if (n60) {
                        var o60 = Object.getOwnPropertyDescriptor(n60, e27);
                        return o60.get ? o60.get.call(r43) : o60.value;
                    }
                })(t5, e25, r40 || t5);
            }
            function u39(t5, e25) {
                return !e25 || "object" !== n52(e25) && "function" != typeof e25 ? (function(t6) {
                    if ((void 0) === t6) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                })(t5) : e25;
            }
            function c23(t5) {
                var e25 = "function" == typeof Map ? new Map : void 0;
                return (c23 = function(t6) {
                    if (null === t6 || (r40 = t6, -1 === Function.toString.call(r40).indexOf("[native code]"))) return t6;
                    var r40;
                    if ("function" != typeof t6) throw new TypeError("Super expression must either be null or a function");
                    if ((void 0) !== e25) {
                        if (e25.has(t6)) return e25.get(t6);
                        e25.set(t6, n60);
                    }
                    function n60() {
                        return l23(t6, arguments, h10(this).constructor);
                    }
                    return n60.prototype = Object.create(t6.prototype, {
                        constructor: {
                            value: n60,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    }), p14(n60, t6);
                })(t5);
            }
            function l23(t5, e25, r40) {
                return (l23 = f19() ? Reflect.construct : function(t6, e27, r43) {
                    var n60 = [
                        null
                    ];
                    n60.push.apply(n60, e27);
                    var o61 = new (Function.bind.apply(t6, n60));
                    return r43 && p14(o61, r43.prototype), o61;
                }).apply(null, arguments);
            }
            function f19() {
                if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                if (Reflect.construct.sham) return false;
                if ("function" == typeof Proxy) return true;
                try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                    })), true;
                } catch (t5) {
                    return false;
                }
            }
            function p14(t5, e25) {
                return (p14 = Object.setPrototypeOf || function(t6, e27) {
                    return t6.__proto__ = e27, t6;
                })(t5, e25);
            }
            function h10(t5) {
                return (h10 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t6) {
                    return t6.__proto__ || Object.getPrototypeOf(t6);
                })(t5);
            }
            var y13 = r2(25), d13 = r2(8), _2 = r2(1).deepEqual, v2 = r2(3), m2 = r2(90), g5 = r2(4), b4 = r2(49), w6 = r2(0).populateModelSymbol, O4 = function(t5) {
                (function(t6, e25) {
                    if ("function" != typeof e25 && null !== e25) throw new TypeError("Super expression must either be null or a function");
                    t6.prototype = Object.create(e25 && e25.prototype, {
                        constructor: {
                            value: t6,
                            writable: true,
                            configurable: true
                        }
                    }), e25 && p14(t6, e25);
                })(g6, t5);
                var e25, r40, n60, i31, c30, l24 = (e25 = g6, r40 = f19(), function() {
                    var t6, n61 = h10(e25);
                    if (r40) {
                        var o61 = h10(this).constructor;
                        t6 = Reflect.construct(n61, arguments, o61);
                    } else t6 = n61.apply(this, arguments);
                    return u39(this, t6);
                });
                function g6(t6, e27, r43, n61) {
                    var o62;
                    return (function(t7, e28) {
                        if (!(t7 instanceof e28)) throw new TypeError("Cannot call a class as a function");
                    })(this, g6), null != t6 && "Object" === t6.constructor.name && (t6 = Object.keys(t6).reduce(function(e28, r44) {
                        return e28.concat([
                            [
                                r44,
                                t6[r44]
                            ]
                        ]);
                    }, [])), (o62 = l24.call(this, t6)).$__parent = null != r43 && null != r43.$__ ? r43 : null, o62.$__path = e27, o62.$__schemaType = null == n61 ? new y13(e27) : n61, o62.$__runDeferred(), o62;
                }
                return n60 = g6, i31 = [
                    {
                        key: "$init",
                        value: function(t6, e27) {
                            S4(t6), a39(h10(g6.prototype), "set", this).call(this, t6, e27), null != e27 && e27.$isSingleNested && (e27.$basePath = this.$__path + "." + t6);
                        }
                    },
                    {
                        key: "$__set",
                        value: function(t6, e27) {
                            a39(h10(g6.prototype), "set", this).call(this, t6, e27);
                        }
                    },
                    {
                        key: "get",
                        value: function(t6, e27) {
                            return t6 instanceof d13 && (t6 = t6.toString()), false === (e27 = e27 || {
                            }).getters ? a39(h10(g6.prototype), "get", this).call(this, t6) : this.$__schemaType.applyGetters(a39(h10(g6.prototype), "get", this).call(this, t6), this.$__parent);
                        }
                    },
                    {
                        key: "set",
                        value: function(t6, e27) {
                            if (t6 instanceof d13 && (t6 = t6.toString()), S4(t6), e27 = m2(e27), null == this.$__schemaType) return this.$__deferred = this.$__deferred || [], void this.$__deferred.push({
                                key: t6,
                                value: e27
                            });
                            var r43 = this.$__path + "." + t6, n61 = null != this.$__parent && this.$__parent.$__ ? this.$__parent.populated(r43) || this.$__parent.populated(this.$__path) : null, o62 = this.get(t6);
                            if (null != n61) null == e27.$__ && (e27 = new n61.options[w6](e27)), e27.$__.wasPopulated = true;
                            else try {
                                e27 = this.$__schemaType.applySetters(e27, this.$__parent, false, this.get(t6), {
                                    path: r43
                                });
                            } catch (t7) {
                                if (null != this.$__parent && null != this.$__parent.$__) return void this.$__parent.invalidate(r43, t7);
                                throw t7;
                            }
                            a39(h10(g6.prototype), "set", this).call(this, t6, e27), null != e27 && e27.$isSingleNested && (e27.$basePath = this.$__path + "." + t6);
                            var i35 = this.$__parent;
                            null == i35 || null == i35.$__ || _2(e27, o62) || i35.markModified(this.$__path + "." + t6);
                        }
                    },
                    {
                        key: "clear",
                        value: function() {
                            a39(h10(g6.prototype), "clear", this).call(this);
                            var t6 = this.$__parent;
                            null != t6 && t6.markModified(this.$__path);
                        }
                    },
                    {
                        key: "delete",
                        value: function(t6) {
                            t6 instanceof d13 && (t6 = t6.toString()), this.set(t6, void 0), a39(h10(g6.prototype), "delete", this).call(this, t6);
                        }
                    },
                    {
                        key: "toBSON",
                        value: function() {
                            return new Map(this);
                        }
                    },
                    {
                        key: "toObject",
                        value: function(t6) {
                            if (v2(t6, "flattenMaps")) {
                                var e27, r43 = {
                                }, n61 = o49(this.keys());
                                try {
                                    for(n61.s(); !(e27 = n61.n()).done;){
                                        var i35 = e27.value;
                                        r43[i35] = this.get(i35);
                                    }
                                } catch (t7) {
                                    n61.e(t7);
                                } finally{
                                    n61.f();
                                }
                                return r43;
                            }
                            return new Map(this);
                        }
                    },
                    {
                        key: "toJSON",
                        value: function() {
                            var t6, e28 = {
                            }, r44 = o49(this.keys());
                            try {
                                for(r44.s(); !(t6 = r44.n()).done;){
                                    var n62 = t6.value;
                                    e28[n62] = this.get(n62);
                                }
                            } catch (t7) {
                                r44.e(t7);
                            } finally{
                                r44.f();
                            }
                            return e28;
                        }
                    },
                    {
                        key: "inspect",
                        value: function() {
                            return new Map(this);
                        }
                    },
                    {
                        key: "$__runDeferred",
                        value: function() {
                            if (this.$__deferred) {
                                var t6, e28 = o49(this.$__deferred);
                                try {
                                    for(e28.s(); !(t6 = e28.n()).done;){
                                        var r44 = t6.value;
                                        this.set(r44.key, r44.value);
                                    }
                                } catch (t7) {
                                    e28.e(t7);
                                } finally{
                                    e28.f();
                                }
                                this.$__deferred = null;
                            }
                        }
                    }
                ], s30(n60.prototype, i31), c30 && s30(n60, c30), g6;
            }(c23(Map));
            /*!
 * Since maps are stored as objects under the hood, keys must be strings
 * and can't contain any invalid characters
 */ function S4(t5) {
                var e25 = n52(t5);
                if ("string" !== e25) throw new TypeError("Mongoose maps only support string keys, got ".concat(e25));
                if (t5.startsWith("$")) throw new Error('Mongoose maps do not support keys that start with "$", got "'.concat(t5, '"'));
                if (t5.includes(".")) throw new Error('Mongoose maps do not support keys that contain ".", got "'.concat(t5, '"'));
                if (b4.has(t5)) throw new Error('Mongoose maps do not support reserved key name "'.concat(t5, '"'));
            }
            g5.inspect.custom && Object.defineProperty(O4.prototype, g5.inspect.custom, {
                enumerable: false,
                writable: false,
                configurable: false,
                value: O4.prototype.inspect
            }), Object.defineProperty(O4.prototype, "$__set", {
                enumerable: false,
                writable: true,
                configurable: false
            }), Object.defineProperty(O4.prototype, "$__parent", {
                enumerable: false,
                writable: true,
                configurable: false
            }), Object.defineProperty(O4.prototype, "$__path", {
                enumerable: false,
                writable: true,
                configurable: false
            }), Object.defineProperty(O4.prototype, "$__schemaType", {
                enumerable: false,
                writable: true,
                configurable: false
            }), Object.defineProperty(O4.prototype, "$isMongooseMap", {
                enumerable: false,
                writable: false,
                configurable: false,
                value: true
            }), Object.defineProperty(O4.prototype, "$__deferredCalls", {
                enumerable: false,
                writable: false,
                configurable: false,
                value: true
            }), t2.exports = O4;
        },
        function(t2, e3, r2) {
            "use strict";
            var n52 = r2(1);
            t2.exports = function(t5) {
                return n52.isPOJO(t5) && null != t5.$__ && null != t5._doc ? t5._doc : t5;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n52(t5, e25) {
                var r40 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                if (!r40) {
                    if (Array.isArray(t5) || (r40 = (function(t7, e29) {
                        if (!t7) return;
                        if ("string" == typeof t7) return o49(t7, e29);
                        var r45 = Object.prototype.toString.call(t7).slice(8, -1);
                        "Object" === r45 && t7.constructor && (r45 = t7.constructor.name);
                        if ("Map" === r45 || "Set" === r45) return Array.from(t7);
                        if ("Arguments" === r45 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r45)) return o49(t7, e29);
                    })(t5)) || e25 && t5 && "number" == typeof t5.length) {
                        r40 && (t5 = r40);
                        var n60 = 0, i27 = function() {
                        };
                        return {
                            s: i27,
                            n: function() {
                                return n60 >= t5.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t5[n60++]
                                };
                            },
                            e: function(t7) {
                                throw t7;
                            },
                            f: i27
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s30, a39 = true, u39 = false;
                return {
                    s: function() {
                        r40 = r40.call(t5);
                    },
                    n: function() {
                        var t7 = r40.next();
                        return a39 = t7.done, t7;
                    },
                    e: function(t7) {
                        u39 = true, s30 = t7;
                    },
                    f: function() {
                        try {
                            a39 || null == r40.return || r40.return();
                        } finally{
                            if (u39) throw s30;
                        }
                    }
                };
            }
            function o49(t5, e25) {
                (null == e25 || e25 > t5.length) && (e25 = t5.length);
                for(var r40 = 0, n63 = new Array(e25); r40 < e25; r40++)n63[r40] = t5[r40];
                return n63;
            }
            var i31 = r2(12), s30 = r2(52), a39 = r2(17).internalToObjectOptions, u39 = r2(24), c23 = r2(0).documentArrayParent;
            function l23(t5, e25, r40, o62, s31) {
                var a40 = this;
                this.$isSingleNested = true, null != s31 && null != s31.path && (this.$basePath = s31.path);
                var u40 = null != s31 && s31.priorDoc, c30 = null;
                if (u40 && (this._doc = Object.assign({
                }, s31.priorDoc._doc), delete this._doc[this.$__schema.options.discriminatorKey], c30 = Object.keys(s31.priorDoc._doc || {
                }).filter(function(t7) {
                    return t7 !== a40.$__schema.options.discriminatorKey;
                })), null != r40 && (s31 = Object.assign({
                }, s31, {
                    isNew: r40.isNew,
                    defaults: r40.$__.$options.defaults
                })), i31.call(this, t5, e25, o62, s31), u40) {
                    var l24, f19 = n52(c30);
                    try {
                        for(f19.s(); !(l24 = f19.n()).done;){
                            var p14 = l24.value;
                            if (!this.$__.activePaths.states.modify[p14] && !this.$__.activePaths.states.default[p14] && !this.$__.$setCalled.has(p14)) {
                                var h10 = this.$__schema.path(p14), y13 = null == h10 ? void 0 : h10.getDefault(this);
                                (void 0) === y13 ? delete this._doc[p14] : (this._doc[p14] = y13, this.$__.activePaths.default(p14));
                            }
                        }
                    } catch (t7) {
                        f19.e(t7);
                    } finally{
                        f19.f();
                    }
                    delete s31.priorDoc, delete this.$__.$options.priorDoc;
                }
            }
            t2.exports = l23, l23.prototype = Object.create(i31.prototype), l23.prototype.toBSON = function() {
                return this.toObject(a39);
            }, l23.prototype.save = function(t5, e25) {
                var r40 = this;
                return "function" == typeof t5 && (e25 = t5, t5 = {
                }), (t5 = t5 || {
                }).suppressWarning || console.warn("mongoose: calling `save()` on a subdoc does **not** save the document to MongoDB, it only runs save middleware. Use `subdoc.save({ suppressWarning: true })` to hide this warning if you're sure this behavior is right for your app."), u39(e25, function(t7) {
                    r40.$__save(t7);
                });
            }, l23.prototype.$__save = function(t5) {
                var e25 = this;
                return s30(function() {
                    return t5(null, e25);
                });
            }, l23.prototype.$isValid = function(t5) {
                return this.$__parent && this.$basePath ? this.$__parent.$isValid([
                    this.$basePath,
                    t5
                ].join(".")) : i31.prototype.$isValid.call(this, t5);
            }, l23.prototype.markModified = function(t5) {
                if (i31.prototype.markModified.call(this, t5), this.$__parent && this.$basePath) {
                    if (this.$__parent.isDirectModified(this.$basePath)) return;
                    this.$__parent.markModified([
                        this.$basePath,
                        t5
                    ].join("."), this);
                }
            }, l23.prototype.isModified = function(t5, e25) {
                var r40 = this;
                return this.$__parent && this.$basePath ? Array.isArray(t5) || "string" == typeof t5 ? (t5 = (t5 = Array.isArray(t5) ? t5 : t5.split(" ")).map(function(t7) {
                    return [
                        r40.$basePath,
                        t7
                    ].join(".");
                }), this.$__parent.isModified(t5, e25)) : this.$__parent.isModified(this.$basePath) : i31.prototype.isModified.call(this, t5, e25);
            }, l23.prototype.$markValid = function(t5) {
                i31.prototype.$markValid.call(this, t5), this.$__parent && this.$basePath && this.$__parent.$markValid([
                    this.$basePath,
                    t5
                ].join("."));
            }, /*!
 * ignore
 */ l23.prototype.invalidate = function(t5, e25, r40) {
                if (e25 !== this.ownerDocument().$__.validationError && i31.prototype.invalidate.call(this, t5, e25, r40), this.$__parent && this.$basePath) this.$__parent.invalidate([
                    this.$basePath,
                    t5
                ].join("."), e25, r40);
                else if ("cast" === e25.kind || "CastError" === e25.name) throw e25;
                return this.ownerDocument().$__.validationError;
            }, /*!
 * ignore
 */ l23.prototype.$ignore = function(t5) {
                i31.prototype.$ignore.call(this, t5), this.$__parent && this.$basePath && this.$__parent.$ignore([
                    this.$basePath,
                    t5
                ].join("."));
            }, l23.prototype.ownerDocument = function() {
                if (this.$__.ownerDocument) return this.$__.ownerDocument;
                var t5 = this.$__parent;
                if (!t5) return this;
                for(; t5.$__parent || t5[c23];)t5 = t5.$__parent || t5[c23];
                return this.$__.ownerDocument = t5, this.$__.ownerDocument;
            }, l23.prototype.parent = function() {
                return this.$__parent;
            }, l23.prototype.$parent = l23.prototype.parent, /*!
 * no-op for hooks
 */ l23.prototype.$__remove = function(t5) {
                return t5(null, this);
            }, l23.prototype.remove = function(t5, e25) {
                "function" == typeof t5 && (e25 = t5, t5 = null), /*!
 * Registers remove event listeners for triggering
 * on subdocuments.
 *
 * @param {Subdocument} sub
 * @api private
 */ (function(t7) {
                    var e29 = t7.ownerDocument();
                    function r40() {
                        e29.removeListener("save", r40), e29.removeListener("remove", r40), t7.emit("remove", t7), t7.constructor.emit("remove", t7), e29 = t7 = null;
                    }
                    e29.on("save", r40), e29.on("remove", r40);
                })(this), t5 && t5.noop || this.$__parent.set(this.$basePath, null), "function" == typeof e25 && e25(null);
            }, /*!
 * ignore
 */ l23.prototype.populate = function() {
                throw new Error('Mongoose does not support calling populate() on nested docs. Instead of `doc.nested.populate("path")`, use `doc.populate("nested.path")`');
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n52(t5, e25) {
                var r40 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                if (!r40) {
                    if (Array.isArray(t5) || (r40 = (function(t7, e29) {
                        if (!t7) return;
                        if ("string" == typeof t7) return o49(t7, e29);
                        var r45 = Object.prototype.toString.call(t7).slice(8, -1);
                        "Object" === r45 && t7.constructor && (r45 = t7.constructor.name);
                        if ("Map" === r45 || "Set" === r45) return Array.from(t7);
                        if ("Arguments" === r45 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r45)) return o49(t7, e29);
                    })(t5)) || e25 && t5 && "number" == typeof t5.length) {
                        r40 && (t5 = r40);
                        var n63 = 0, i31 = function() {
                        };
                        return {
                            s: i31,
                            n: function() {
                                return n63 >= t5.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t5[n63++]
                                };
                            },
                            e: function(t7) {
                                throw t7;
                            },
                            f: i31
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s30, a39 = true, u39 = false;
                return {
                    s: function() {
                        r40 = r40.call(t5);
                    },
                    n: function() {
                        var t7 = r40.next();
                        return a39 = t7.done, t7;
                    },
                    e: function(t7) {
                        u39 = true, s30 = t7;
                    },
                    f: function() {
                        try {
                            a39 || null == r40.return || r40.return();
                        } finally{
                            if (u39) throw s30;
                        }
                    }
                };
            }
            function o49(t5, e25) {
                (null == e25 || e25 > t5.length) && (e25 = t5.length);
                for(var r40 = 0, n64 = new Array(e25); r40 < e25; r40++)n64[r40] = t5[r40];
                return n64;
            }
            var i36 = r2(25), s30 = r2(8), a39 = r2(57).defineKey, u39 = r2(3), c23 = r2(1), l23 = {
                toJSON: true,
                toObject: true,
                _id: true,
                id: true
            };
            /*!
 * ignore
 */ t2.exports = function(t5, e25, r40, o62, f20) {
                if (!r40 || !r40.instanceOfSchema) throw new Error("You must pass a valid discriminator Schema");
                if (t5.schema.discriminatorMapping && !t5.schema.discriminatorMapping.isRoot) throw new Error('Discriminator "' + e25 + '" can only be a discriminator of the root model');
                if (f20) {
                    var p15 = u39(t5.base, "options.applyPluginsToDiscriminators", false);
                    t5.base._applyPlugins(r40, {
                        skipTopLevel: !p15
                    });
                }
                var h11 = t5.schema.options.discriminatorKey, y14 = t5.schema.path(h11);
                if (null != y14) c23.hasUserDefinedProperty(y14.options, "select") || (y14.options.select = true), y14.options.$skipDiscriminatorCheck = true;
                else {
                    var d13 = {
                    };
                    d13[h11] = {
                        default: void 0,
                        select: true,
                        $skipDiscriminatorCheck: true
                    }, d13[h11][t5.schema.options.typeKey] = String, t5.schema.add(d13), a39(h11, null, t5.prototype, null, [
                        h11
                    ], t5.schema.options);
                }
                if (r40.path(h11) && true !== r40.path(h11).options.$skipDiscriminatorCheck) throw new Error('Discriminator "' + e25 + '" cannot have field with name "' + h11 + '"');
                var _2 = e25;
                if (("string" == typeof o62 && o62.length || "number" == typeof o62 || o62 instanceof s30) && (_2 = o62), (function(e29, r45) {
                    e29._baseSchema = r45, r45.paths._id && r45.paths._id.options && !r45.paths._id.options.auto && e29.remove("_id");
                    for(var o63 = [], s31 = 0, a40 = Object.keys(r45.paths); s31 < a40.length; s31++){
                        var u40 = a40[s31];
                        if (e29.nested[u40]) o63.push(u40);
                        else if (-1 !== u40.indexOf(".")) {
                            var f21, p16 = "", d14 = n52(u40.split(".").slice(0, -1));
                            try {
                                for(d14.s(); !(f21 = d14.n()).done;){
                                    var v2 = f21.value;
                                    p16 += (p16.length ? "." : "") + v2, (e29.paths[p16] instanceof i36 || e29.singleNestedPaths[p16] instanceof i36) && o63.push(u40);
                                }
                            } catch (t7) {
                                d14.e(t7);
                            } finally{
                                d14.f();
                            }
                        }
                    }
                    c23.merge(e29, r45, {
                        isDiscriminatorSchemaMerge: true,
                        omit: {
                            discriminators: true,
                            base: true
                        },
                        omitNested: o63.reduce(function(t7, e30) {
                            return t7["tree." + e30] = true, t7;
                        }, {
                        })
                    });
                    for(var m2 = 0, g5 = o63; m2 < g5.length; m2++){
                        var b4 = g5[m2];
                        delete e29.paths[b4];
                    }
                    e29.childSchemas.forEach(function(t7) {
                        t7.model.prototype.$__setSchema(t7.schema);
                    });
                    var w6 = {
                    };
                    w6[h11] = {
                        default: _2,
                        select: true,
                        set: function(t7) {
                            if (t7 === _2) return _2;
                            throw new Error("Can't set discriminator key \"" + h11 + '"');
                        },
                        $skipDiscriminatorCheck: true
                    }, w6[h11][e29.options.typeKey] = y14 ? y14.instance : String, e29.add(w6), e29.discriminatorMapping = {
                        key: h11,
                        value: _2,
                        isRoot: false
                    }, r45.options.collection && (e29.options.collection = r45.options.collection);
                    var O4 = e29.options.toJSON, S4 = e29.options.toObject, A2 = e29.options._id, $2 = e29.options.id, E3 = Object.keys(e29.options);
                    e29.options.discriminatorKey = r45.options.discriminatorKey;
                    for(var j2 = 0, P2 = E3; j2 < P2.length; j2++){
                        var x2 = P2[j2];
                        if (!l23[x2]) {
                            if ("pluralization" === x2 && 1 == e29.options[x2] && null == r45.options[x2]) continue;
                            if (!c23.deepEqual(e29.options[x2], r45.options[x2])) throw new Error("Can't customize discriminator option " + x2 + " (can only modify " + Object.keys(l23).join(", ") + ")");
                        }
                    }
                    e29.options = c23.clone(r45.options), O4 && (e29.options.toJSON = O4), S4 && (e29.options.toObject = S4), (void 0) !== A2 && (e29.options._id = A2), e29.options.id = $2, e29.s.hooks = t5.schema.s.hooks.merge(e29.s.hooks), e29.plugins = Array.prototype.slice.call(r45.plugins), e29.callQueue = r45.callQueue.concat(e29.callQueue), delete e29._requiredpaths;
                })(r40, t5.schema), t5.discriminators || (t5.discriminators = {
                }), t5.schema.discriminatorMapping || (t5.schema.discriminatorMapping = {
                    key: h11,
                    value: null,
                    isRoot: true
                }), t5.schema.discriminators || (t5.schema.discriminators = {
                }), t5.schema.discriminators[e25] = r40, t5.discriminators[e25]) throw new Error('Discriminator with name "' + e25 + '" already exists');
                return r40;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n52 = r2(75);
            t2.exports = function(t5, e25) {
                return null == e25 || null == e25._id || (t5 = t5.clone(), e25._id ? t5.paths._id || (n52(t5), t5.options._id = true) : (t5.remove("_id"), t5.options._id = false)), t5;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n52 = r2(35);
            /*!
 * Find the correct constructor, taking into account discriminators
 */ t2.exports = function(t5, e25) {
                var r40 = t5.schema.options.discriminatorKey;
                if (null != e25 && t5.discriminators && null != e25[r40]) {
                    if (t5.discriminators[e25[r40]]) t5 = t5.discriminators[e25[r40]];
                    else {
                        var o49 = n52(t5.discriminators, e25[r40]);
                        o49 && (t5 = o49);
                    }
                }
                return t5;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = r2(96);
        },
        function(t2, e3, r2) {
            "use strict";
            (function(n52) {
                function o62(t5) {
                    return (o62 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                        return typeof t7;
                    } : function(t7) {
                        return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                    })(t5);
                }
                function i36(t5, e25) {
                    return (i36 = Object.setPrototypeOf || function(t7, e29) {
                        return t7.__proto__ = e29, t7;
                    })(t5, e25);
                }
                function s30(t5) {
                    var e25 = function() {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                        if (Reflect.construct.sham) return false;
                        if ("function" == typeof Proxy) return true;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                            })), true;
                        } catch (t7) {
                            return false;
                        }
                    }();
                    return function() {
                        var r40, n64 = u39(t5);
                        if (e25) {
                            var o63 = u39(this).constructor;
                            r40 = Reflect.construct(n64, arguments, o63);
                        } else r40 = n64.apply(this, arguments);
                        return a39(this, r40);
                    };
                }
                function a39(t5, e25) {
                    return !e25 || "object" !== o62(e25) && "function" != typeof e25 ? (function(t7) {
                        if ((void 0) === t7) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t7;
                    })(t5) : e25;
                }
                function u39(t5) {
                    return (u39 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t7) {
                        return t7.__proto__ || Object.getPrototypeOf(t7);
                    })(t5);
                }
                r2(15).set(r2(100));
                var c23 = r2(61), l23 = r2(67);
                c23.setBrowser(true), Object.defineProperty(e3, "Promise", {
                    get: function() {
                        return l23.get();
                    },
                    set: function(t5) {
                        l23.set(t5);
                    }
                }), e3.PromiseProvider = l23, e3.Error = r2(5), e3.Schema = r2(53), e3.Types = r2(36), e3.VirtualType = r2(54), e3.SchemaType = r2(6), e3.utils = r2(1), e3.Document = c23(), e3.model = function(t5, r40) {
                    var n64 = function(t7) {
                        (function(t8, e25) {
                            if ("function" != typeof e25 && null !== e25) throw new TypeError("Super expression must either be null or a function");
                            t8.prototype = Object.create(e25 && e25.prototype, {
                                constructor: {
                                    value: t8,
                                    writable: true,
                                    configurable: true
                                }
                            }), e25 && i36(t8, e25);
                        })(n65, t7);
                        var e25 = s30(n65);
                        function n65(t8, o64) {
                            return (function(t9, e29) {
                                if (!(t9 instanceof e29)) throw new TypeError("Cannot call a class as a function");
                            })(this, n65), e25.call(this, t8, r40, o64);
                        }
                        return n65;
                    }(e3.Document);
                    return n64.modelName = t5, n64;
                }, /*!
 * Module exports.
 */ "undefined" != typeof window && (window.mongoose = t2.exports, window.Buffer = n52);
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            e3.byteLength = function(t5) {
                var e25 = c23(t5), r40 = e25[0], n52 = e25[1];
                return 3 * (r40 + n52) / 4 - n52;
            }, e3.toByteArray = function(t5) {
                var e25, r40, n52 = c23(t5), s30 = n52[0], a39 = n52[1], u39 = new i36(function(t7, e29, r45) {
                    return 3 * (e29 + r45) / 4 - r45;
                }(0, s30, a39)), l23 = 0, f20 = a39 > 0 ? s30 - 4 : s30;
                for(r40 = 0; r40 < f20; r40 += 4)e25 = o62[t5.charCodeAt(r40)] << 18 | o62[t5.charCodeAt(r40 + 1)] << 12 | o62[t5.charCodeAt(r40 + 2)] << 6 | o62[t5.charCodeAt(r40 + 3)], u39[l23++] = e25 >> 16 & 255, u39[l23++] = e25 >> 8 & 255, u39[l23++] = 255 & e25;
                2 === a39 && (e25 = o62[t5.charCodeAt(r40)] << 2 | o62[t5.charCodeAt(r40 + 1)] >> 4, u39[l23++] = 255 & e25);
                1 === a39 && (e25 = o62[t5.charCodeAt(r40)] << 10 | o62[t5.charCodeAt(r40 + 1)] << 4 | o62[t5.charCodeAt(r40 + 2)] >> 2, u39[l23++] = e25 >> 8 & 255, u39[l23++] = 255 & e25);
                return u39;
            }, e3.fromByteArray = function(t5) {
                for(var e25, r40 = t5.length, o62 = r40 % 3, i36 = [], s30 = 0, a39 = r40 - o62; s30 < a39; s30 += 16383)i36.push(l23(t5, s30, s30 + 16383 > a39 ? a39 : s30 + 16383));
                1 === o62 ? (e25 = t5[r40 - 1], i36.push(n52[e25 >> 2] + n52[e25 << 4 & 63] + "==")) : 2 === o62 && (e25 = (t5[r40 - 2] << 8) + t5[r40 - 1], i36.push(n52[e25 >> 10] + n52[e25 >> 4 & 63] + n52[e25 << 2 & 63] + "="));
                return i36.join("");
            };
            for(var n52 = [], o62 = [], i36 = "undefined" != typeof Uint8Array ? Uint8Array : Array, s30 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a39 = 0, u39 = s30.length; a39 < u39; ++a39)n52[a39] = s30[a39], o62[s30.charCodeAt(a39)] = a39;
            function c23(t5) {
                var e25 = t5.length;
                if (e25 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                var r40 = t5.indexOf("=");
                return -1 === r40 && (r40 = e25), [
                    r40,
                    r40 === e25 ? 0 : 4 - r40 % 4
                ];
            }
            function l23(t5, e25, r40) {
                for(var o64, i37, s31 = [], a40 = e25; a40 < r40; a40 += 3)o64 = (t5[a40] << 16 & 16711680) + (t5[a40 + 1] << 8 & 65280) + (255 & t5[a40 + 2]), s31.push(n52[(i37 = o64) >> 18 & 63] + n52[i37 >> 12 & 63] + n52[i37 >> 6 & 63] + n52[63 & i37]);
                return s31.join("");
            }
            o62["-".charCodeAt(0)] = 62, o62["_".charCodeAt(0)] = 63;
        },
        function(t2, e3) {
            /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ e3.read = function(t5, e25, r2, n52, o62) {
                var i36, s30, a39 = 8 * o62 - n52 - 1, u39 = (1 << a39) - 1, c23 = u39 >> 1, l23 = -7, f20 = r2 ? o62 - 1 : 0, p17 = r2 ? -1 : 1, h11 = t5[e25 + f20];
                for(f20 += p17, i36 = h11 & (1 << -l23) - 1, h11 >>= -l23, l23 += a39; l23 > 0; i36 = 256 * i36 + t5[e25 + f20], f20 += p17, l23 -= 8);
                for(s30 = i36 & (1 << -l23) - 1, i36 >>= -l23, l23 += n52; l23 > 0; s30 = 256 * s30 + t5[e25 + f20], f20 += p17, l23 -= 8);
                if (0 === i36) i36 = 1 - c23;
                else {
                    if (i36 === u39) return s30 ? NaN : 1 / 0 * (h11 ? -1 : 1);
                    s30 += Math.pow(2, n52), i36 -= c23;
                }
                return (h11 ? -1 : 1) * s30 * Math.pow(2, i36 - n52);
            }, e3.write = function(t5, e25, r2, n52, o62, i36) {
                var s30, a39, u39, c23 = 8 * i36 - o62 - 1, l23 = (1 << c23) - 1, f20 = l23 >> 1, p17 = 23 === o62 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, h11 = n52 ? 0 : i36 - 1, y14 = n52 ? 1 : -1, d15 = e25 < 0 || 0 === e25 && 1 / e25 < 0 ? 1 : 0;
                for(e25 = Math.abs(e25), isNaN(e25) || e25 === 1 / 0 ? (a39 = isNaN(e25) ? 1 : 0, s30 = l23) : (s30 = Math.floor(Math.log(e25) / Math.LN2), e25 * (u39 = Math.pow(2, -s30)) < 1 && (s30--, u39 *= 2), (e25 += s30 + f20 >= 1 ? p17 / u39 : p17 * Math.pow(2, 1 - f20)) * u39 >= 2 && (s30++, u39 /= 2), s30 + f20 >= l23 ? (a39 = 0, s30 = l23) : s30 + f20 >= 1 ? (a39 = (e25 * u39 - 1) * Math.pow(2, o62), s30 += f20) : (a39 = e25 * Math.pow(2, f20 - 1) * Math.pow(2, o62), s30 = 0)); o62 >= 8; t5[r2 + h11] = 255 & a39, h11 += y14, a39 /= 256, o62 -= 8);
                for(s30 = s30 << o62 | a39, c23 += o62; c23 > 0; t5[r2 + h11] = 255 & s30, h11 += y14, s30 /= 256, c23 -= 8);
                t5[r2 + h11 - y14] |= 128 * d15;
            };
        },
        function(t2, e3) {
            var r2 = {
            }.toString;
            t2.exports = Array.isArray || function(t5) {
                return "[object Array]" == r2.call(t5);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module exports.
 */ e3.Binary = r2(101), e3.Collection = function() {
                throw new Error("Cannot create a collection from browser library");
            }, e3.getConnection = function() {
                return function() {
                    throw new Error("Cannot create a connection from browser library");
                };
            }, e3.Decimal128 = r2(108), e3.ObjectId = r2(109), e3.ReadPreference = r2(110);
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n52 = r2(37).Binary;
            /*!
 * Module exports.
 */ t2.exports = n52;
        },
        function(t2, e3) {
            function r2(t5) {
                return (r2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                    return typeof t7;
                } : function(t7) {
                    return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                })(t5);
            }
            t2.exports = function(t5) {
                return t5 && "object" === r2(t5) && "function" == typeof t5.copy && "function" == typeof t5.fill && "function" == typeof t5.readUInt8;
            };
        },
        function(t2, e3) {
            "function" == typeof Object.create ? t2.exports = function(t5, e25) {
                t5.super_ = e25, t5.prototype = Object.create(e25.prototype, {
                    constructor: {
                        value: t5,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
            } : t2.exports = function(t5, e25) {
                t5.super_ = e25;
                var r2 = function() {
                };
                r2.prototype = e25.prototype, t5.prototype = new r2, t5.prototype.constructor = t5;
            };
        },
        function(module, exports, __webpack_require__) {
            "use strict";
            var Long = __webpack_require__(23).Long, Double = __webpack_require__(38).Double, Timestamp = __webpack_require__(39).Timestamp, ObjectID = __webpack_require__(40).ObjectID, _Symbol = __webpack_require__(42).Symbol, Code = __webpack_require__(43).Code, MinKey = __webpack_require__(45).MinKey, MaxKey = __webpack_require__(46).MaxKey, Decimal128 = __webpack_require__(44), Int32 = __webpack_require__(60), DBRef = __webpack_require__(47).DBRef, BSONRegExp = __webpack_require__(41).BSONRegExp, Binary = __webpack_require__(27).Binary, utils = __webpack_require__(16), deserialize = function(t2, e3, r2) {
                var n52 = (e3 = null == e3 ? {
                } : e3) && e3.index ? e3.index : 0, o62 = t2[n52] | t2[n52 + 1] << 8 | t2[n52 + 2] << 16 | t2[n52 + 3] << 24;
                if (o62 < 5 || t2.length < o62 || o62 + n52 > t2.length) throw new Error("corrupt bson message");
                if (0 !== t2[n52 + o62 - 1]) throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");
                return deserializeObject(t2, n52, e3, r2);
            }, deserializeObject = function t2(e3, r2, n52, o62) {
                var i36 = null != n52.evalFunctions && n52.evalFunctions, s30 = null != n52.cacheFunctions && n52.cacheFunctions, a39 = null != n52.cacheFunctionsCrc32 && n52.cacheFunctionsCrc32;
                if (!a39) var u39 = null;
                var c23 = null == n52.fieldsAsRaw ? null : n52.fieldsAsRaw, l23 = null != n52.raw && n52.raw, f20 = "boolean" == typeof n52.bsonRegExp && n52.bsonRegExp, p17 = null != n52.promoteBuffers && n52.promoteBuffers, h11 = null == n52.promoteLongs || n52.promoteLongs, y14 = null == n52.promoteValues || n52.promoteValues, d15 = r2;
                if (e3.length < 5) throw new Error("corrupt bson message < 5 bytes long");
                var _2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24;
                if (_2 < 5 || _2 > e3.length) throw new Error("corrupt bson message");
                for(var v6 = o62 ? [] : {
                }, m2 = 0;;){
                    var g5 = e3[r2++];
                    if (0 === g5) break;
                    for(var b5 = r2; 0 !== e3[b5] && b5 < e3.length;)b5++;
                    if (b5 >= e3.length) throw new Error("Bad BSON Document: illegal CString");
                    var w6 = o62 ? m2++ : e3.toString("utf8", r2, b5);
                    if (r2 = b5 + 1, g5 === BSON.BSON_DATA_STRING) {
                        var O4 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24;
                        if (O4 <= 0 || O4 > e3.length - r2 || 0 !== e3[r2 + O4 - 1]) throw new Error("bad string length in bson");
                        v6[w6] = e3.toString("utf8", r2, r2 + O4 - 1), r2 += O4;
                    } else if (g5 === BSON.BSON_DATA_OID) {
                        var S4 = utils.allocBuffer(12);
                        e3.copy(S4, 0, r2, r2 + 12), v6[w6] = new ObjectID(S4), r2 += 12;
                    } else if (g5 === BSON.BSON_DATA_INT && false === y14) v6[w6] = new Int32(e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24);
                    else if (g5 === BSON.BSON_DATA_INT) v6[w6] = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24;
                    else if (g5 === BSON.BSON_DATA_NUMBER && false === y14) v6[w6] = new Double(e3.readDoubleLE(r2)), r2 += 8;
                    else if (g5 === BSON.BSON_DATA_NUMBER) v6[w6] = e3.readDoubleLE(r2), r2 += 8;
                    else if (g5 === BSON.BSON_DATA_DATE) {
                        var A2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24, $2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24;
                        v6[w6] = new Date(new Long(A2, $2).toNumber());
                    } else if (g5 === BSON.BSON_DATA_BOOLEAN) {
                        if (0 !== e3[r2] && 1 !== e3[r2]) throw new Error("illegal boolean type value");
                        v6[w6] = 1 === e3[r2++];
                    } else if (g5 === BSON.BSON_DATA_OBJECT) {
                        var E3 = r2, j2 = e3[r2] | e3[r2 + 1] << 8 | e3[r2 + 2] << 16 | e3[r2 + 3] << 24;
                        if (j2 <= 0 || j2 > e3.length - r2) throw new Error("bad embedded document length in bson");
                        v6[w6] = l23 ? e3.slice(r2, r2 + j2) : t2(e3, E3, n52, false), r2 += j2;
                    } else if (g5 === BSON.BSON_DATA_ARRAY) {
                        E3 = r2;
                        var P2 = n52, x4 = r2 + (j2 = e3[r2] | e3[r2 + 1] << 8 | e3[r2 + 2] << 16 | e3[r2 + 3] << 24);
                        if (c23 && c23[w6]) {
                            for(var T2 in P2 = {
                            }, n52)P2[T2] = n52[T2];
                            P2.raw = true;
                        }
                        if (v6[w6] = t2(e3, E3, P2, true), 0 !== e3[(r2 += j2) - 1]) throw new Error("invalid array terminator byte");
                        if (r2 !== x4) throw new Error("corrupted array bson");
                    } else if (g5 === BSON.BSON_DATA_UNDEFINED) v6[w6] = void 0;
                    else if (g5 === BSON.BSON_DATA_NULL) v6[w6] = null;
                    else if (g5 === BSON.BSON_DATA_LONG) {
                        A2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24, $2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24;
                        var N3 = new Long(A2, $2);
                        v6[w6] = h11 && true === y14 && N3.lessThanOrEqual(JS_INT_MAX_LONG) && N3.greaterThanOrEqual(JS_INT_MIN_LONG) ? N3.toNumber() : N3;
                    } else if (g5 === BSON.BSON_DATA_DECIMAL128) {
                        var k2 = utils.allocBuffer(16);
                        e3.copy(k2, 0, r2, r2 + 16), r2 += 16;
                        var B2 = new Decimal128(k2);
                        v6[w6] = B2.toObject ? B2.toObject() : B2;
                    } else if (g5 === BSON.BSON_DATA_BINARY) {
                        var R2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24, C3 = R2, D = e3[r2++];
                        if (R2 < 0) throw new Error("Negative binary type element size found");
                        if (R2 > e3.length) throw new Error("Binary type size larger than document size");
                        if (null != e3.slice) {
                            if (D === Binary.SUBTYPE_BYTE_ARRAY) {
                                if ((R2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24) < 0) throw new Error("Negative binary type element size found for subtype 0x02");
                                if (R2 > C3 - 4) throw new Error("Binary type with subtype 0x02 contains to long binary size");
                                if (R2 < C3 - 4) throw new Error("Binary type with subtype 0x02 contains to short binary size");
                            }
                            v6[w6] = p17 && y14 ? e3.slice(r2, r2 + R2) : new Binary(e3.slice(r2, r2 + R2), D);
                        } else {
                            var M4 = "undefined" != typeof Uint8Array ? new Uint8Array(new ArrayBuffer(R2)) : new Array(R2);
                            if (D === Binary.SUBTYPE_BYTE_ARRAY) {
                                if ((R2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24) < 0) throw new Error("Negative binary type element size found for subtype 0x02");
                                if (R2 > C3 - 4) throw new Error("Binary type with subtype 0x02 contains to long binary size");
                                if (R2 < C3 - 4) throw new Error("Binary type with subtype 0x02 contains to short binary size");
                            }
                            for(b5 = 0; b5 < R2; b5++)M4[b5] = e3[r2 + b5];
                            v6[w6] = p17 && y14 ? M4 : new Binary(M4, D);
                        }
                        r2 += R2;
                    } else if (g5 === BSON.BSON_DATA_REGEXP && false === f20) {
                        for(b5 = r2; 0 !== e3[b5] && b5 < e3.length;)b5++;
                        if (b5 >= e3.length) throw new Error("Bad BSON Document: illegal CString");
                        var I = e3.toString("utf8", r2, b5);
                        for(b5 = r2 = b5 + 1; 0 !== e3[b5] && b5 < e3.length;)b5++;
                        if (b5 >= e3.length) throw new Error("Bad BSON Document: illegal CString");
                        var F4 = e3.toString("utf8", r2, b5);
                        r2 = b5 + 1;
                        var L4 = new Array(F4.length);
                        for(b5 = 0; b5 < F4.length; b5++)switch(F4[b5]){
                            case "m":
                                L4[b5] = "m";
                                break;
                            case "s":
                                L4[b5] = "g";
                                break;
                            case "i":
                                L4[b5] = "i";
                        }
                        v6[w6] = new RegExp(I, L4.join(""));
                    } else if (g5 === BSON.BSON_DATA_REGEXP && true === f20) {
                        for(b5 = r2; 0 !== e3[b5] && b5 < e3.length;)b5++;
                        if (b5 >= e3.length) throw new Error("Bad BSON Document: illegal CString");
                        for(I = e3.toString("utf8", r2, b5), b5 = r2 = b5 + 1; 0 !== e3[b5] && b5 < e3.length;)b5++;
                        if (b5 >= e3.length) throw new Error("Bad BSON Document: illegal CString");
                        F4 = e3.toString("utf8", r2, b5), r2 = b5 + 1, v6[w6] = new BSONRegExp(I, F4);
                    } else if (g5 === BSON.BSON_DATA_SYMBOL) {
                        if ((O4 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24) <= 0 || O4 > e3.length - r2 || 0 !== e3[r2 + O4 - 1]) throw new Error("bad string length in bson");
                        v6[w6] = new _Symbol(e3.toString("utf8", r2, r2 + O4 - 1)), r2 += O4;
                    } else if (g5 === BSON.BSON_DATA_TIMESTAMP) A2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24, $2 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24, v6[w6] = new Timestamp(A2, $2);
                    else if (g5 === BSON.BSON_DATA_MIN_KEY) v6[w6] = new MinKey;
                    else if (g5 === BSON.BSON_DATA_MAX_KEY) v6[w6] = new MaxKey;
                    else if (g5 === BSON.BSON_DATA_CODE) {
                        if ((O4 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24) <= 0 || O4 > e3.length - r2 || 0 !== e3[r2 + O4 - 1]) throw new Error("bad string length in bson");
                        var U3 = e3.toString("utf8", r2, r2 + O4 - 1);
                        if (i36) {
                            if (s30) {
                                var V3 = a39 ? u39(U3) : U3;
                                v6[w6] = isolateEvalWithHash(functionCache, V3, U3, v6);
                            } else v6[w6] = isolateEval(U3);
                        } else v6[w6] = new Code(U3);
                        r2 += O4;
                    } else if (g5 === BSON.BSON_DATA_CODE_W_SCOPE) {
                        var q3 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24;
                        if (q3 < 13) throw new Error("code_w_scope total size shorter minimum expected length");
                        if ((O4 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24) <= 0 || O4 > e3.length - r2 || 0 !== e3[r2 + O4 - 1]) throw new Error("bad string length in bson");
                        U3 = e3.toString("utf8", r2, r2 + O4 - 1), E3 = r2 += O4, j2 = e3[r2] | e3[r2 + 1] << 8 | e3[r2 + 2] << 16 | e3[r2 + 3] << 24;
                        var W3 = t2(e3, E3, n52, false);
                        if (r2 += j2, q3 < 8 + j2 + O4) throw new Error("code_w_scope total size is to short, truncating scope");
                        if (q3 > 8 + j2 + O4) throw new Error("code_w_scope total size is to long, clips outer document");
                        i36 ? (s30 ? (V3 = a39 ? u39(U3) : U3, v6[w6] = isolateEvalWithHash(functionCache, V3, U3, v6)) : v6[w6] = isolateEval(U3), v6[w6].scope = W3) : v6[w6] = new Code(U3, W3);
                    } else {
                        if (g5 !== BSON.BSON_DATA_DBPOINTER) throw new Error("Detected unknown BSON type " + g5.toString(16) + ' for fieldname "' + w6 + '", are you using the latest BSON parser');
                        if ((O4 = e3[r2++] | e3[r2++] << 8 | e3[r2++] << 16 | e3[r2++] << 24) <= 0 || O4 > e3.length - r2 || 0 !== e3[r2 + O4 - 1]) throw new Error("bad string length in bson");
                        var H = e3.toString("utf8", r2, r2 + O4 - 1);
                        r2 += O4;
                        var Y3 = utils.allocBuffer(12);
                        e3.copy(Y3, 0, r2, r2 + 12), S4 = new ObjectID(Y3), r2 += 12;
                        var K3 = H.split("."), z = K3.shift(), Q = K3.join(".");
                        v6[w6] = new DBRef(Q, S4, z);
                    }
                }
                if (_2 !== r2 - d15) {
                    if (o62) throw new Error("corrupt array bson");
                    throw new Error("corrupt object bson");
                }
                return null != v6.$id && (v6 = new DBRef(v6.$ref, v6.$id, v6.$db)), v6;
            }, isolateEvalWithHash = function isolateEvalWithHash1(functionCache, hash, functionString, object) {
                var value = null;
                return null == functionCache[hash] && (eval("value = " + functionString), functionCache[hash] = value), functionCache[hash].bind(object);
            }, isolateEval = function isolateEval1(functionString) {
                var value = null;
                return eval("value = " + functionString), value;
            }, BSON = {
            }, functionCache = BSON.functionCache = {
            };
            BSON.BSON_DATA_NUMBER = 1, BSON.BSON_DATA_STRING = 2, BSON.BSON_DATA_OBJECT = 3, BSON.BSON_DATA_ARRAY = 4, BSON.BSON_DATA_BINARY = 5, BSON.BSON_DATA_UNDEFINED = 6, BSON.BSON_DATA_OID = 7, BSON.BSON_DATA_BOOLEAN = 8, BSON.BSON_DATA_DATE = 9, BSON.BSON_DATA_NULL = 10, BSON.BSON_DATA_REGEXP = 11, BSON.BSON_DATA_DBPOINTER = 12, BSON.BSON_DATA_CODE = 13, BSON.BSON_DATA_SYMBOL = 14, BSON.BSON_DATA_CODE_W_SCOPE = 15, BSON.BSON_DATA_INT = 16, BSON.BSON_DATA_TIMESTAMP = 17, BSON.BSON_DATA_LONG = 18, BSON.BSON_DATA_DECIMAL128 = 19, BSON.BSON_DATA_MIN_KEY = 255, BSON.BSON_DATA_MAX_KEY = 127, BSON.BSON_BINARY_SUBTYPE_DEFAULT = 0, BSON.BSON_BINARY_SUBTYPE_FUNCTION = 1, BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2, BSON.BSON_BINARY_SUBTYPE_UUID = 3, BSON.BSON_BINARY_SUBTYPE_MD5 = 4, BSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128, BSON.BSON_INT32_MAX = 2147483647, BSON.BSON_INT32_MIN = -2147483648, BSON.BSON_INT64_MAX = Math.pow(2, 63) - 1, BSON.BSON_INT64_MIN = -Math.pow(2, 63), BSON.JS_INT_MAX = 9007199254740992, BSON.JS_INT_MIN = -9007199254740992;
            var JS_INT_MAX_LONG = Long.fromNumber(9007199254740992), JS_INT_MIN_LONG = Long.fromNumber(-9007199254740992);
            module.exports = deserialize;
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e25) {
                function n52(t5) {
                    return (n52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                        return typeof t7;
                    } : function(t7) {
                        return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                    })(t5);
                }
                var o62 = r2(106).writeIEEE754, i36 = r2(23).Long, s30 = r2(59), a39 = r2(27).Binary, u39 = r2(16).normalizedFunctionString, c23 = /\x00/, l23 = [
                    "$db",
                    "$ref",
                    "$id",
                    "$clusterTime"
                ], f20 = function(t5) {
                    return "object" === n52(t5) && "[object Date]" === Object.prototype.toString.call(t5);
                }, p17 = function(t5) {
                    return "[object RegExp]" === Object.prototype.toString.call(t5);
                }, h11 = function(t5, e29, r40, n64, o64) {
                    t5[n64++] = R3.BSON_DATA_STRING;
                    var i37 = o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8");
                    t5[(n64 = n64 + i37 + 1) - 1] = 0;
                    var s31 = t5.write(r40, n64 + 4, "utf8");
                    return t5[n64 + 3] = s31 + 1 >> 24 & 255, t5[n64 + 2] = s31 + 1 >> 16 & 255, t5[n64 + 1] = s31 + 1 >> 8 & 255, t5[n64] = s31 + 1 & 255, n64 = n64 + 4 + s31, t5[n64++] = 0, n64;
                }, y14 = function(t5, e29, r40, n64, s31) {
                    if (Math.floor(r40) === r40 && r40 >= R3.JS_INT_MIN && r40 <= R3.JS_INT_MAX) {
                        if (r40 >= R3.BSON_INT32_MIN && r40 <= R3.BSON_INT32_MAX) {
                            t5[n64++] = R3.BSON_DATA_INT;
                            var a40 = s31 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8");
                            n64 += a40, t5[n64++] = 0, t5[n64++] = 255 & r40, t5[n64++] = r40 >> 8 & 255, t5[n64++] = r40 >> 16 & 255, t5[n64++] = r40 >> 24 & 255;
                        } else if (r40 >= R3.JS_INT_MIN && r40 <= R3.JS_INT_MAX) t5[n64++] = R3.BSON_DATA_NUMBER, n64 += a40 = s31 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, o62(t5, r40, n64, "little", 52, 8), n64 += 8;
                        else {
                            t5[n64++] = R3.BSON_DATA_LONG, n64 += a40 = s31 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0;
                            var u41 = i36.fromNumber(r40), c30 = u41.getLowBits(), l25 = u41.getHighBits();
                            t5[n64++] = 255 & c30, t5[n64++] = c30 >> 8 & 255, t5[n64++] = c30 >> 16 & 255, t5[n64++] = c30 >> 24 & 255, t5[n64++] = 255 & l25, t5[n64++] = l25 >> 8 & 255, t5[n64++] = l25 >> 16 & 255, t5[n64++] = l25 >> 24 & 255;
                        }
                    } else t5[n64++] = R3.BSON_DATA_NUMBER, n64 += a40 = s31 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, o62(t5, r40, n64, "little", 52, 8), n64 += 8;
                    return n64;
                }, d15 = function(t5, e29, r40, n64, o64) {
                    return t5[n64++] = R3.BSON_DATA_NULL, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, n64;
                }, _2 = function(t5, e29, r40, n64, o64) {
                    return t5[n64++] = R3.BSON_DATA_BOOLEAN, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, t5[n64++] = r40 ? 1 : 0, n64;
                }, v6 = function(t5, e29, r40, n64, o64) {
                    t5[n64++] = R3.BSON_DATA_DATE, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0;
                    var s31 = i36.fromNumber(r40.getTime()), a41 = s31.getLowBits(), u42 = s31.getHighBits();
                    return t5[n64++] = 255 & a41, t5[n64++] = a41 >> 8 & 255, t5[n64++] = a41 >> 16 & 255, t5[n64++] = a41 >> 24 & 255, t5[n64++] = 255 & u42, t5[n64++] = u42 >> 8 & 255, t5[n64++] = u42 >> 16 & 255, t5[n64++] = u42 >> 24 & 255, n64;
                }, m2 = function(t5, e29, r40, n64, o64) {
                    if (t5[n64++] = R3.BSON_DATA_REGEXP, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, r40.source && null != r40.source.match(c23)) throw Error("value " + r40.source + " must not contain null bytes");
                    return n64 += t5.write(r40.source, n64, "utf8"), t5[n64++] = 0, r40.global && (t5[n64++] = 115), r40.ignoreCase && (t5[n64++] = 105), r40.multiline && (t5[n64++] = 109), t5[n64++] = 0, n64;
                }, g6 = function(t5, e29, r40, n64, o64) {
                    if (t5[n64++] = R3.BSON_DATA_REGEXP, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, null != r40.pattern.match(c23)) throw Error("pattern " + r40.pattern + " must not contain null bytes");
                    return n64 += t5.write(r40.pattern, n64, "utf8"), t5[n64++] = 0, n64 += t5.write(r40.options.split("").sort().join(""), n64, "utf8"), t5[n64++] = 0, n64;
                }, b6 = function(t5, e29, r40, n64, o64) {
                    return null === r40 ? t5[n64++] = R3.BSON_DATA_NULL : "MinKey" === r40._bsontype ? t5[n64++] = R3.BSON_DATA_MIN_KEY : t5[n64++] = R3.BSON_DATA_MAX_KEY, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, n64;
                }, w7 = function(t5, e29, r40, n64, o64) {
                    if (t5[n64++] = R3.BSON_DATA_OID, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, "string" == typeof r40.id) t5.write(r40.id, n64, "binary");
                    else {
                        if (!r40.id || !r40.id.copy) throw new Error("object [" + JSON.stringify(r40) + "] is not a valid ObjectId");
                        r40.id.copy(t5, n64, 0, 12);
                    }
                    return n64 + 12;
                }, O6 = function(t5, e29, r40, n64, o64) {
                    t5[n64++] = R3.BSON_DATA_BINARY, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0;
                    var i37 = r40.length;
                    return t5[n64++] = 255 & i37, t5[n64++] = i37 >> 8 & 255, t5[n64++] = i37 >> 16 & 255, t5[n64++] = i37 >> 24 & 255, t5[n64++] = R3.BSON_BINARY_SUBTYPE_DEFAULT, r40.copy(t5, n64, 0, i37), n64 += i37;
                }, S6 = function(t5, e29, r40, n64, o64, i37, s31, a41, u42, c31) {
                    for(var l26 = 0; l26 < c31.length; l26++)if (c31[l26] === r40) throw new Error("cyclic dependency detected");
                    c31.push(r40), t5[n64++] = Array.isArray(r40) ? R3.BSON_DATA_ARRAY : R3.BSON_DATA_OBJECT, n64 += u42 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0;
                    var f22 = B3(t5, r40, o64, n64, i37 + 1, s31, a41, c31);
                    return c31.pop(), f22;
                }, A3 = function(t5, e29, r40, n64, o64) {
                    return t5[n64++] = R3.BSON_DATA_DECIMAL128, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, r40.bytes.copy(t5, n64, 0, 16), n64 + 16;
                }, $3 = function(t5, e29, r40, n64, o64) {
                    t5[n64++] = "Long" === r40._bsontype ? R3.BSON_DATA_LONG : R3.BSON_DATA_TIMESTAMP, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0;
                    var i37 = r40.getLowBits(), s31 = r40.getHighBits();
                    return t5[n64++] = 255 & i37, t5[n64++] = i37 >> 8 & 255, t5[n64++] = i37 >> 16 & 255, t5[n64++] = i37 >> 24 & 255, t5[n64++] = 255 & s31, t5[n64++] = s31 >> 8 & 255, t5[n64++] = s31 >> 16 & 255, t5[n64++] = s31 >> 24 & 255, n64;
                }, E4 = function(t5, e29, r40, n64, o64) {
                    return t5[n64++] = R3.BSON_DATA_INT, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, t5[n64++] = 255 & r40, t5[n64++] = r40 >> 8 & 255, t5[n64++] = r40 >> 16 & 255, t5[n64++] = r40 >> 24 & 255, n64;
                }, j4 = function(t5, e29, r40, n64, i37) {
                    return t5[n64++] = R3.BSON_DATA_NUMBER, n64 += i37 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0, o62(t5, r40, n64, "little", 52, 8), n64 += 8;
                }, P3 = function(t5, e29, r40, n64, o64, i37, s31) {
                    t5[n64++] = R3.BSON_DATA_CODE, n64 += s31 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0;
                    var a41 = u39(r40), c31 = t5.write(a41, n64 + 4, "utf8") + 1;
                    return t5[n64] = 255 & c31, t5[n64 + 1] = c31 >> 8 & 255, t5[n64 + 2] = c31 >> 16 & 255, t5[n64 + 3] = c31 >> 24 & 255, n64 = n64 + 4 + c31 - 1, t5[n64++] = 0, n64;
                }, x5 = function(t5, e29, r40, o64, i37, s31, a41, u42, c31) {
                    if (r40.scope && "object" === n52(r40.scope)) {
                        t5[o64++] = R3.BSON_DATA_CODE_W_SCOPE;
                        var l26 = c31 ? t5.write(e29, o64, "ascii") : t5.write(e29, o64, "utf8");
                        o64 += l26, t5[o64++] = 0;
                        var f22 = o64, p18 = "string" == typeof r40.code ? r40.code : r40.code.toString();
                        o64 += 4;
                        var h12 = t5.write(p18, o64 + 4, "utf8") + 1;
                        t5[o64] = 255 & h12, t5[o64 + 1] = h12 >> 8 & 255, t5[o64 + 2] = h12 >> 16 & 255, t5[o64 + 3] = h12 >> 24 & 255, t5[o64 + 4 + h12 - 1] = 0, o64 = o64 + h12 + 4;
                        var y15 = B3(t5, r40.scope, i37, o64, s31 + 1, a41, u42);
                        o64 = y15 - 1;
                        var d16 = y15 - f22;
                        t5[f22++] = 255 & d16, t5[f22++] = d16 >> 8 & 255, t5[f22++] = d16 >> 16 & 255, t5[f22++] = d16 >> 24 & 255, t5[o64++] = 0;
                    } else {
                        t5[o64++] = R3.BSON_DATA_CODE, o64 += l26 = c31 ? t5.write(e29, o64, "ascii") : t5.write(e29, o64, "utf8"), t5[o64++] = 0, p18 = r40.code.toString();
                        var _10 = t5.write(p18, o64 + 4, "utf8") + 1;
                        t5[o64] = 255 & _10, t5[o64 + 1] = _10 >> 8 & 255, t5[o64 + 2] = _10 >> 16 & 255, t5[o64 + 3] = _10 >> 24 & 255, o64 = o64 + 4 + _10 - 1, t5[o64++] = 0;
                    }
                    return o64;
                }, T4 = function(t5, e29, r40, n64, o64) {
                    t5[n64++] = R3.BSON_DATA_BINARY, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0;
                    var i37 = r40.value(true), s31 = r40.position;
                    return r40.sub_type === a39.SUBTYPE_BYTE_ARRAY && (s31 += 4), t5[n64++] = 255 & s31, t5[n64++] = s31 >> 8 & 255, t5[n64++] = s31 >> 16 & 255, t5[n64++] = s31 >> 24 & 255, t5[n64++] = r40.sub_type, r40.sub_type === a39.SUBTYPE_BYTE_ARRAY && (s31 -= 4, t5[n64++] = 255 & s31, t5[n64++] = s31 >> 8 & 255, t5[n64++] = s31 >> 16 & 255, t5[n64++] = s31 >> 24 & 255), i37.copy(t5, n64, 0, r40.position), n64 += r40.position;
                }, N4 = function(t5, e29, r40, n64, o64) {
                    t5[n64++] = R3.BSON_DATA_SYMBOL, n64 += o64 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0;
                    var i37 = t5.write(r40.value, n64 + 4, "utf8") + 1;
                    return t5[n64] = 255 & i37, t5[n64 + 1] = i37 >> 8 & 255, t5[n64 + 2] = i37 >> 16 & 255, t5[n64 + 3] = i37 >> 24 & 255, n64 = n64 + 4 + i37 - 1, t5[n64++] = 0, n64;
                }, k3 = function(t5, e29, r40, n64, o64, i37, s31) {
                    t5[n64++] = R3.BSON_DATA_OBJECT, n64 += s31 ? t5.write(e29, n64, "ascii") : t5.write(e29, n64, "utf8"), t5[n64++] = 0;
                    var a41, u42 = n64, c31 = (a41 = null != r40.db ? B3(t5, {
                        $ref: r40.namespace,
                        $id: r40.oid,
                        $db: r40.db
                    }, false, n64, o64 + 1, i37) : B3(t5, {
                        $ref: r40.namespace,
                        $id: r40.oid
                    }, false, n64, o64 + 1, i37)) - u42;
                    return t5[u42++] = 255 & c31, t5[u42++] = c31 >> 8 & 255, t5[u42++] = c31 >> 16 & 255, t5[u42++] = c31 >> 24 & 255, a41;
                }, B3 = function(t5, r40, o64, i37, a41, u42, B4, R3) {
                    i37 = i37 || 0, (R3 = R3 || []).push(r40);
                    var C4 = i37 + 4;
                    if (Array.isArray(r40)) for(var D = 0; D < r40.length; D++){
                        var M5 = "" + D, I = r40[D];
                        if (I && I.toBSON) {
                            if ("function" != typeof I.toBSON) throw new Error("toBSON is not a function");
                            I = I.toBSON();
                        }
                        var F5 = n52(I);
                        if ("string" === F5) C4 = h11(t5, M5, I, C4, true);
                        else if ("number" === F5) C4 = y14(t5, M5, I, C4, true);
                        else {
                            if ("bigint" === F5) throw new TypeError("Unsupported type BigInt, please use Decimal128");
                            if ("boolean" === F5) C4 = _2(t5, M5, I, C4, true);
                            else if (I instanceof Date || f20(I)) C4 = v6(t5, M5, I, C4, true);
                            else if ((void 0) === I) C4 = d15(t5, M5, 0, C4, true);
                            else if (null === I) C4 = d15(t5, M5, 0, C4, true);
                            else if ("ObjectID" === I._bsontype || "ObjectId" === I._bsontype) C4 = w7(t5, M5, I, C4, true);
                            else if (e25.isBuffer(I)) C4 = O6(t5, M5, I, C4, true);
                            else if (I instanceof RegExp || p17(I)) C4 = m2(t5, M5, I, C4, true);
                            else if ("object" === F5 && null == I._bsontype) C4 = S6(t5, M5, I, C4, o64, a41, u42, B4, true, R3);
                            else if ("object" === F5 && "Decimal128" === I._bsontype) C4 = A3(t5, M5, I, C4, true);
                            else if ("Long" === I._bsontype || "Timestamp" === I._bsontype) C4 = $3(t5, M5, I, C4, true);
                            else if ("Double" === I._bsontype) C4 = j4(t5, M5, I, C4, true);
                            else if ("function" == typeof I && u42) C4 = P3(t5, M5, I, C4, 0, 0, u42);
                            else if ("Code" === I._bsontype) C4 = x5(t5, M5, I, C4, o64, a41, u42, B4, true);
                            else if ("Binary" === I._bsontype) C4 = T4(t5, M5, I, C4, true);
                            else if ("Symbol" === I._bsontype) C4 = N4(t5, M5, I, C4, true);
                            else if ("DBRef" === I._bsontype) C4 = k3(t5, M5, I, C4, a41, u42, true);
                            else if ("BSONRegExp" === I._bsontype) C4 = g6(t5, M5, I, C4, true);
                            else if ("Int32" === I._bsontype) C4 = E4(t5, M5, I, C4, true);
                            else if ("MinKey" === I._bsontype || "MaxKey" === I._bsontype) C4 = b6(t5, M5, I, C4, true);
                            else if ((void 0) !== I._bsontype) throw new TypeError("Unrecognized or invalid _bsontype: " + I._bsontype);
                        }
                    }
                    else if (r40 instanceof s30) for(var L5 = r40.entries(), U4 = false; !U4;){
                        var V4 = L5.next();
                        if (!(U4 = V4.done)) {
                            if (M5 = V4.value[0], F5 = n52(I = V4.value[1]), "string" == typeof M5 && -1 === l23.indexOf(M5)) {
                                if (null != M5.match(c23)) throw Error("key " + M5 + " must not contain null bytes");
                                if (o64) {
                                    if ("$" === M5[0]) throw Error("key " + M5 + " must not start with '$'");
                                    if (~M5.indexOf(".")) throw Error("key " + M5 + " must not contain '.'");
                                }
                            }
                            if ("string" === F5) C4 = h11(t5, M5, I, C4);
                            else if ("number" === F5) C4 = y14(t5, M5, I, C4);
                            else {
                                if ("bigint" === F5) throw new TypeError("Unsupported type BigInt, please use Decimal128");
                                if ("boolean" === F5) C4 = _2(t5, M5, I, C4);
                                else if (I instanceof Date || f20(I)) C4 = v6(t5, M5, I, C4);
                                else if (null === I || (void 0) === I && false === B4) C4 = d15(t5, M5, 0, C4);
                                else if ("ObjectID" === I._bsontype || "ObjectId" === I._bsontype) C4 = w7(t5, M5, I, C4);
                                else if (e25.isBuffer(I)) C4 = O6(t5, M5, I, C4);
                                else if (I instanceof RegExp || p17(I)) C4 = m2(t5, M5, I, C4);
                                else if ("object" === F5 && null == I._bsontype) C4 = S6(t5, M5, I, C4, o64, a41, u42, B4, false, R3);
                                else if ("object" === F5 && "Decimal128" === I._bsontype) C4 = A3(t5, M5, I, C4);
                                else if ("Long" === I._bsontype || "Timestamp" === I._bsontype) C4 = $3(t5, M5, I, C4);
                                else if ("Double" === I._bsontype) C4 = j4(t5, M5, I, C4);
                                else if ("Code" === I._bsontype) C4 = x5(t5, M5, I, C4, o64, a41, u42, B4);
                                else if ("function" == typeof I && u42) C4 = P3(t5, M5, I, C4, 0, 0, u42);
                                else if ("Binary" === I._bsontype) C4 = T4(t5, M5, I, C4);
                                else if ("Symbol" === I._bsontype) C4 = N4(t5, M5, I, C4);
                                else if ("DBRef" === I._bsontype) C4 = k3(t5, M5, I, C4, a41, u42);
                                else if ("BSONRegExp" === I._bsontype) C4 = g6(t5, M5, I, C4);
                                else if ("Int32" === I._bsontype) C4 = E4(t5, M5, I, C4);
                                else if ("MinKey" === I._bsontype || "MaxKey" === I._bsontype) C4 = b6(t5, M5, I, C4);
                                else if ((void 0) !== I._bsontype) throw new TypeError("Unrecognized or invalid _bsontype: " + I._bsontype);
                            }
                        }
                    }
                    else {
                        if (r40.toBSON) {
                            if ("function" != typeof r40.toBSON) throw new Error("toBSON is not a function");
                            if (null != (r40 = r40.toBSON()) && "object" !== n52(r40)) throw new Error("toBSON function did not return an object");
                        }
                        for(M5 in r40){
                            if ((I = r40[M5]) && I.toBSON) {
                                if ("function" != typeof I.toBSON) throw new Error("toBSON is not a function");
                                I = I.toBSON();
                            }
                            if (F5 = n52(I), "string" == typeof M5 && -1 === l23.indexOf(M5)) {
                                if (null != M5.match(c23)) throw Error("key " + M5 + " must not contain null bytes");
                                if (o64) {
                                    if ("$" === M5[0]) throw Error("key " + M5 + " must not start with '$'");
                                    if (~M5.indexOf(".")) throw Error("key " + M5 + " must not contain '.'");
                                }
                            }
                            if ("string" === F5) C4 = h11(t5, M5, I, C4);
                            else if ("number" === F5) C4 = y14(t5, M5, I, C4);
                            else {
                                if ("bigint" === F5) throw new TypeError("Unsupported type BigInt, please use Decimal128");
                                if ("boolean" === F5) C4 = _2(t5, M5, I, C4);
                                else if (I instanceof Date || f20(I)) C4 = v6(t5, M5, I, C4);
                                else if ((void 0) === I) false === B4 && (C4 = d15(t5, M5, 0, C4));
                                else if (null === I) C4 = d15(t5, M5, 0, C4);
                                else if ("ObjectID" === I._bsontype || "ObjectId" === I._bsontype) C4 = w7(t5, M5, I, C4);
                                else if (e25.isBuffer(I)) C4 = O6(t5, M5, I, C4);
                                else if (I instanceof RegExp || p17(I)) C4 = m2(t5, M5, I, C4);
                                else if ("object" === F5 && null == I._bsontype) C4 = S6(t5, M5, I, C4, o64, a41, u42, B4, false, R3);
                                else if ("object" === F5 && "Decimal128" === I._bsontype) C4 = A3(t5, M5, I, C4);
                                else if ("Long" === I._bsontype || "Timestamp" === I._bsontype) C4 = $3(t5, M5, I, C4);
                                else if ("Double" === I._bsontype) C4 = j4(t5, M5, I, C4);
                                else if ("Code" === I._bsontype) C4 = x5(t5, M5, I, C4, o64, a41, u42, B4);
                                else if ("function" == typeof I && u42) C4 = P3(t5, M5, I, C4, 0, 0, u42);
                                else if ("Binary" === I._bsontype) C4 = T4(t5, M5, I, C4);
                                else if ("Symbol" === I._bsontype) C4 = N4(t5, M5, I, C4);
                                else if ("DBRef" === I._bsontype) C4 = k3(t5, M5, I, C4, a41, u42);
                                else if ("BSONRegExp" === I._bsontype) C4 = g6(t5, M5, I, C4);
                                else if ("Int32" === I._bsontype) C4 = E4(t5, M5, I, C4);
                                else if ("MinKey" === I._bsontype || "MaxKey" === I._bsontype) C4 = b6(t5, M5, I, C4);
                                else if ((void 0) !== I._bsontype) throw new TypeError("Unrecognized or invalid _bsontype: " + I._bsontype);
                            }
                        }
                    }
                    R3.pop(), t5[C4++] = 0;
                    var q4 = C4 - i37;
                    return t5[i37++] = 255 & q4, t5[i37++] = q4 >> 8 & 255, t5[i37++] = q4 >> 16 & 255, t5[i37++] = q4 >> 24 & 255, C4;
                }, R3 = {
                    BSON_DATA_NUMBER: 1,
                    BSON_DATA_STRING: 2,
                    BSON_DATA_OBJECT: 3,
                    BSON_DATA_ARRAY: 4,
                    BSON_DATA_BINARY: 5,
                    BSON_DATA_UNDEFINED: 6,
                    BSON_DATA_OID: 7,
                    BSON_DATA_BOOLEAN: 8,
                    BSON_DATA_DATE: 9,
                    BSON_DATA_NULL: 10,
                    BSON_DATA_REGEXP: 11,
                    BSON_DATA_CODE: 13,
                    BSON_DATA_SYMBOL: 14,
                    BSON_DATA_CODE_W_SCOPE: 15,
                    BSON_DATA_INT: 16,
                    BSON_DATA_TIMESTAMP: 17,
                    BSON_DATA_LONG: 18,
                    BSON_DATA_DECIMAL128: 19,
                    BSON_DATA_MIN_KEY: 255,
                    BSON_DATA_MAX_KEY: 127,
                    BSON_BINARY_SUBTYPE_DEFAULT: 0,
                    BSON_BINARY_SUBTYPE_FUNCTION: 1,
                    BSON_BINARY_SUBTYPE_BYTE_ARRAY: 2,
                    BSON_BINARY_SUBTYPE_UUID: 3,
                    BSON_BINARY_SUBTYPE_MD5: 4,
                    BSON_BINARY_SUBTYPE_USER_DEFINED: 128,
                    BSON_INT32_MAX: 2147483647,
                    BSON_INT32_MIN: -2147483648
                };
                R3.BSON_INT64_MAX = Math.pow(2, 63) - 1, R3.BSON_INT64_MIN = -Math.pow(2, 63), R3.JS_INT_MAX = 9007199254740992, R3.JS_INT_MIN = -9007199254740992, t2.exports = B3;
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3) {
            e3.readIEEE754 = function(t5, e25, r2, n52, o62) {
                var i36, s30, a39 = "big" === r2, u39 = 8 * o62 - n52 - 1, c23 = (1 << u39) - 1, l23 = c23 >> 1, f20 = -7, p17 = a39 ? 0 : o62 - 1, h11 = a39 ? 1 : -1, y14 = t5[e25 + p17];
                for(p17 += h11, i36 = y14 & (1 << -f20) - 1, y14 >>= -f20, f20 += u39; f20 > 0; i36 = 256 * i36 + t5[e25 + p17], p17 += h11, f20 -= 8);
                for(s30 = i36 & (1 << -f20) - 1, i36 >>= -f20, f20 += n52; f20 > 0; s30 = 256 * s30 + t5[e25 + p17], p17 += h11, f20 -= 8);
                if (0 === i36) i36 = 1 - l23;
                else {
                    if (i36 === c23) return s30 ? NaN : 1 / 0 * (y14 ? -1 : 1);
                    s30 += Math.pow(2, n52), i36 -= l23;
                }
                return (y14 ? -1 : 1) * s30 * Math.pow(2, i36 - n52);
            }, e3.writeIEEE754 = function(t5, e25, r2, n52, o62, i36) {
                var s30, a39, u39, c23 = "big" === n52, l23 = 8 * i36 - o62 - 1, f20 = (1 << l23) - 1, p17 = f20 >> 1, h11 = 23 === o62 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, y14 = c23 ? i36 - 1 : 0, d15 = c23 ? -1 : 1, _2 = e25 < 0 || 0 === e25 && 1 / e25 < 0 ? 1 : 0;
                for(e25 = Math.abs(e25), isNaN(e25) || e25 === 1 / 0 ? (a39 = isNaN(e25) ? 1 : 0, s30 = f20) : (s30 = Math.floor(Math.log(e25) / Math.LN2), e25 * (u39 = Math.pow(2, -s30)) < 1 && (s30--, u39 *= 2), (e25 += s30 + p17 >= 1 ? h11 / u39 : h11 * Math.pow(2, 1 - p17)) * u39 >= 2 && (s30++, u39 /= 2), s30 + p17 >= f20 ? (a39 = 0, s30 = f20) : s30 + p17 >= 1 ? (a39 = (e25 * u39 - 1) * Math.pow(2, o62), s30 += p17) : (a39 = e25 * Math.pow(2, p17 - 1) * Math.pow(2, o62), s30 = 0)); o62 >= 8; t5[r2 + y14] = 255 & a39, y14 += d15, a39 /= 256, o62 -= 8);
                for(s30 = s30 << o62 | a39, l23 += o62; l23 > 0; t5[r2 + y14] = 255 & s30, y14 += d15, s30 /= 256, l23 -= 8);
                t5[r2 + y14 - d15] |= 128 * _2;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e25) {
                function n52(t5) {
                    return (n52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                        return typeof t7;
                    } : function(t7) {
                        return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                    })(t5);
                }
                var o62 = r2(23).Long, i36 = r2(38).Double, s30 = r2(39).Timestamp, a39 = r2(40).ObjectID, u39 = r2(42).Symbol, c23 = r2(41).BSONRegExp, l23 = r2(43).Code, f20 = r2(44), p17 = r2(45).MinKey, h11 = r2(46).MaxKey, y14 = r2(47).DBRef, d15 = r2(27).Binary, _2 = r2(16).normalizedFunctionString, v6 = function(t5, e29, r40) {
                    var n64 = 5;
                    if (Array.isArray(t5)) for(var o64 = 0; o64 < t5.length; o64++)n64 += m2(o64.toString(), t5[o64], e29, true, r40);
                    else for(var i37 in t5.toBSON && (t5 = t5.toBSON()), t5)n64 += m2(i37, t5[i37], e29, false, r40);
                    return n64;
                };
                function m2(t5, r40, m5, b6, w7) {
                    switch(r40 && r40.toBSON && (r40 = r40.toBSON()), n52(r40)){
                        case "string":
                            return 1 + e25.byteLength(t5, "utf8") + 1 + 4 + e25.byteLength(r40, "utf8") + 1;
                        case "number":
                            return Math.floor(r40) === r40 && r40 >= g6.JS_INT_MIN && r40 <= g6.JS_INT_MAX && r40 >= g6.BSON_INT32_MIN && r40 <= g6.BSON_INT32_MAX ? (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 5 : (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 9;
                        case "undefined":
                            return b6 || !w7 ? (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1 : 0;
                        case "boolean":
                            return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 2;
                        case "object":
                            if (null == r40 || r40 instanceof p17 || r40 instanceof h11 || "MinKey" === r40._bsontype || "MaxKey" === r40._bsontype) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1;
                            if (r40 instanceof a39 || "ObjectID" === r40._bsontype || "ObjectId" === r40._bsontype) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 13;
                            if (r40 instanceof Date || "object" === n52(S6 = r40) && "[object Date]" === Object.prototype.toString.call(S6)) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 9;
                            if ((void 0) !== e25 && e25.isBuffer(r40)) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 6 + r40.length;
                            if (r40 instanceof o62 || r40 instanceof i36 || r40 instanceof s30 || "Long" === r40._bsontype || "Double" === r40._bsontype || "Timestamp" === r40._bsontype) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 9;
                            if (r40 instanceof f20 || "Decimal128" === r40._bsontype) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 17;
                            if (r40 instanceof l23 || "Code" === r40._bsontype) return null != r40.scope && Object.keys(r40.scope).length > 0 ? (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1 + 4 + 4 + e25.byteLength(r40.code.toString(), "utf8") + 1 + v6(r40.scope, m5, w7) : (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1 + 4 + e25.byteLength(r40.code.toString(), "utf8") + 1;
                            if (r40 instanceof d15 || "Binary" === r40._bsontype) return r40.sub_type === d15.SUBTYPE_BYTE_ARRAY ? (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + (r40.position + 1 + 4 + 1 + 4) : (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + (r40.position + 1 + 4 + 1);
                            if (r40 instanceof u39 || "Symbol" === r40._bsontype) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + e25.byteLength(r40.value, "utf8") + 4 + 1 + 1;
                            if (r40 instanceof y14 || "DBRef" === r40._bsontype) {
                                var O6 = {
                                    $ref: r40.namespace,
                                    $id: r40.oid
                                };
                                return null != r40.db && (O6.$db = r40.db), (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1 + v6(O6, m5, w7);
                            }
                            return r40 instanceof RegExp || "[object RegExp]" === Object.prototype.toString.call(r40) ? (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1 + e25.byteLength(r40.source, "utf8") + 1 + (r40.global ? 1 : 0) + (r40.ignoreCase ? 1 : 0) + (r40.multiline ? 1 : 0) + 1 : r40 instanceof c23 || "BSONRegExp" === r40._bsontype ? (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1 + e25.byteLength(r40.pattern, "utf8") + 1 + e25.byteLength(r40.options, "utf8") + 1 : (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + v6(r40, m5, w7) + 1;
                        case "function":
                            if (r40 instanceof RegExp || "[object RegExp]" === Object.prototype.toString.call(r40) || "[object RegExp]" === String.call(r40)) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1 + e25.byteLength(r40.source, "utf8") + 1 + (r40.global ? 1 : 0) + (r40.ignoreCase ? 1 : 0) + (r40.multiline ? 1 : 0) + 1;
                            if (m5 && null != r40.scope && Object.keys(r40.scope).length > 0) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1 + 4 + 4 + e25.byteLength(_2(r40), "utf8") + 1 + v6(r40.scope, m5, w7);
                            if (m5) return (null != t5 ? e25.byteLength(t5, "utf8") + 1 : 0) + 1 + 4 + e25.byteLength(_2(r40), "utf8") + 1;
                    }
                    var S6;
                    return 0;
                }
                var g6 = {
                    BSON_INT32_MAX: 2147483647,
                    BSON_INT32_MIN: -2147483648,
                    JS_INT_MAX: 9007199254740992,
                    JS_INT_MIN: -9007199254740992
                };
                t2.exports = v6;
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ t2.exports = r2(37).Decimal128;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) ObjectId
 * @constructor NodeMongoDbObjectId
 * @see ObjectId
 */ var n52 = r2(37).ObjectID;
            /*!
 * Getter for convenience with populate, see gh-6115
 */ Object.defineProperty(n52.prototype, "_id", {
                enumerable: false,
                configurable: true,
                get: function() {
                    return this;
                }
            }), /*!
 * ignore
 */ t2.exports = n52;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ t2.exports = function() {
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Dependencies
 */ var n52 = r2(112).ctor("require", "modify", "init", "default", "ignore");
            t2.exports = function() {
                this.strictMode = void 0, this.selected = void 0, this.shardval = void 0, this.saveError = void 0, this.validationError = void 0, this.adhocPaths = void 0, this.removing = void 0, this.inserting = void 0, this.saving = void 0, this.version = void 0, this.getters = {
                }, this._id = void 0, this.populate = void 0, this.populated = void 0, this.wasPopulated = false, this.scope = void 0, this.activePaths = new n52, this.pathsToScopes = {
                }, this.cachedRequired = {
                }, this.session = null, this.$setCalled = new Set, this.ownerDocument = void 0, this.fullPath = void 0;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n52 = r2(1), o62 = t2.exports = function() {
            };
            /*!
 * StateMachine represents a minimal `interface` for the
 * constructors it builds via StateMachine.ctor(...).
 *
 * @api private
 */ /*!
 * StateMachine.ctor('state1', 'state2', ...)
 * A factory method for subclassing StateMachine.
 * The arguments are a list of states. For each state,
 * the constructor's prototype gets state transition
 * methods named after each state. These transition methods
 * place their path argument into the given state.
 *
 * @param {String} state
 * @param {String} [state]
 * @return {Function} subclass constructor
 * @private
 */ o62.ctor = function() {
                var t5 = n52.args(arguments), e25 = function() {
                    o62.apply(this, arguments), this.paths = {
                    }, this.states = {
                    }, this.stateNames = t5;
                    for(var e29, r40 = t5.length; r40--;)e29 = t5[r40], this.states[e29] = {
                    };
                };
                return e25.prototype = new o62, t5.forEach(function(t7) {
                    e25.prototype[t7] = function(e29) {
                        this._changeState(e29, t7);
                    };
                }), e25;
            }, /*!
 * This function is wrapped by the state change functions:
 *
 * - `require(path)`
 * - `modify(path)`
 * - `init(path)`
 *
 * @api private
 */ o62.prototype._changeState = function(t5, e25) {
                var r40 = this.states[this.paths[t5]];
                r40 && delete r40[t5], this.paths[t5] = e25, this.states[e25][t5] = true;
            }, /*!
 * ignore
 */ o62.prototype.clear = function(t5) {
                for(var e25, r40 = Object.keys(this.states[t5]), n64 = r40.length; n64--;)e25 = r40[n64], delete this.states[t5][e25], delete this.paths[e25];
            }, /*!
 * Checks to see if at least one path is in the states passed in via `arguments`
 * e.g., this.some('required', 'inited')
 *
 * @param {String} state that we want to check for.
 * @private
 */ o62.prototype.some = function() {
                var t5 = this, e25 = arguments.length ? arguments : this.stateNames;
                return Array.prototype.some.call(e25, function(e29) {
                    return Object.keys(t5.states[e29]).length;
                });
            }, /*!
 * This function builds the functions that get assigned to `forEach` and `map`,
 * since both of those methods share a lot of the same logic.
 *
 * @param {String} iterMethod is either 'forEach' or 'map'
 * @return {Function}
 * @api private
 */ o62.prototype._iter = function(t5) {
                return function() {
                    var e25 = arguments.length, r40 = n52.args(arguments, 0, e25 - 1), o64 = arguments[e25 - 1];
                    r40.length || (r40 = this.stateNames);
                    var i36 = this, s30 = r40.reduce(function(t7, e29) {
                        return t7.concat(Object.keys(i36.states[e29]));
                    }, []);
                    return s30[t5](function(t7, e29, r45) {
                        return o64(t7, e29, r45);
                    });
                };
            }, /*!
 * Iterates over the paths that belong to one of the parameter states.
 *
 * The function profile can look like:
 * this.forEach(state1, fn);         // iterates over all paths in state1
 * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2
 * this.forEach(fn);                 // iterates over all paths in all states
 *
 * @param {String} [state]
 * @param {String} [state]
 * @param {Function} callback
 * @private
 */ o62.prototype.forEach = function() {
                return this.forEach = this._iter("forEach"), this.forEach.apply(this, arguments);
            }, /*!
 * Maps over the paths that belong to one of the parameter states.
 *
 * The function profile can look like:
 * this.forEach(state1, fn);         // iterates over all paths in state1
 * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2
 * this.forEach(fn);                 // iterates over all paths in all states
 *
 * @param {String} [state]
 * @param {String} [state]
 * @param {Function} callback
 * @return {Array}
 * @private
 */ o62.prototype.map = function() {
                return this.map = this._iter("map"), this.map.apply(this, arguments);
            };
        },
        function(t2, e3) {
            function r2(t5) {
                return (r2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                    return typeof t7;
                } : function(t7) {
                    return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                })(t5);
            }
            var n52 = 1000, o62 = 60000, i36 = 60 * o62, s30 = 24 * i36;
            function a39(t5, e25, r40, n64) {
                var o64 = e25 >= 1.5 * r40;
                return Math.round(t5 / r40) + " " + n64 + (o64 ? "s" : "");
            }
            t2.exports = function(t5, e25) {
                e25 = e25 || {
                };
                var u39 = r2(t5);
                if ("string" === u39 && t5.length > 0) return (function(t7) {
                    if ((t7 = String(t7)).length > 100) return;
                    var e29 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t7);
                    if (!e29) return;
                    var r40 = parseFloat(e29[1]);
                    switch((e29[2] || "ms").toLowerCase()){
                        case "years":
                        case "year":
                        case "yrs":
                        case "yr":
                        case "y":
                            return 31557600000 * r40;
                        case "weeks":
                        case "week":
                        case "w":
                            return 604800000 * r40;
                        case "days":
                        case "day":
                        case "d":
                            return r40 * s30;
                        case "hours":
                        case "hour":
                        case "hrs":
                        case "hr":
                        case "h":
                            return r40 * i36;
                        case "minutes":
                        case "minute":
                        case "mins":
                        case "min":
                        case "m":
                            return r40 * o62;
                        case "seconds":
                        case "second":
                        case "secs":
                        case "sec":
                        case "s":
                            return r40 * n52;
                        case "milliseconds":
                        case "millisecond":
                        case "msecs":
                        case "msec":
                        case "ms":
                            return r40;
                        default:
                            return;
                    }
                })(t5);
                if ("number" === u39 && isFinite(t5)) return e25.long ? (function(t7) {
                    var e29 = Math.abs(t7);
                    if (e29 >= s30) return a39(t7, e29, s30, "day");
                    if (e29 >= i36) return a39(t7, e29, i36, "hour");
                    if (e29 >= o62) return a39(t7, e29, o62, "minute");
                    if (e29 >= n52) return a39(t7, e29, n52, "second");
                    return t7 + " ms";
                })(t5) : (function(t7) {
                    var e29 = Math.abs(t7);
                    if (e29 >= s30) return Math.round(t7 / s30) + "d";
                    if (e29 >= i36) return Math.round(t7 / i36) + "h";
                    if (e29 >= o62) return Math.round(t7 / o62) + "m";
                    if (e29 >= n52) return Math.round(t7 / n52) + "s";
                    return t7 + "ms";
                })(t5);
                throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t5));
            };
        },
        function(t2, e3, r2) {
            function n52(t5) {
                return (n52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                    return typeof t7;
                } : function(t7) {
                    return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                })(t5);
            }
            var o62 = r2(115), i36 = [
                "__proto__",
                "constructor",
                "prototype"
            ];
            /*!
 * Returns the value passed to it.
 */ function s30(t5) {
                return t5;
            }
            e3.get = function(t5, r40, n64, i37) {
                var a39;
                "function" == typeof n64 && (n64.length < 2 ? (i37 = n64, n64 = void 0) : (a39 = n64, n64 = void 0)), i37 || (i37 = s30);
                var u39 = "string" == typeof t5 ? o62(t5) : t5;
                if (!Array.isArray(u39)) throw new TypeError("Invalid `path`. Must be either string or array");
                for(var c23, l23 = r40, f20 = 0; f20 < u39.length; ++f20){
                    if (c23 = u39[f20], Array.isArray(l23) && !/^\d+$/.test(c23)) {
                        var p17 = u39.slice(f20);
                        return [].concat(l23).map(function(t7) {
                            return t7 ? e3.get(p17, t7, n64 || a39, i37) : i37(void 0);
                        });
                    }
                    if (a39) l23 = a39(l23, c23);
                    else {
                        var h11 = n64 && l23[n64] ? l23[n64] : l23;
                        l23 = h11 instanceof Map ? h11.get(c23) : h11[c23];
                    }
                    if (!l23) return i37(l23);
                }
                return i37(l23);
            }, e3.has = function(t5, e25) {
                var r40 = "string" == typeof t5 ? o62(t5) : t5;
                if (!Array.isArray(r40)) throw new TypeError("Invalid `path`. Must be either string or array");
                for(var i37 = r40.length, s31 = e25, a39 = 0; a39 < i37; ++a39){
                    if (null == s31 || "object" !== n52(s31) || !(r40[a39] in s31)) return false;
                    s31 = s31[r40[a39]];
                }
                return true;
            }, e3.unset = function(t5, e25) {
                var r40 = "string" == typeof t5 ? o62(t5) : t5;
                if (!Array.isArray(r40)) throw new TypeError("Invalid `path`. Must be either string or array");
                for(var s31 = r40.length, a39 = e25, u39 = 0; u39 < s31; ++u39){
                    if (null == a39 || "object" !== n52(a39) || !(r40[u39] in a39)) return false;
                    if (-1 !== i36.indexOf(r40[u39])) return false;
                    if (u39 === s31 - 1) return delete a39[r40[u39]], true;
                    a39 = a39 instanceof Map ? a39.get(r40[u39]) : a39[r40[u39]];
                }
                return true;
            }, e3.set = function(t5, r40, n64, a39, u39, c23) {
                var l23;
                "function" == typeof a39 && (a39.length < 2 ? (u39 = a39, a39 = void 0) : (l23 = a39, a39 = void 0)), u39 || (u39 = s30);
                var f20 = "string" == typeof t5 ? o62(t5) : t5;
                if (!Array.isArray(f20)) throw new TypeError("Invalid `path`. Must be either string or array");
                if (null != n64) {
                    for(var p19 = 0; p19 < f20.length; ++p19)if (-1 !== i36.indexOf(f20[p19])) return;
                    for(var h13, y14 = c23 || /\$/.test(t5) && false !== c23, d15 = n64, _2 = (p19 = 0, f20.length - 1); p19 < _2; ++p19)if ("$" != (h13 = f20[p19])) {
                        if (Array.isArray(d15) && !/^\d+$/.test(h13)) {
                            var v6 = f20.slice(p19);
                            if (!y14 && Array.isArray(r40)) for(var m2 = 0; m2 < d15.length && m2 < r40.length; ++m2)e3.set(v6, r40[m2], d15[m2], a39 || l23, u39, y14);
                            else for(m2 = 0; m2 < d15.length; ++m2)e3.set(v6, r40, d15[m2], a39 || l23, u39, y14);
                            return;
                        }
                        if (l23) d15 = l23(d15, h13);
                        else {
                            var g6 = a39 && d15[a39] ? d15[a39] : d15;
                            d15 = g6 instanceof Map ? g6.get(h13) : g6[h13];
                        }
                        if (!d15) return;
                    } else if (p19 == _2 - 1) break;
                    if (h13 = f20[_2], a39 && d15[a39] && (d15 = d15[a39]), Array.isArray(d15) && !/^\d+$/.test(h13)) {
                        if (!y14 && Array.isArray(r40)) /*!
 * Recursively set nested arrays
 */ (function t7(e25, r45, n65, o64, i37, s31) {
                            for(var a41, u42 = 0; u42 < e25.length && u42 < r45.length; ++u42)a41 = e25[u42], Array.isArray(a41) && Array.isArray(r45[u42]) ? t7(a41, r45[u42], n65, o64, i37, s31) : a41 && (o64 ? o64(a41, n65, s31(r45[u42])) : (a41[i37] && (a41 = a41[i37]), a41[n65] = s31(r45[u42])));
                        })(d15, r40, h13, l23, a39, u39);
                        else for(m2 = 0; m2 < d15.length; ++m2){
                            var b6 = d15[m2];
                            b6 && (l23 ? l23(b6, h13, u39(r40)) : (b6[a39] && (b6 = b6[a39]), b6[h13] = u39(r40)));
                        }
                    } else l23 ? l23(d15, h13, u39(r40)) : d15 instanceof Map ? d15.set(h13, u39(r40)) : d15[h13] = u39(r40);
                }
            };
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = function(t5) {
                for(var e25 = [], r40 = "", n52 = "DEFAULT", o62 = 0; o62 < t5.length; ++o62)"IN_SQUARE_BRACKETS" !== n52 || /\d/.test(t5[o62]) || "]" === t5[o62] || (n52 = "DEFAULT", r40 = e25[e25.length - 1] + "[" + r40, e25.splice(e25.length - 1, 1)), "[" === t5[o62] ? ("IMMEDIATELY_AFTER_SQUARE_BRACKETS" !== n52 && (e25.push(r40), r40 = ""), n52 = "IN_SQUARE_BRACKETS") : "]" === t5[o62] ? "IN_SQUARE_BRACKETS" === n52 ? (n52 = "IMMEDIATELY_AFTER_SQUARE_BRACKETS", e25.push(r40), r40 = "") : (n52 = "DEFAULT", r40 += t5[o62]) : "." === t5[o62] ? ("IMMEDIATELY_AFTER_SQUARE_BRACKETS" !== n52 && (e25.push(r40), r40 = ""), n52 = "DEFAULT") : r40 += t5[o62];
                return "IMMEDIATELY_AFTER_SQUARE_BRACKETS" !== n52 && e25.push(r40), e25;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n52(t5) {
                return (n52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                    return typeof t7;
                } : function(t7) {
                    return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                })(t5);
            }
            var o62 = r2(28);
            t2.exports = function t5(e25) {
                if ((function(t7, e29) {
                    if (!(t7 instanceof e29)) throw new TypeError("Cannot call a class as a function");
                })(this, t5), this._docs = {
                }, this._childDocs = [], null != e25 && (e25 = o62(e25), Object.assign(this, e25), "object" === n52(e25.subPopulate) && (this.populate = e25.subPopulate), null != e25.perDocumentLimit && null != e25.limit)) throw new Error("Can not use `limit` and `perDocumentLimit` at the same time. Path: `" + e25.path + "`.");
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*
object-assign
(c) Sindre Sorhus
@license MIT
*/ var n52 = Object.getOwnPropertySymbols, o62 = Object.prototype.hasOwnProperty, i36 = Object.prototype.propertyIsEnumerable;
            function s30(t5) {
                if (null == t5) throw new TypeError("Object.assign cannot be called with null or undefined");
                return Object(t5);
            }
            t2.exports = (function() {
                try {
                    if (!Object.assign) return false;
                    var t5 = "abc";
                    if (t5[5] = "de", "5" === Object.getOwnPropertyNames(t5)[0]) return false;
                    for(var e25 = {
                    }, r40 = 0; r40 < 10; r40++)e25["_" + String.fromCharCode(r40)] = r40;
                    if ("0123456789" !== Object.getOwnPropertyNames(e25).map(function(t7) {
                        return e25[t7];
                    }).join("")) return false;
                    var n64 = {
                    };
                    return "abcdefghijklmnopqrst".split("").forEach(function(t7) {
                        n64[t7] = t7;
                    }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({
                    }, n64)).join("");
                } catch (t7) {
                    return false;
                }
            })() ? Object.assign : function(t5, e25) {
                for(var r40, a39, u39 = s30(t5), c23 = 1; c23 < arguments.length; c23++){
                    for(var l23 in r40 = Object(arguments[c23]))o62.call(r40, l23) && (u39[l23] = r40[l23]);
                    if (n52) {
                        a39 = n52(r40);
                        for(var f20 = 0; f20 < a39.length; f20++)i36.call(r40, a39[f20]) && (u39[a39[f20]] = r40[a39[f20]]);
                    }
                }
                return u39;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n52(t5) {
                return (n52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                    return typeof t7;
                } : function(t7) {
                    return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                })(t5);
            }
            var o62 = r2(62), i36 = r2(22), s30 = r2(4), a39 = r2(68), u39 = r2(121)("mquery");
            function c23(t5, e25) {
                if (!(this instanceof c23)) return new c23(t5, e25);
                var r40 = this.constructor.prototype;
                this.op = r40.op || void 0, this.options = Object.assign({
                }, r40.options), this._conditions = r40._conditions ? a39.clone(r40._conditions) : {
                }, this._fields = r40._fields ? a39.clone(r40._fields) : void 0, this._update = r40._update ? a39.clone(r40._update) : void 0, this._path = r40._path || void 0, this._distinct = r40._distinct || void 0, this._collection = r40._collection || void 0, this._traceFunction = r40._traceFunction || void 0, e25 && this.setOptions(e25), t5 && (t5.find && t5.remove && t5.update ? this.collection(t5) : this.find(t5));
            }
            var l27 = "$geoWithin";
            Object.defineProperty(c23, "use$geoWithin", {
                get: function() {
                    return "$geoWithin" == l27;
                },
                set: function(t5) {
                    l27 = true === t5 ? "$geoWithin" : "$within";
                }
            }), c23.prototype.toConstructor = function() {
                function t5(e25, r40) {
                    if (!(this instanceof t5)) return new t5(e25, r40);
                    c23.call(this, e25, r40);
                }
                a39.inherits(t5, c23);
                var e25 = t5.prototype;
                return e25.options = {
                }, e25.setOptions(this.options), e25.op = this.op, e25._conditions = a39.clone(this._conditions), e25._fields = a39.clone(this._fields), e25._update = a39.clone(this._update), e25._path = this._path, e25._distinct = this._distinct, e25._collection = this._collection, e25._traceFunction = this._traceFunction, t5;
            }, c23.prototype.setOptions = function(t5) {
                if (!t5 || !a39.isObject(t5)) return this;
                for(var e25, r40 = a39.keys(t5), n64 = 0; n64 < r40.length; ++n64)if ("function" == typeof this[e25 = r40[n64]]) {
                    var o64 = a39.isArray(t5[e25]) ? t5[e25] : [
                        t5[e25]
                    ];
                    this[e25].apply(this, o64);
                } else this.options[e25] = t5[e25];
                return this;
            }, c23.prototype.collection = function(t5) {
                return this._collection = new c23.Collection(t5), this;
            }, c23.prototype.collation = function(t5) {
                return this.options.collation = t5, this;
            }, c23.prototype.$where = function(t5) {
                return this._conditions.$where = t5, this;
            }, c23.prototype.where = function() {
                if (!arguments.length) return this;
                this.op || (this.op = "find");
                var t5 = n52(arguments[0]);
                if ("string" == t5) return this._path = arguments[0], 2 === arguments.length && (this._conditions[this._path] = arguments[1]), this;
                if ("object" == t5 && !Array.isArray(arguments[0])) return this.merge(arguments[0]);
                throw new TypeError("path must be a string or object");
            }, c23.prototype.equals = function(t5) {
                this._ensurePath("equals");
                var e25 = this._path;
                return this._conditions[e25] = t5, this;
            }, c23.prototype.eq = function(t5) {
                this._ensurePath("eq");
                var e25 = this._path;
                return this._conditions[e25] = t5, this;
            }, c23.prototype.or = function(t5) {
                var e25 = this._conditions.$or || (this._conditions.$or = []);
                return a39.isArray(t5) || (t5 = [
                    t5
                ]), e25.push.apply(e25, t5), this;
            }, c23.prototype.nor = function(t5) {
                var e25 = this._conditions.$nor || (this._conditions.$nor = []);
                return a39.isArray(t5) || (t5 = [
                    t5
                ]), e25.push.apply(e25, t5), this;
            }, c23.prototype.and = function(t5) {
                var e25 = this._conditions.$and || (this._conditions.$and = []);
                return Array.isArray(t5) || (t5 = [
                    t5
                ]), e25.push.apply(e25, t5), this;
            }, /*!
 * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance
 *
 *     Thing.where('type').nin(array)
 */ "gt gte lt lte ne in nin all regex size maxDistance minDistance".split(" ").forEach(function(t5) {
                c23.prototype[t5] = function() {
                    var e25, r40;
                    1 === arguments.length ? (this._ensurePath(t5), r40 = arguments[0], e25 = this._path) : (r40 = arguments[1], e25 = arguments[0]);
                    var o65 = null === this._conditions[e25] || "object" === n52(this._conditions[e25]) ? this._conditions[e25] : this._conditions[e25] = {
                    };
                    return o65["$" + t5] = r40, this;
                };
            }), c23.prototype.mod = function() {
                var t5, e25;
                1 === arguments.length ? (this._ensurePath("mod"), t5 = arguments[0], e25 = this._path) : 2 !== arguments.length || a39.isArray(arguments[1]) ? 3 === arguments.length ? (t5 = o62(arguments, 1), e25 = arguments[0]) : (t5 = arguments[1], e25 = arguments[0]) : (this._ensurePath("mod"), t5 = o62(arguments), e25 = this._path);
                var r40 = this._conditions[e25] || (this._conditions[e25] = {
                });
                return r40.$mod = t5, this;
            }, c23.prototype.exists = function() {
                var t5, e25;
                0 === arguments.length ? (this._ensurePath("exists"), t5 = this._path, e25 = true) : 1 === arguments.length ? "boolean" == typeof arguments[0] ? (this._ensurePath("exists"), t5 = this._path, e25 = arguments[0]) : (t5 = arguments[0], e25 = true) : 2 === arguments.length && (t5 = arguments[0], e25 = arguments[1]);
                var r40 = this._conditions[t5] || (this._conditions[t5] = {
                });
                return r40.$exists = e25, this;
            }, c23.prototype.elemMatch = function() {
                if (null == arguments[0]) throw new TypeError("Invalid argument");
                var t5, e25, r40;
                if ("function" == typeof arguments[0]) this._ensurePath("elemMatch"), e25 = this._path, t5 = arguments[0];
                else if (a39.isObject(arguments[0])) this._ensurePath("elemMatch"), e25 = this._path, r40 = arguments[0];
                else if ("function" == typeof arguments[1]) e25 = arguments[0], t5 = arguments[1];
                else {
                    if (!arguments[1] || !a39.isObject(arguments[1])) throw new TypeError("Invalid argument");
                    e25 = arguments[0], r40 = arguments[1];
                }
                t5 && (t5(r40 = new c23), r40 = r40._conditions);
                var n64 = this._conditions[e25] || (this._conditions[e25] = {
                });
                return n64.$elemMatch = r40, this;
            }, c23.prototype.within = function() {
                if (this._ensurePath("within"), this._geoComparison = l27, 0 === arguments.length) return this;
                if (2 === arguments.length) return this.box.apply(this, arguments);
                if (2 < arguments.length) return this.polygon.apply(this, arguments);
                var t5 = arguments[0];
                if (!t5) throw new TypeError("Invalid argument");
                if (t5.center) return this.circle(t5);
                if (t5.box) return this.box.apply(this, t5.box);
                if (t5.polygon) return this.polygon.apply(this, t5.polygon);
                if (t5.type && t5.coordinates) return this.geometry(t5);
                throw new TypeError("Invalid argument");
            }, c23.prototype.box = function() {
                var t5, e25;
                if (3 === arguments.length) t5 = arguments[0], e25 = [
                    arguments[1],
                    arguments[2]
                ];
                else {
                    if (2 !== arguments.length) throw new TypeError("Invalid argument");
                    this._ensurePath("box"), t5 = this._path, e25 = [
                        arguments[0],
                        arguments[1]
                    ];
                }
                var r40 = this._conditions[t5] || (this._conditions[t5] = {
                });
                return r40[this._geoComparison || l27] = {
                    $box: e25
                }, this;
            }, c23.prototype.polygon = function() {
                var t5, e25;
                "string" == typeof arguments[0] ? (e25 = arguments[0], t5 = o62(arguments, 1)) : (this._ensurePath("polygon"), e25 = this._path, t5 = o62(arguments));
                var r40 = this._conditions[e25] || (this._conditions[e25] = {
                });
                return r40[this._geoComparison || l27] = {
                    $polygon: t5
                }, this;
            }, c23.prototype.circle = function() {
                var t5, e25;
                if (1 === arguments.length) this._ensurePath("circle"), t5 = this._path, e25 = arguments[0];
                else {
                    if (2 !== arguments.length) throw new TypeError("Invalid argument");
                    t5 = arguments[0], e25 = arguments[1];
                }
                if (!("radius" in e25) || !e25.center) throw new Error("center and radius are required");
                var r40 = this._conditions[t5] || (this._conditions[t5] = {
                }), n64 = e25.spherical ? "$centerSphere" : "$center", o65 = this._geoComparison || l27;
                return r40[o65] = {
                }, r40[o65][n64] = [
                    e25.center,
                    e25.radius
                ], "unique" in e25 && (r40[o65].$uniqueDocs = !!e25.unique), this;
            }, c23.prototype.near = function() {
                var t5, e25;
                if (this._geoComparison = "$near", 0 === arguments.length) return this;
                if (1 === arguments.length) this._ensurePath("near"), t5 = this._path, e25 = arguments[0];
                else {
                    if (2 !== arguments.length) throw new TypeError("Invalid argument");
                    t5 = arguments[0], e25 = arguments[1];
                }
                if (!e25.center) throw new Error("center is required");
                var r40 = this._conditions[t5] || (this._conditions[t5] = {
                }), n64 = e25.spherical ? "$nearSphere" : "$near";
                if (Array.isArray(e25.center)) {
                    r40[n64] = e25.center;
                    var o65 = "maxDistance" in e25 ? e25.maxDistance : null;
                    null != o65 && (r40.$maxDistance = o65), null != e25.minDistance && (r40.$minDistance = e25.minDistance);
                } else {
                    if ("Point" != e25.center.type || !Array.isArray(e25.center.coordinates)) throw new Error(s30.format("Invalid GeoJSON specified for %s", n64));
                    r40[n64] = {
                        $geometry: e25.center
                    }, "maxDistance" in e25 && (r40[n64].$maxDistance = e25.maxDistance), "minDistance" in e25 && (r40[n64].$minDistance = e25.minDistance);
                }
                return this;
            }, c23.prototype.intersects = function() {
                if (this._ensurePath("intersects"), this._geoComparison = "$geoIntersects", 0 === arguments.length) return this;
                var t5 = arguments[0];
                if (null != t5 && t5.type && t5.coordinates) return this.geometry(t5);
                throw new TypeError("Invalid argument");
            }, c23.prototype.geometry = function() {
                if ("$within" != this._geoComparison && "$geoWithin" != this._geoComparison && "$near" != this._geoComparison && "$geoIntersects" != this._geoComparison) throw new Error("geometry() must come after `within()`, `intersects()`, or `near()");
                var t5, e25;
                if (1 !== arguments.length) throw new TypeError("Invalid argument");
                if (this._ensurePath("geometry"), e25 = this._path, !(t5 = arguments[0]).type || !Array.isArray(t5.coordinates)) throw new TypeError("Invalid argument");
                var r40 = this._conditions[e25] || (this._conditions[e25] = {
                });
                return r40[this._geoComparison] = {
                    $geometry: t5
                }, this;
            }, c23.prototype.select = function() {
                var t5 = arguments[0];
                if (!t5) return this;
                if (1 !== arguments.length) throw new Error("Invalid select: select only takes 1 argument");
                this._validate("select");
                var e25, r40, o66 = this._fields || (this._fields = {
                }), i37 = n52(t5);
                if (("string" == i37 || a39.isArgumentsObject(t5)) && "number" == typeof t5.length || Array.isArray(t5)) {
                    for("string" == i37 && (t5 = t5.split(/\s+/)), e25 = 0, r40 = t5.length; e25 < r40; ++e25){
                        var s31 = t5[e25];
                        if (s31) {
                            var u42 = "-" == s31[0] ? 0 : 1;
                            0 === u42 && (s31 = s31.substring(1)), o66[s31] = u42;
                        }
                    }
                    return this;
                }
                if (a39.isObject(t5)) {
                    var c31 = a39.keys(t5);
                    for(e25 = 0; e25 < c31.length; ++e25)o66[c31[e25]] = t5[c31[e25]];
                    return this;
                }
                throw new TypeError("Invalid select() argument. Must be string or object.");
            }, c23.prototype.slice = function() {
                if (0 === arguments.length) return this;
                var t5, e25;
                if (this._validate("slice"), 1 === arguments.length) {
                    var r40 = arguments[0];
                    if ("object" === n52(r40) && !Array.isArray(r40)) {
                        for(var i37 = Object.keys(r40), s33 = i37.length, a41 = 0; a41 < s33; ++a41)this.slice(i37[a41], r40[i37[a41]]);
                        return this;
                    }
                    this._ensurePath("slice"), t5 = this._path, e25 = arguments[0];
                } else 2 === arguments.length ? "number" == typeof arguments[0] ? (this._ensurePath("slice"), t5 = this._path, e25 = o62(arguments)) : (t5 = arguments[0], e25 = arguments[1]) : 3 === arguments.length && (t5 = arguments[0], e25 = o62(arguments, 1));
                var u43 = this._fields || (this._fields = {
                });
                return u43[t5] = {
                    $slice: e25
                }, this;
            }, c23.prototype.sort = function(t5) {
                if (!t5) return this;
                var e25, r45, o66;
                this._validate("sort");
                var i38 = n52(t5);
                if (Array.isArray(t5)) {
                    for(r45 = t5.length, e25 = 0; e25 < t5.length; ++e25){
                        if (!Array.isArray(t5[e25])) throw new Error("Invalid sort() argument, must be array of arrays");
                        h14(this.options, t5[e25][0], t5[e25][1]);
                    }
                    return this;
                }
                if (1 === arguments.length && "string" == i38) {
                    for(r45 = (t5 = t5.split(/\s+/)).length, e25 = 0; e25 < r45; ++e25)if (o66 = t5[e25]) {
                        var s34 = "-" == o66[0] ? -1 : 1;
                        -1 === s34 && (o66 = o66.substring(1)), p20(this.options, o66, s34);
                    }
                    return this;
                }
                if (a39.isObject(t5)) {
                    var u43 = a39.keys(t5);
                    for(e25 = 0; e25 < u43.length; ++e25)o66 = u43[e25], p20(this.options, o66, t5[o66]);
                    return this;
                }
                if ("undefined" != typeof Map && t5 instanceof Map) return y16(this.options, t5), this;
                throw new TypeError("Invalid sort() argument. Must be a string, object, or array.");
            };
            /*!
 * @ignore
 */ var f23 = {
                1: 1,
                "-1": -1,
                asc: 1,
                ascending: 1,
                desc: -1,
                descending: -1
            };
            function p20(t5, e25, r45) {
                if (Array.isArray(t5.sort)) throw new TypeError("Can't mix sort syntaxes. Use either array or object:\n- `.sort([['field', 1], ['test', -1]])`\n- `.sort({ field: 1, test: -1 })`");
                var n64;
                if (r45 && r45.$meta) (n64 = t5.sort || (t5.sort = {
                }))[e25] = {
                    $meta: r45.$meta
                };
                else {
                    n64 = t5.sort || (t5.sort = {
                    });
                    var o66 = String(r45 || 1).toLowerCase();
                    if (!(o66 = f23[o66])) throw new TypeError("Invalid sort value: { " + e25 + ": " + r45 + " }");
                    n64[e25] = o66;
                }
            }
            function h14(t5, e25, r45) {
                if (t5.sort = t5.sort || [], !Array.isArray(t5.sort)) throw new TypeError("Can't mix sort syntaxes. Use either array or object:\n- `.sort([['field', 1], ['test', -1]])`\n- `.sort({ field: 1, test: -1 })`");
                var n64 = String(r45 || 1).toLowerCase();
                if (!(n64 = f23[n64])) throw new TypeError("Invalid sort value: [ " + e25 + ", " + r45 + " ]");
                t5.sort.push([
                    e25,
                    n64
                ]);
            }
            function y16(t5, e25) {
                if (t5.sort = t5.sort || new Map, !(t5.sort instanceof Map)) throw new TypeError("Can't mix sort syntaxes. Use either array or object or map consistently");
                e25.forEach(function(e29, r45) {
                    var n64 = String(e29 || 1).toLowerCase();
                    if (!(n64 = f23[n64])) throw new TypeError("Invalid sort value: < " + r45 + ": " + e29 + " >");
                    t5.sort.set(r45, n64);
                });
            }
            /*!
 * limit, skip, maxScan, batchSize, comment
 *
 * Sets these associated options.
 *
 *     query.comment('feed query');
 */ /*!
 * Internal helper for update, updateMany, updateOne
 */ function d17(t5, e25, r45, n64, o67, i38, s35) {
                return t5.op = e25, c23.canMerge(r45) && t5.merge(r45), n64 && t5._mergeUpdate(n64), a39.isObject(o67) && t5.setOptions(o67), i38 || s35 ? !t5._update || !t5.options.overwrite && 0 === a39.keys(t5._update).length ? (s35 && a39.soon(s35.bind(null, null, 0)), t5) : (o67 = t5._optionsForExec(), s35 || (o67.safe = false), r45 = t5._conditions, n64 = t5._updateForExec(), u39("update", t5._collection.collectionName, r45, n64, o67), s35 = t5._wrapCallback(e25, s35, {
                    conditions: r45,
                    doc: n64,
                    options: o67
                }), t5._collection[e25](r45, n64, o67, a39.tick(s35)), t5) : t5;
            }
            [
                "limit",
                "skip",
                "maxScan",
                "batchSize",
                "comment"
            ].forEach(function(t5) {
                c23.prototype[t5] = function(e25) {
                    return this._validate(t5), this.options[t5] = e25, this;
                };
            }), c23.prototype.maxTime = c23.prototype.maxTimeMS = function(t5) {
                return this._validate("maxTime"), this.options.maxTimeMS = t5, this;
            }, c23.prototype.snapshot = function() {
                return this._validate("snapshot"), this.options.snapshot = !arguments.length || !!arguments[0], this;
            }, c23.prototype.hint = function() {
                if (0 === arguments.length) return this;
                this._validate("hint");
                var t5 = arguments[0];
                if (a39.isObject(t5)) {
                    var e25 = this.options.hint || (this.options.hint = {
                    });
                    for(var r45 in t5)e25[r45] = t5[r45];
                    return this;
                }
                if ("string" == typeof t5) return this.options.hint = t5, this;
                throw new TypeError("Invalid hint. " + t5);
            }, c23.prototype.j = function(t5) {
                return this.options.j = t5, this;
            }, c23.prototype.slaveOk = function(t5) {
                return this.options.slaveOk = !arguments.length || !!t5, this;
            }, c23.prototype.read = c23.prototype.setReadPreference = function(t5) {
                return arguments.length > 1 && !c23.prototype.read.deprecationWarningIssued && (console.error("Deprecation warning: 'tags' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead."), c23.prototype.read.deprecationWarningIssued = true), this.options.readPreference = a39.readPref(t5), this;
            }, c23.prototype.readConcern = c23.prototype.r = function(t5) {
                return this.options.readConcern = a39.readConcern(t5), this;
            }, c23.prototype.tailable = function() {
                return this._validate("tailable"), this.options.tailable = !arguments.length || !!arguments[0], this;
            }, c23.prototype.writeConcern = c23.prototype.w = function(t5) {
                return "object" === n52(t5) ? ((void 0) !== t5.j && (this.options.j = t5.j), (void 0) !== t5.w && (this.options.w = t5.w), (void 0) !== t5.wtimeout && (this.options.wtimeout = t5.wtimeout)) : this.options.w = "m" === t5 ? "majority" : t5, this;
            }, c23.prototype.wtimeout = c23.prototype.wTimeout = function(t5) {
                return this.options.wtimeout = t5, this;
            }, c23.prototype.merge = function(t5) {
                if (!t5) return this;
                if (!c23.canMerge(t5)) throw new TypeError("Invalid argument. Expected instanceof mquery or plain object");
                return t5 instanceof c23 ? (t5._conditions && a39.merge(this._conditions, t5._conditions), t5._fields && (this._fields || (this._fields = {
                }), a39.merge(this._fields, t5._fields)), t5.options && (this.options || (this.options = {
                }), a39.merge(this.options, t5.options)), t5._update && (this._update || (this._update = {
                }), a39.mergeClone(this._update, t5._update)), t5._distinct && (this._distinct = t5._distinct), this) : (a39.merge(this._conditions, t5), this);
            }, c23.prototype.find = function(t5, e29) {
                if (this.op = "find", "function" == typeof t5 ? (e29 = t5, t5 = void 0) : c23.canMerge(t5) && this.merge(t5), !e29) return this;
                var r46 = this._conditions, n64 = this._optionsForExec();
                return this.$useProjection ? n64.projection = this._fieldsForExec() : n64.fields = this._fieldsForExec(), u39("find", this._collection.collectionName, r46, n64), e29 = this._wrapCallback("find", e29, {
                    conditions: r46,
                    options: n64
                }), this._collection.find(r46, n64, a39.tick(e29)), this;
            }, c23.prototype.cursor = function(t5) {
                if (this.op) {
                    if ("find" !== this.op) throw new TypeError(".cursor only support .find method");
                } else this.find(t5);
                var e29 = this._conditions, r46 = this._optionsForExec();
                return this.$useProjection ? r46.projection = this._fieldsForExec() : r46.fields = this._fieldsForExec(), u39("findCursor", this._collection.collectionName, e29, r46), this._collection.findCursor(e29, r46);
            }, c23.prototype.findOne = function(t5, e29) {
                if (this.op = "findOne", "function" == typeof t5 ? (e29 = t5, t5 = void 0) : c23.canMerge(t5) && this.merge(t5), !e29) return this;
                var r46 = this._conditions, n64 = this._optionsForExec();
                return this.$useProjection ? n64.projection = this._fieldsForExec() : n64.fields = this._fieldsForExec(), u39("findOne", this._collection.collectionName, r46, n64), e29 = this._wrapCallback("findOne", e29, {
                    conditions: r46,
                    options: n64
                }), this._collection.findOne(r46, n64, a39.tick(e29)), this;
            }, c23.prototype.count = function(t5, e29) {
                if (this.op = "count", this._validate(), "function" == typeof t5 ? (e29 = t5, t5 = void 0) : c23.canMerge(t5) && this.merge(t5), !e29) return this;
                var r46 = this._conditions, n64 = this._optionsForExec();
                return u39("count", this._collection.collectionName, r46, n64), e29 = this._wrapCallback("count", e29, {
                    conditions: r46,
                    options: n64
                }), this._collection.count(r46, n64, a39.tick(e29)), this;
            }, c23.prototype.distinct = function(t5, e29, r46) {
                if (this.op = "distinct", this._validate(), !r46) {
                    switch(n52(e29)){
                        case "function":
                            r46 = e29, "string" == typeof t5 && (e29 = t5, t5 = void 0);
                            break;
                        case "undefined":
                        case "string":
                            break;
                        default:
                            throw new TypeError("Invalid `field` argument. Must be string or function");
                    }
                    switch(n52(t5)){
                        case "function":
                            r46 = t5, t5 = e29 = void 0;
                            break;
                        case "string":
                            e29 = t5, t5 = void 0;
                    }
                }
                if ("string" == typeof e29 && (this._distinct = e29), c23.canMerge(t5) && this.merge(t5), !r46) return this;
                if (!this._distinct) throw new Error("No value for `distinct` has been declared");
                var o67 = this._conditions, i38 = this._optionsForExec();
                return u39("distinct", this._collection.collectionName, o67, i38), r46 = this._wrapCallback("distinct", r46, {
                    conditions: o67,
                    options: i38
                }), this._collection.distinct(this._distinct, o67, i38, a39.tick(r46)), this;
            }, c23.prototype.update = function(t5, e29, r46, o67) {
                var i38;
                switch(arguments.length){
                    case 3:
                        "function" == typeof r46 && (o67 = r46, r46 = void 0);
                        break;
                    case 2:
                        "function" == typeof e29 && (o67 = e29, e29 = t5, t5 = void 0);
                        break;
                    case 1:
                        switch(n52(t5)){
                            case "function":
                                o67 = t5, t5 = r46 = e29 = void 0;
                                break;
                            case "boolean":
                                i38 = t5, t5 = void 0;
                                break;
                            default:
                                e29 = t5, t5 = r46 = void 0;
                        }
                }
                return d17(this, "update", t5, e29, r46, i38, o67);
            }, c23.prototype.updateMany = function(t5, e29, r46, o67) {
                var i38;
                switch(arguments.length){
                    case 3:
                        "function" == typeof r46 && (o67 = r46, r46 = void 0);
                        break;
                    case 2:
                        "function" == typeof e29 && (o67 = e29, e29 = t5, t5 = void 0);
                        break;
                    case 1:
                        switch(n52(t5)){
                            case "function":
                                o67 = t5, t5 = r46 = e29 = void 0;
                                break;
                            case "boolean":
                                i38 = t5, t5 = void 0;
                                break;
                            default:
                                e29 = t5, t5 = r46 = void 0;
                        }
                }
                return d17(this, "updateMany", t5, e29, r46, i38, o67);
            }, c23.prototype.updateOne = function(t5, e29, r46, o67) {
                var i38;
                switch(arguments.length){
                    case 3:
                        "function" == typeof r46 && (o67 = r46, r46 = void 0);
                        break;
                    case 2:
                        "function" == typeof e29 && (o67 = e29, e29 = t5, t5 = void 0);
                        break;
                    case 1:
                        switch(n52(t5)){
                            case "function":
                                o67 = t5, t5 = r46 = e29 = void 0;
                                break;
                            case "boolean":
                                i38 = t5, t5 = void 0;
                                break;
                            default:
                                e29 = t5, t5 = r46 = void 0;
                        }
                }
                return d17(this, "updateOne", t5, e29, r46, i38, o67);
            }, c23.prototype.replaceOne = function(t5, e29, r46, o67) {
                var i38;
                switch(arguments.length){
                    case 3:
                        "function" == typeof r46 && (o67 = r46, r46 = void 0);
                        break;
                    case 2:
                        "function" == typeof e29 && (o67 = e29, e29 = t5, t5 = void 0);
                        break;
                    case 1:
                        switch(n52(t5)){
                            case "function":
                                o67 = t5, t5 = r46 = e29 = void 0;
                                break;
                            case "boolean":
                                i38 = t5, t5 = void 0;
                                break;
                            default:
                                e29 = t5, t5 = r46 = void 0;
                        }
                }
                return this.setOptions({
                    overwrite: true
                }), d17(this, "replaceOne", t5, e29, r46, i38, o67);
            }, c23.prototype.remove = function(t5, e29) {
                var r46;
                if (this.op = "remove", "function" == typeof t5 ? (e29 = t5, t5 = void 0) : c23.canMerge(t5) ? this.merge(t5) : true === t5 && (r46 = t5, t5 = void 0), !r46 && !e29) return this;
                var n64 = this._optionsForExec();
                e29 || (n64.safe = false);
                var o67 = this._conditions;
                return u39("remove", this._collection.collectionName, o67, n64), e29 = this._wrapCallback("remove", e29, {
                    conditions: o67,
                    options: n64
                }), this._collection.remove(o67, n64, a39.tick(e29)), this;
            }, c23.prototype.deleteOne = function(t5, e29) {
                var r46;
                if (this.op = "deleteOne", "function" == typeof t5 ? (e29 = t5, t5 = void 0) : c23.canMerge(t5) ? this.merge(t5) : true === t5 && (r46 = t5, t5 = void 0), !r46 && !e29) return this;
                var n64 = this._optionsForExec();
                e29 || (n64.safe = false), delete n64.justOne;
                var o67 = this._conditions;
                return u39("deleteOne", this._collection.collectionName, o67, n64), e29 = this._wrapCallback("deleteOne", e29, {
                    conditions: o67,
                    options: n64
                }), this._collection.deleteOne(o67, n64, a39.tick(e29)), this;
            }, c23.prototype.deleteMany = function(t5, e29) {
                var r46;
                if (this.op = "deleteMany", "function" == typeof t5 ? (e29 = t5, t5 = void 0) : c23.canMerge(t5) ? this.merge(t5) : true === t5 && (r46 = t5, t5 = void 0), !r46 && !e29) return this;
                var n64 = this._optionsForExec();
                e29 || (n64.safe = false), delete n64.justOne;
                var o67 = this._conditions;
                return u39("deleteOne", this._collection.collectionName, o67, n64), e29 = this._wrapCallback("deleteOne", e29, {
                    conditions: o67,
                    options: n64
                }), this._collection.deleteMany(o67, n64, a39.tick(e29)), this;
            }, c23.prototype.findOneAndUpdate = function(t5, e29, r46, n64) {
                switch(this.op = "findOneAndUpdate", this._validate(), arguments.length){
                    case 3:
                        "function" == typeof r46 && (n64 = r46, r46 = {
                        });
                        break;
                    case 2:
                        "function" == typeof e29 && (n64 = e29, e29 = t5, t5 = void 0), r46 = void 0;
                        break;
                    case 1:
                        "function" == typeof t5 ? (n64 = t5, t5 = r46 = e29 = void 0) : (e29 = t5, t5 = r46 = void 0);
                }
                return c23.canMerge(t5) && this.merge(t5), e29 && this._mergeUpdate(e29), r46 && this.setOptions(r46), n64 ? this._findAndModify("update", n64) : this;
            }, c23.prototype.findOneAndRemove = c23.prototype.findOneAndDelete = function(t5, e29, r46) {
                return this.op = "findOneAndRemove", this._validate(), "function" == typeof e29 ? (r46 = e29, e29 = void 0) : "function" == typeof t5 && (r46 = t5, t5 = void 0), c23.canMerge(t5) && this.merge(t5), e29 && this.setOptions(e29), r46 ? this._findAndModify("remove", r46) : this;
            }, c23.prototype._findAndModify = function(t5, e29) {
                i36.equal("function", n52(e29));
                var r46, o67 = this._optionsForExec();
                if ("remove" == t5) o67.remove = true;
                else if ("new" in o67 || (o67.new = true), "upsert" in o67 || (o67.upsert = false), !(r46 = this._updateForExec())) {
                    if (!o67.upsert) return this.findOne(e29);
                    r46 = {
                        $set: {
                        }
                    };
                }
                null != this._fieldsForExec() && (this.$useProjection ? o67.projection = this._fieldsForExec() : o67.fields = this._fieldsForExec());
                var s35 = this._conditions;
                return u39("findAndModify", this._collection.collectionName, s35, r46, o67), e29 = this._wrapCallback("findAndModify", e29, {
                    conditions: s35,
                    doc: r46,
                    options: o67
                }), this._collection.findAndModify(s35, r46, o67, a39.tick(e29)), this;
            }, c23.prototype._wrapCallback = function(t5, e29, r46) {
                var n64 = this._traceFunction || c23.traceFunction;
                if (n64) {
                    r46.collectionName = this._collection.collectionName;
                    var o67 = n64 && n64.call(null, t5, r46, this), i38 = (new Date).getTime();
                    return function(t7, r47) {
                        if (o67) {
                            var n65 = (new Date).getTime() - i38;
                            o67.call(null, t7, r47, n65);
                        }
                        e29 && e29.apply(null, arguments);
                    };
                }
                return e29;
            }, c23.prototype.setTraceFunction = function(t5) {
                return this._traceFunction = t5, this;
            }, c23.prototype.exec = function(t5, e29) {
                switch(n52(t5)){
                    case "function":
                        e29 = t5, t5 = null;
                        break;
                    case "string":
                        this.op = t5;
                }
                i36.ok(this.op, "Missing query type: (find, update, etc)"), "update" != this.op && "remove" != this.op || e29 || (e29 = true);
                var r46 = this;
                if ("function" != typeof e29) return new c23.Promise(function(t7, e30) {
                    r46[r46.op](function(r47, n64) {
                        r47 ? e30(r47) : t7(n64), t7 = e30 = null;
                    });
                });
                this[this.op](e29);
            }, c23.prototype.thunk = function() {
                var t5 = this;
                return function(e29) {
                    t5.exec(e29);
                };
            }, c23.prototype.then = function(t5, e29) {
                var r46 = this;
                return new c23.Promise(function(t7, e30) {
                    r46.exec(function(r47, n64) {
                        r47 ? e30(r47) : t7(n64), t7 = e30 = null;
                    });
                }).then(t5, e29);
            }, c23.prototype.stream = function(t5) {
                if ("find" != this.op) throw new Error("stream() is only available for find");
                var e29 = this._conditions, r46 = this._optionsForExec();
                return this.$useProjection ? r46.projection = this._fieldsForExec() : r46.fields = this._fieldsForExec(), u39("stream", this._collection.collectionName, e29, r46, t5), this._collection.findStream(e29, r46, t5);
            }, c23.prototype.selected = function() {
                return !!(this._fields && Object.keys(this._fields).length > 0);
            }, c23.prototype.selectedInclusively = function() {
                if (!this._fields) return false;
                var t5 = Object.keys(this._fields);
                if (0 === t5.length) return false;
                for(var e29 = 0; e29 < t5.length; ++e29){
                    var r46 = t5[e29];
                    if (0 === this._fields[r46]) return false;
                    if (this._fields[r46] && "object" === n52(this._fields[r46]) && this._fields[r46].$meta) return false;
                }
                return true;
            }, c23.prototype.selectedExclusively = function() {
                if (!this._fields) return false;
                var t5 = Object.keys(this._fields);
                if (0 === t5.length) return false;
                for(var e29 = 0; e29 < t5.length; ++e29){
                    var r47 = t5[e29];
                    if (0 === this._fields[r47]) return true;
                }
                return false;
            }, c23.prototype._mergeUpdate = function(t5) {
                this._update || (this._update = {
                }), t5 instanceof c23 ? t5._update && a39.mergeClone(this._update, t5._update) : a39.mergeClone(this._update, t5);
            }, c23.prototype._optionsForExec = function() {
                return a39.clone(this.options);
            }, c23.prototype._fieldsForExec = function() {
                return a39.clone(this._fields);
            }, c23.prototype._updateForExec = function() {
                for(var t5 = a39.clone(this._update), e29 = a39.keys(t5), r48 = e29.length, n64 = {
                }; r48--;){
                    var o68 = e29[r48];
                    this.options.overwrite ? n64[o68] = t5[o68] : "$" !== o68[0] ? (n64.$set || (t5.$set ? n64.$set = t5.$set : n64.$set = {
                    }), n64.$set[o68] = t5[o68], e29.splice(r48, 1), ~e29.indexOf("$set") || e29.push("$set")) : "$set" === o68 && n64.$set || (n64[o68] = t5[o68]);
                }
                return this._compiledUpdate = n64, n64;
            }, c23.prototype._ensurePath = function(t5) {
                if (!this._path) throw new Error(t5 + "() must be used after where() when called with these arguments");
            }, /*!
 * Permissions
 */ c23.permissions = r2(124), c23._isPermitted = function(t5, e29) {
                var r48 = c23.permissions[e29];
                return !r48 || true !== r48[t5];
            }, c23.prototype._validate = function(t5) {
                var e29, r48;
                if ((void 0) === t5) {
                    if ("function" != typeof (r48 = c23.permissions[this.op])) return true;
                    e29 = r48(this);
                } else c23._isPermitted(t5, this.op) || (e29 = t5);
                if (e29) throw new Error(e29 + " cannot be used with " + this.op);
            }, c23.canMerge = function(t5) {
                return t5 instanceof c23 || a39.isObject(t5);
            }, c23.setGlobalTraceFunction = function(t5) {
                c23.traceFunction = t5;
            }, /*!
 * Exports.
 */ c23.utils = a39, c23.env = r2(70), c23.Collection = r2(126), c23.BaseCollection = r2(30), c23.Promise = r2(128), t2.exports = c23;
        },
        function(t2, e3, r2) {
            (function(t5, e29) {
                (function(t7, r48) {
                    if (!t7.setImmediate) {
                        var n52, o62, i36, s30, a39, u39 = 1, c23 = {
                        }, l27 = false, f23 = t7.document, p20 = Object.getPrototypeOf && Object.getPrototypeOf(t7);
                        p20 = p20 && p20.setTimeout ? p20 : t7, "[object process]" === ({
                        }).toString.call(t7.process) ? n52 = function(t8) {
                            e29.nextTick(function() {
                                y16(t8);
                            });
                        } : !function() {
                            if (t7.postMessage && !t7.importScripts) {
                                var e30 = true, r49 = t7.onmessage;
                                return t7.onmessage = function() {
                                    e30 = false;
                                }, t7.postMessage("", "*"), t7.onmessage = r49, e30;
                            }
                        }() ? t7.MessageChannel ? ((i36 = new MessageChannel).port1.onmessage = function(t8) {
                            y16(t8.data);
                        }, n52 = function(t8) {
                            i36.port2.postMessage(t8);
                        }) : f23 && "onreadystatechange" in f23.createElement("script") ? (o62 = f23.documentElement, n52 = function(t8) {
                            var e31 = f23.createElement("script");
                            e31.onreadystatechange = function() {
                                y16(t8), e31.onreadystatechange = null, o62.removeChild(e31), e31 = null;
                            }, o62.appendChild(e31);
                        }) : n52 = function(t8) {
                            setTimeout(y16, 0, t8);
                        } : (s30 = "setImmediate$" + Math.random() + "$", a39 = function(e31) {
                            e31.source === t7 && "string" == typeof e31.data && 0 === e31.data.indexOf(s30) && y16(+e31.data.slice(s30.length));
                        }, t7.addEventListener ? t7.addEventListener("message", a39, false) : t7.attachEvent("onmessage", a39), n52 = function(e31) {
                            t7.postMessage(s30 + e31, "*");
                        }), p20.setImmediate = function(t8) {
                            "function" != typeof t8 && (t8 = new Function("" + t8));
                            for(var e31 = new Array(arguments.length - 1), r50 = 0; r50 < e31.length; r50++)e31[r50] = arguments[r50 + 1];
                            var o69 = {
                                callback: t8,
                                args: e31
                            };
                            return c23[u39] = o69, n52(u39), u39++;
                        }, p20.clearImmediate = h14;
                    }
                    function h14(t8) {
                        delete c23[t8];
                    }
                    function y16(t8) {
                        if (l27) setTimeout(y16, 0, t8);
                        else {
                            var e31 = c23[t8];
                            if (e31) {
                                l27 = true;
                                try {
                                    (function(t9) {
                                        var e32 = t9.callback, r50 = t9.args;
                                        switch(r50.length){
                                            case 0:
                                                e32();
                                                break;
                                            case 1:
                                                e32(r50[0]);
                                                break;
                                            case 2:
                                                e32(r50[0], r50[1]);
                                                break;
                                            case 3:
                                                e32(r50[0], r50[1], r50[2]);
                                                break;
                                            default:
                                                e32.apply(void 0, r50);
                                        }
                                    })(e31);
                                } finally{
                                    h14(t8), l27 = false;
                                }
                            }
                        }
                    }
                })("undefined" == typeof self ? (void 0) === t5 ? this : t5 : self);
            }).call(this, r2(11), r2(7));
        },
        function(t2, e3, r2) {
            var n64 = r2(2), o69 = n64.Buffer;
            function i39(t5, e29) {
                for(var r48 in t5)e29[r48] = t5[r48];
            }
            function s35(t5, e29, r48) {
                return o69(t5, e29, r48);
            }
            o69.from && o69.alloc && o69.allocUnsafe && o69.allocUnsafeSlow ? t2.exports = n64 : (i39(n64, e3), e3.Buffer = s35), i39(o69, s35), s35.from = function(t5, e29, r48) {
                if ("number" == typeof t5) throw new TypeError("Argument must not be a number");
                return o69(t5, e29, r48);
            }, s35.alloc = function(t5, e29, r48) {
                if ("number" != typeof t5) throw new TypeError("Argument must be a number");
                var n66 = o69(t5);
                return (void 0) !== e29 ? "string" == typeof r48 ? n66.fill(e29, r48) : n66.fill(e29) : n66.fill(0), n66;
            }, s35.allocUnsafe = function(t5) {
                if ("number" != typeof t5) throw new TypeError("Argument must be a number");
                return o69(t5);
            }, s35.allocUnsafeSlow = function(t5) {
                if ("number" != typeof t5) throw new TypeError("Argument must be a number");
                return n64.SlowBuffer(t5);
            };
        },
        function(t2, e3, r2) {
            (function(n64) {
                function o69(t5) {
                    return (o69 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t7) {
                        return typeof t7;
                    } : function(t7) {
                        return t7 && "function" == typeof Symbol && t7.constructor === Symbol && t7 !== Symbol.prototype ? "symbol" : typeof t7;
                    })(t5);
                }
                function i39() {
                    var t5;
                    try {
                        t5 = e3.storage.debug;
                    } catch (t7) {
                    }
                    return !t5 && (void 0) !== n64 && "env" in n64 && (t5 = n64.env.DEBUG), t5;
                }
                (e3 = t2.exports = r2(122)).log = function() {
                    return "object" === ("undefined" == typeof console ? "undefined" : o69(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
                }, e3.formatArgs = function(t5) {
                    var r48 = this.useColors;
                    if (t5[0] = (r48 ? "%c" : "") + this.namespace + (r48 ? " %c" : " ") + t5[0] + (r48 ? "%c " : " ") + "+" + e3.humanize(this.diff), !r48) return;
                    var n66 = "color: " + this.color;
                    t5.splice(1, 0, n66, "color: inherit");
                    var o70 = 0, i40 = 0;
                    t5[0].replace(/%[a-zA-Z%]/g, function(t7) {
                        "%%" !== t7 && (o70++, "%c" === t7 && (i40 = o70));
                    }), t5.splice(i40, 0, n66);
                }, e3.save = function(t5) {
                    try {
                        null == t5 ? e3.storage.removeItem("debug") : e3.storage.debug = t5;
                    } catch (t7) {
                    }
                }, e3.load = i39, e3.useColors = function() {
                    if ("undefined" != typeof window && window.process && "renderer" === window.process.type) return true;
                    if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
                    return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
                }, e3.storage = "undefined" != typeof chrome && (void 0) !== chrome.storage ? chrome.storage.local : (function() {
                    try {
                        return window.localStorage;
                    } catch (t5) {
                    }
                })(), e3.colors = [
                    "#0000CC",
                    "#0000FF",
                    "#0033CC",
                    "#0033FF",
                    "#0066CC",
                    "#0066FF",
                    "#0099CC",
                    "#0099FF",
                    "#00CC00",
                    "#00CC33",
                    "#00CC66",
                    "#00CC99",
                    "#00CCCC",
                    "#00CCFF",
                    "#3300CC",
                    "#3300FF",
                    "#3333CC",
                    "#3333FF",
                    "#3366CC",
                    "#3366FF",
                    "#3399CC",
                    "#3399FF",
                    "#33CC00",
                    "#33CC33",
                    "#33CC66",
                    "#33CC99",
                    "#33CCCC",
                    "#33CCFF",
                    "#6600CC",
                    "#6600FF",
                    "#6633CC",
                    "#6633FF",
                    "#66CC00",
                    "#66CC33",
                    "#9900CC",
                    "#9900FF",
                    "#9933CC",
                    "#9933FF",
                    "#99CC00",
                    "#99CC33",
                    "#CC0000",
                    "#CC0033",
                    "#CC0066",
                    "#CC0099",
                    "#CC00CC",
                    "#CC00FF",
                    "#CC3300",
                    "#CC3333",
                    "#CC3366",
                    "#CC3399",
                    "#CC33CC",
                    "#CC33FF",
                    "#CC6600",
                    "#CC6633",
                    "#CC9900",
                    "#CC9933",
                    "#CCCC00",
                    "#CCCC33",
                    "#FF0000",
                    "#FF0033",
                    "#FF0066",
                    "#FF0099",
                    "#FF00CC",
                    "#FF00FF",
                    "#FF3300",
                    "#FF3333",
                    "#FF3366",
                    "#FF3399",
                    "#FF33CC",
                    "#FF33FF",
                    "#FF6600",
                    "#FF6633",
                    "#FF9900",
                    "#FF9933",
                    "#FFCC00",
                    "#FFCC33"
                ], e3.formatters.j = function(t5) {
                    try {
                        return JSON.stringify(t5);
                    } catch (t7) {
                        return "[UnexpectedJSONParseError]: " + t7.message;
                    }
                }, e3.enable(i39());
            }).call(this, r2(7));
        },
        function(t2, e3, r2) {
            function n64(t5) {
                var r48;
                function n66() {
                    if (n66.enabled) {
                        var t7 = n66, o69 = +new Date, i39 = o69 - (r48 || o69);
                        t7.diff = i39, t7.prev = r48, t7.curr = o69, r48 = o69;
                        for(var s35 = new Array(arguments.length), a42 = 0; a42 < s35.length; a42++)s35[a42] = arguments[a42];
                        s35[0] = e3.coerce(s35[0]), "string" != typeof s35[0] && s35.unshift("%O");
                        var u44 = 0;
                        s35[0] = s35[0].replace(/%([a-zA-Z%])/g, function(r50, n67) {
                            if ("%%" === r50) return r50;
                            u44++;
                            var o70 = e3.formatters[n67];
                            if ("function" == typeof o70) {
                                var i40 = s35[u44];
                                r50 = o70.call(t7, i40), s35.splice(u44, 1), u44--;
                            }
                            return r50;
                        }), e3.formatArgs.call(t7, s35);
                        var c32 = n66.log || e3.log || console.log.bind(console);
                        c32.apply(t7, s35);
                    }
                }
                return n66.namespace = t5, n66.enabled = e3.enabled(t5), n66.useColors = e3.useColors(), n66.color = (function(t8) {
                    var r50, n67 = 0;
                    for(r50 in t8)n67 = (n67 << 5) - n67 + t8.charCodeAt(r50), n67 |= 0;
                    return e3.colors[Math.abs(n67) % e3.colors.length];
                })(t5), n66.destroy = o70, "function" == typeof e3.init && e3.init(n66), e3.instances.push(n66), n66;
            }
            function o70() {
                var t5 = e3.instances.indexOf(this);
                return -1 !== t5 && (e3.instances.splice(t5, 1), true);
            }
            (e3 = t2.exports = n64.debug = n64.default = n64).coerce = function(t5) {
                return t5 instanceof Error ? t5.stack || t5.message : t5;
            }, e3.disable = function() {
                e3.enable("");
            }, e3.enable = function(t5) {
                var r48;
                e3.save(t5), e3.names = [], e3.skips = [];
                var n66 = ("string" == typeof t5 ? t5 : "").split(/[\s,]+/), o71 = n66.length;
                for(r48 = 0; r48 < o71; r48++)n66[r48] && ("-" === (t5 = n66[r48].replace(/\*/g, ".*?"))[0] ? e3.skips.push(new RegExp("^" + t5.substr(1) + "$")) : e3.names.push(new RegExp("^" + t5 + "$")));
                for(r48 = 0; r48 < e3.instances.length; r48++){
                    var i41 = e3.instances[r48];
                    i41.enabled = e3.enabled(i41.namespace);
                }
            }, e3.enabled = function(t5) {
                if ("*" === t5[t5.length - 1]) return true;
                var r48, n66;
                for(r48 = 0, n66 = e3.skips.length; r48 < n66; r48++)if (e3.skips[r48].test(t5)) return false;
                for(r48 = 0, n66 = e3.names.length; r48 < n66; r48++)if (e3.names[r48].test(t5)) return true;
                return false;
            }, e3.humanize = r2(123), e3.instances = [], e3.names = [], e3.skips = [], e3.formatters = {
            };
        },
        function(t2, e3) {
            function r2(t5) {
                return (r2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            var n64 = 1000, o70 = 60000, i42 = 60 * o70, s36 = 24 * i42;
            function a43(t5, e29, r48) {
                if (!(t5 < e29)) return t5 < 1.5 * e29 ? Math.floor(t5 / e29) + " " + r48 : Math.ceil(t5 / e29) + " " + r48 + "s";
            }
            t2.exports = function(t5, e29) {
                e29 = e29 || {
                };
                var u45, c33 = r2(t5);
                if ("string" === c33 && t5.length > 0) return (function(t8) {
                    if ((t8 = String(t8)).length > 100) return;
                    var e32 = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t8);
                    if (!e32) return;
                    var r48 = parseFloat(e32[1]);
                    switch((e32[2] || "ms").toLowerCase()){
                        case "years":
                        case "year":
                        case "yrs":
                        case "yr":
                        case "y":
                            return 31557600000 * r48;
                        case "days":
                        case "day":
                        case "d":
                            return r48 * s36;
                        case "hours":
                        case "hour":
                        case "hrs":
                        case "hr":
                        case "h":
                            return r48 * i42;
                        case "minutes":
                        case "minute":
                        case "mins":
                        case "min":
                        case "m":
                            return r48 * o70;
                        case "seconds":
                        case "second":
                        case "secs":
                        case "sec":
                        case "s":
                            return r48 * n64;
                        case "milliseconds":
                        case "millisecond":
                        case "msecs":
                        case "msec":
                        case "ms":
                            return r48;
                        default:
                            return;
                    }
                })(t5);
                if ("number" === c33 && false === isNaN(t5)) return e29.long ? a43(u45 = t5, s36, "day") || a43(u45, i42, "hour") || a43(u45, o70, "minute") || a43(u45, n64, "second") || u45 + " ms" : (function(t8) {
                    if (t8 >= s36) return Math.round(t8 / s36) + "d";
                    if (t8 >= i42) return Math.round(t8 / i42) + "h";
                    if (t8 >= o70) return Math.round(t8 / o70) + "m";
                    if (t8 >= n64) return Math.round(t8 / n64) + "s";
                    return t8 + "ms";
                })(t5);
                throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t5));
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = e3;
            n64.distinct = function(t5) {
                var e29;
                return t5._fields && Object.keys(t5._fields).length > 0 ? "field selection and slice" : (Object.keys(n64.distinct).every(function(r48) {
                    return !t5.options[r48] || (e29 = r48, false);
                }), e29);
            }, n64.distinct.select = n64.distinct.slice = n64.distinct.sort = n64.distinct.limit = n64.distinct.skip = n64.distinct.batchSize = n64.distinct.comment = n64.distinct.maxScan = n64.distinct.snapshot = n64.distinct.hint = n64.distinct.tailable = true, n64.findOneAndUpdate = n64.findOneAndRemove = function(t5) {
                var e29;
                return Object.keys(n64.findOneAndUpdate).every(function(r48) {
                    return !t5.options[r48] || (e29 = r48, false);
                }), e29;
            }, n64.findOneAndUpdate.limit = n64.findOneAndUpdate.skip = n64.findOneAndUpdate.batchSize = n64.findOneAndUpdate.maxScan = n64.findOneAndUpdate.snapshot = n64.findOneAndUpdate.hint = n64.findOneAndUpdate.tailable = n64.findOneAndUpdate.comment = true, n64.count = function(t5) {
                var e29;
                return t5._fields && Object.keys(t5._fields).length > 0 ? "field selection and slice" : (Object.keys(n64.count).every(function(r48) {
                    return !t5.options[r48] || (e29 = r48, false);
                }), e29);
            }, n64.count.slice = n64.count.batchSize = n64.count.comment = n64.count.maxScan = n64.count.snapshot = n64.count.tailable = true;
        },
        function(t2, e3) {
            t2.exports = function(t5) {
                return t5.webpackPolyfill || (t5.deprecate = function() {
                }, t5.paths = [], t5.children || (t5.children = []), Object.defineProperty(t5, "loaded", {
                    enumerable: true,
                    get: function() {
                        return t5.l;
                    }
                }), Object.defineProperty(t5, "id", {
                    enumerable: true,
                    get: function() {
                        return t5.i;
                    }
                }), t5.webpackPolyfill = 1), t5;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(70);
            if ("unknown" == n64.type) throw new Error("Unknown environment");
            t2.exports = n64.isNode ? r2(127) : (n64.isMongo, r2(30));
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(30);
            function o70(t5) {
                this.collection = t5, this.collectionName = t5.collectionName;
            }
            r2(68).inherits(o70, n64), o70.prototype.find = function(t5, e29, r48) {
                this.collection.find(t5, e29, function(t8, e32) {
                    if (t8) return r48(t8);
                    try {
                        e32.toArray(r48);
                    } catch (t9) {
                        r48(t9);
                    }
                });
            }, o70.prototype.findOne = function(t5, e29, r48) {
                this.collection.findOne(t5, e29, r48);
            }, o70.prototype.count = function(t5, e29, r48) {
                this.collection.count(t5, e29, r48);
            }, o70.prototype.distinct = function(t5, e29, r48, n66) {
                this.collection.distinct(t5, e29, r48, n66);
            }, o70.prototype.update = function(t5, e29, r48, n66) {
                this.collection.update(t5, e29, r48, n66);
            }, o70.prototype.updateMany = function(t5, e29, r48, n66) {
                this.collection.updateMany(t5, e29, r48, n66);
            }, o70.prototype.updateOne = function(t5, e29, r48, n66) {
                this.collection.updateOne(t5, e29, r48, n66);
            }, o70.prototype.replaceOne = function(t5, e29, r48, n66) {
                this.collection.replaceOne(t5, e29, r48, n66);
            }, o70.prototype.deleteOne = function(t5, e29, r48) {
                this.collection.deleteOne(t5, e29, r48);
            }, o70.prototype.deleteMany = function(t5, e29, r48) {
                this.collection.deleteMany(t5, e29, r48);
            }, o70.prototype.remove = function(t5, e29, r48) {
                this.collection.remove(t5, e29, r48);
            }, o70.prototype.findAndModify = function(t5, e29, r48, n66) {
                var o71 = Array.isArray(r48.sort) ? r48.sort : [];
                this.collection.findAndModify(t5, o71, e29, r48, n66);
            }, o70.prototype.findStream = function(t5, e29, r48) {
                return this.collection.find(t5, e29).stream(r48);
            }, o70.prototype.findCursor = function(t5, e29) {
                return this.collection.find(t5, e29);
            }, t2.exports = o70;
        },
        function(t2, e3, r2) {
            (function(r48, n64, o70) {
                var i42, s36, a43, u45;
                function c33(t5) {
                    return (c33 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                        return typeof t8;
                    } : function(t8) {
                        return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                    })(t5);
                }
                /* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2013-2017 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */ u45 = function() {
                    var t5, e29, i43;
                    return (function t8(e32, r50, n66) {
                        function o71(s37, a44) {
                            if (!r50[s37]) {
                                if (!e32[s37]) {
                                    var u46 = "function" == typeof _dereq_ && _dereq_;
                                    if (!a44 && u46) return u46(s37, true);
                                    if (i44) return i44(s37, true);
                                    var c34 = new Error("Cannot find module '" + s37 + "'");
                                    throw c34.code = "MODULE_NOT_FOUND", c34;
                                }
                                var l28 = r50[s37] = {
                                    exports: {
                                    }
                                };
                                e32[s37][0].call(l28.exports, function(t9) {
                                    var r51 = e32[s37][1][t9];
                                    return o71(r51 || t9);
                                }, l28, l28.exports, t8, e32, r50, n66);
                            }
                            return r50[s37].exports;
                        }
                        for(var i44 = "function" == typeof _dereq_ && _dereq_, s37 = 0; s37 < n66.length; s37++)o71(n66[s37]);
                        return o71;
                    })({
                        1: [
                            function(t9, e32, r50) {
                                "use strict";
                                e32.exports = function(t10) {
                                    var e33 = t10._SomePromiseArray;
                                    function r51(t11) {
                                        var r52 = new e33(t11), n66 = r52.promise();
                                        return r52.setHowMany(1), r52.setUnwrap(), r52.init(), n66;
                                    }
                                    t10.any = function(t11) {
                                        return r51(t11);
                                    }, t10.prototype.any = function() {
                                        return r51(this);
                                    };
                                };
                            },
                            {
                            }
                        ],
                        2: [
                            function(t9, e32, n66) {
                                "use strict";
                                var o71;
                                try {
                                    throw new Error;
                                } catch (t10) {
                                    o71 = t10;
                                }
                                var i44 = t9("./schedule"), s37 = t9("./queue"), a44 = t9("./util");
                                function u47() {
                                    this._customScheduler = false, this._isTickUsed = false, this._lateQueue = new s37(16), this._normalQueue = new s37(16), this._haveDrainedQueues = false, this._trampolineEnabled = true;
                                    var t10 = this;
                                    this.drainQueues = function() {
                                        t10._drainQueues();
                                    }, this._schedule = i44;
                                }
                                function c35(t10, e33, r50) {
                                    this._lateQueue.push(t10, e33, r50), this._queueTick();
                                }
                                function l29(t10, e33, r50) {
                                    this._normalQueue.push(t10, e33, r50), this._queueTick();
                                }
                                function f24(t10) {
                                    this._normalQueue._pushOne(t10), this._queueTick();
                                }
                                u47.prototype.setScheduler = function(t10) {
                                    var e33 = this._schedule;
                                    return this._schedule = t10, this._customScheduler = true, e33;
                                }, u47.prototype.hasCustomScheduler = function() {
                                    return this._customScheduler;
                                }, u47.prototype.enableTrampoline = function() {
                                    this._trampolineEnabled = true;
                                }, u47.prototype.disableTrampolineIfNecessary = function() {
                                    a44.hasDevTools && (this._trampolineEnabled = false);
                                }, u47.prototype.haveItemsQueued = function() {
                                    return this._isTickUsed || this._haveDrainedQueues;
                                }, u47.prototype.fatalError = function(t10, e33) {
                                    e33 ? (r48.stderr.write("Fatal " + (t10 instanceof Error ? t10.stack : t10) + "\n"), r48.exit(2)) : this.throwLater(t10);
                                }, u47.prototype.throwLater = function(t10, e33) {
                                    if (1 === arguments.length && (e33 = t10, t10 = function() {
                                        throw e33;
                                    }), "undefined" != typeof setTimeout) setTimeout(function() {
                                        t10(e33);
                                    }, 0);
                                    else try {
                                        this._schedule(function() {
                                            t10(e33);
                                        });
                                    } catch (t11) {
                                        throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
                                    }
                                }, a44.hasDevTools ? (u47.prototype.invokeLater = function(t10, e33, r50) {
                                    this._trampolineEnabled ? c35.call(this, t10, e33, r50) : this._schedule(function() {
                                        setTimeout(function() {
                                            t10.call(e33, r50);
                                        }, 100);
                                    });
                                }, u47.prototype.invoke = function(t10, e33, r50) {
                                    this._trampolineEnabled ? l29.call(this, t10, e33, r50) : this._schedule(function() {
                                        t10.call(e33, r50);
                                    });
                                }, u47.prototype.settlePromises = function(t10) {
                                    this._trampolineEnabled ? f24.call(this, t10) : this._schedule(function() {
                                        t10._settlePromises();
                                    });
                                }) : (u47.prototype.invokeLater = c35, u47.prototype.invoke = l29, u47.prototype.settlePromises = f24), u47.prototype._drainQueue = function(t10) {
                                    for(; t10.length() > 0;){
                                        var e33 = t10.shift();
                                        if ("function" == typeof e33) {
                                            var r50 = t10.shift(), n67 = t10.shift();
                                            e33.call(r50, n67);
                                        } else e33._settlePromises();
                                    }
                                }, u47.prototype._drainQueues = function() {
                                    this._drainQueue(this._normalQueue), this._reset(), this._haveDrainedQueues = true, this._drainQueue(this._lateQueue);
                                }, u47.prototype._queueTick = function() {
                                    this._isTickUsed || (this._isTickUsed = true, this._schedule(this.drainQueues));
                                }, u47.prototype._reset = function() {
                                    this._isTickUsed = false;
                                }, e32.exports = u47, e32.exports.firstLineError = o71;
                            },
                            {
                                "./queue": 26,
                                "./schedule": 29,
                                "./util": 36
                            }
                        ],
                        3: [
                            function(t9, e32, r51) {
                                "use strict";
                                e32.exports = function(t10, e34, r52, n66) {
                                    var o71 = false, i44 = function(t11, e35) {
                                        this._reject(e35);
                                    }, s37 = function(t11, e35) {
                                        e35.promiseRejectionQueued = true, e35.bindingPromise._then(i44, i44, null, this, t11);
                                    }, a44 = function(t11, e35) {
                                        0 == (50397184 & this._bitField) && this._resolveCallback(e35.target);
                                    }, u47 = function(t11, e35) {
                                        e35.promiseRejectionQueued || this._reject(t11);
                                    };
                                    t10.prototype.bind = function(i45) {
                                        o71 || (o71 = true, t10.prototype._propagateFrom = n66.propagateFromFunction(), t10.prototype._boundValue = n66.boundValueFunction());
                                        var c35 = r52(i45), l29 = new t10(e34);
                                        l29._propagateFrom(this, 1);
                                        var f24 = this._target();
                                        if (l29._setBoundTo(c35), c35 instanceof t10) {
                                            var p21 = {
                                                promiseRejectionQueued: false,
                                                promise: l29,
                                                target: f24,
                                                bindingPromise: c35
                                            };
                                            f24._then(e34, s37, void 0, l29, p21), c35._then(a44, u47, void 0, l29, p21), l29._setOnCancel(c35);
                                        } else l29._resolveCallback(f24);
                                        return l29;
                                    }, t10.prototype._setBoundTo = function(t11) {
                                        (void 0) !== t11 ? (this._bitField = 2097152 | this._bitField, this._boundTo = t11) : this._bitField = -2097153 & this._bitField;
                                    }, t10.prototype._isBound = function() {
                                        return 2097152 == (2097152 & this._bitField);
                                    }, t10.bind = function(e35, r53) {
                                        return t10.resolve(r53).bind(e35);
                                    };
                                };
                            },
                            {
                            }
                        ],
                        4: [
                            function(t9, e32, r51) {
                                "use strict";
                                var n66;
                                "undefined" != typeof Promise && (n66 = Promise);
                                var o71 = t9("./promise")();
                                o71.noConflict = function() {
                                    try {
                                        Promise === o71 && (Promise = n66);
                                    } catch (t10) {
                                    }
                                    return o71;
                                }, e32.exports = o71;
                            },
                            {
                                "./promise": 22
                            }
                        ],
                        5: [
                            function(t9, e32, r51) {
                                "use strict";
                                var n66 = Object.create;
                                if (n66) {
                                    var o71 = n66(null), i44 = n66(null);
                                    o71[" size"] = i44[" size"] = 0;
                                }
                                e32.exports = function(e34) {
                                    var r52 = t9("./util"), n68 = r52.canEvaluate;
                                    function o72(t10) {
                                        return (function(t11, n69) {
                                            var o73;
                                            if (null != t11 && (o73 = t11[n69]), "function" != typeof o73) {
                                                var i45 = "Object " + r52.classString(t11) + " has no method '" + r52.toString(n69) + "'";
                                                throw new e34.TypeError(i45);
                                            }
                                            return o73;
                                        })(t10, this.pop()).apply(t10, this);
                                    }
                                    function i46(t10) {
                                        return t10[this];
                                    }
                                    function s37(t10) {
                                        var e35 = +this;
                                        return e35 < 0 && (e35 = Math.max(0, e35 + t10.length)), t10[e35];
                                    }
                                    r52.isIdentifier, e34.prototype.call = function(t10) {
                                        var e35 = [].slice.call(arguments, 1);
                                        return e35.push(t10), this._then(o72, void 0, void 0, e35, void 0);
                                    }, e34.prototype.get = function(t10) {
                                        var e35;
                                        if ("number" == typeof t10) e35 = s37;
                                        else if (n68) {
                                            var r53 = void 0(t10);
                                            e35 = null !== r53 ? r53 : i46;
                                        } else e35 = i46;
                                        return this._then(e35, void 0, void 0, t10, void 0);
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        6: [
                            function(t9, e32, r51) {
                                "use strict";
                                e32.exports = function(e34, r52, n66, o72) {
                                    var i46 = t9("./util"), s37 = i46.tryCatch, a44 = i46.errorObj, u47 = e34._async;
                                    e34.prototype.break = e34.prototype.cancel = function() {
                                        if (!o72.cancellation()) return this._warn("cancellation is disabled");
                                        for(var t10 = this, e35 = t10; t10._isCancellable();){
                                            if (!t10._cancelBy(e35)) {
                                                e35._isFollowing() ? e35._followee().cancel() : e35._cancelBranched();
                                                break;
                                            }
                                            var r54 = t10._cancellationParent;
                                            if (null == r54 || !r54._isCancellable()) {
                                                t10._isFollowing() ? t10._followee().cancel() : t10._cancelBranched();
                                                break;
                                            }
                                            t10._isFollowing() && t10._followee().cancel(), t10._setWillBeCancelled(), e35 = t10, t10 = r54;
                                        }
                                    }, e34.prototype._branchHasCancelled = function() {
                                        this._branchesRemainingToCancel--;
                                    }, e34.prototype._enoughBranchesHaveCancelled = function() {
                                        return (void 0) === this._branchesRemainingToCancel || this._branchesRemainingToCancel <= 0;
                                    }, e34.prototype._cancelBy = function(t10) {
                                        return t10 === this ? (this._branchesRemainingToCancel = 0, this._invokeOnCancel(), true) : (this._branchHasCancelled(), !!this._enoughBranchesHaveCancelled() && (this._invokeOnCancel(), true));
                                    }, e34.prototype._cancelBranched = function() {
                                        this._enoughBranchesHaveCancelled() && this._cancel();
                                    }, e34.prototype._cancel = function() {
                                        this._isCancellable() && (this._setCancelled(), u47.invoke(this._cancelPromises, this, void 0));
                                    }, e34.prototype._cancelPromises = function() {
                                        this._length() > 0 && this._settlePromises();
                                    }, e34.prototype._unsetOnCancel = function() {
                                        this._onCancelField = void 0;
                                    }, e34.prototype._isCancellable = function() {
                                        return this.isPending() && !this._isCancelled();
                                    }, e34.prototype.isCancellable = function() {
                                        return this.isPending() && !this.isCancelled();
                                    }, e34.prototype._doInvokeOnCancel = function(t10, e35) {
                                        if (i46.isArray(t10)) for(var r55 = 0; r55 < t10.length; ++r55)this._doInvokeOnCancel(t10[r55], e35);
                                        else if ((void 0) !== t10) {
                                            if ("function" == typeof t10) {
                                                if (!e35) {
                                                    var n68 = s37(t10).call(this._boundValue());
                                                    n68 === a44 && (this._attachExtraTrace(n68.e), u47.throwLater(n68.e));
                                                }
                                            } else t10._resultCancelled(this);
                                        }
                                    }, e34.prototype._invokeOnCancel = function() {
                                        var t10 = this._onCancel();
                                        this._unsetOnCancel(), u47.invoke(this._doInvokeOnCancel, this, t10);
                                    }, e34.prototype._invokeInternalOnCancel = function() {
                                        this._isCancellable() && (this._doInvokeOnCancel(this._onCancel(), true), this._unsetOnCancel());
                                    }, e34.prototype._resultCancelled = function() {
                                        this.cancel();
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        7: [
                            function(t9, e32, r51) {
                                "use strict";
                                e32.exports = function(e34) {
                                    var r52 = t9("./util"), n66 = t9("./es5").keys, o72 = r52.tryCatch, i46 = r52.errorObj;
                                    return function(t10, s37, a44) {
                                        return function(u47) {
                                            var c35 = a44._boundValue();
                                            t: for(var l29 = 0; l29 < t10.length; ++l29){
                                                var f24 = t10[l29];
                                                if (f24 === Error || null != f24 && f24.prototype instanceof Error) {
                                                    if (u47 instanceof f24) return o72(s37).call(c35, u47);
                                                } else if ("function" == typeof f24) {
                                                    var p22 = o72(f24).call(c35, u47);
                                                    if (p22 === i46) return p22;
                                                    if (p22) return o72(s37).call(c35, u47);
                                                } else if (r52.isObject(u47)) {
                                                    for(var h14 = n66(f24), y16 = 0; y16 < h14.length; ++y16){
                                                        var d17 = h14[y16];
                                                        if (f24[d17] != u47[d17]) continue t;
                                                    }
                                                    return o72(s37).call(c35, u47);
                                                }
                                            }
                                            return e34;
                                        };
                                    };
                                };
                            },
                            {
                                "./es5": 13,
                                "./util": 36
                            }
                        ],
                        8: [
                            function(t9, e32, r51) {
                                "use strict";
                                e32.exports = function(t10) {
                                    var e34 = false, r52 = [];
                                    function n66() {
                                        this._trace = new n66.CapturedTrace(o72());
                                    }
                                    function o72() {
                                        var t11 = r52.length - 1;
                                        if (t11 >= 0) return r52[t11];
                                    }
                                    return t10.prototype._promiseCreated = function() {
                                    }, t10.prototype._pushContext = function() {
                                    }, t10.prototype._popContext = function() {
                                        return null;
                                    }, t10._peekContext = t10.prototype._peekContext = function() {
                                    }, n66.prototype._pushContext = function() {
                                        (void 0) !== this._trace && (this._trace._promiseCreated = null, r52.push(this._trace));
                                    }, n66.prototype._popContext = function() {
                                        if ((void 0) !== this._trace) {
                                            var t11 = r52.pop(), e35 = t11._promiseCreated;
                                            return t11._promiseCreated = null, e35;
                                        }
                                        return null;
                                    }, n66.CapturedTrace = null, n66.create = function() {
                                        if (e34) return new n66;
                                    }, n66.deactivateLongStackTraces = function() {
                                    }, n66.activateLongStackTraces = function() {
                                        var r55 = t10.prototype._pushContext, i46 = t10.prototype._popContext, s37 = t10._peekContext, a44 = t10.prototype._peekContext, u47 = t10.prototype._promiseCreated;
                                        n66.deactivateLongStackTraces = function() {
                                            t10.prototype._pushContext = r55, t10.prototype._popContext = i46, t10._peekContext = s37, t10.prototype._peekContext = a44, t10.prototype._promiseCreated = u47, e34 = false;
                                        }, e34 = true, t10.prototype._pushContext = n66.prototype._pushContext, t10.prototype._popContext = n66.prototype._popContext, t10._peekContext = t10.prototype._peekContext = o72, t10.prototype._promiseCreated = function() {
                                            var t12 = this._peekContext();
                                            t12 && null == t12._promiseCreated && (t12._promiseCreated = this);
                                        };
                                    }, n66;
                                };
                            },
                            {
                            }
                        ],
                        9: [
                            function(t9, e32, n66) {
                                "use strict";
                                e32.exports = function(e34, n69) {
                                    var o72, i46, s37, a44 = e34._getDomain, u47 = e34._async, l29 = t9("./errors").Warning, f25 = t9("./util"), p23 = f25.canAttachTrace, h15 = /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/, y17 = /\((?:timers\.js):\d+:\d+\)/, d18 = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/, _11 = null, v7 = null, m5 = false, g7 = !(0 == f25.env("BLUEBIRD_DEBUG")), b7 = !(0 == f25.env("BLUEBIRD_WARNINGS") || !g7 && !f25.env("BLUEBIRD_WARNINGS")), w7 = !(0 == f25.env("BLUEBIRD_LONG_STACK_TRACES") || !g7 && !f25.env("BLUEBIRD_LONG_STACK_TRACES")), O7 = 0 != f25.env("BLUEBIRD_W_FORGOTTEN_RETURN") && (b7 || !!f25.env("BLUEBIRD_W_FORGOTTEN_RETURN"));
                                    e34.prototype.suppressUnhandledRejections = function() {
                                        var t10 = this._target();
                                        t10._bitField = -1048577 & t10._bitField | 524288;
                                    }, e34.prototype._ensurePossibleRejectionHandled = function() {
                                        if (0 == (524288 & this._bitField)) {
                                            this._setRejectionIsUnhandled();
                                            var t10 = this;
                                            setTimeout(function() {
                                                t10._notifyUnhandledRejection();
                                            }, 1);
                                        }
                                    }, e34.prototype._notifyUnhandledRejectionIsHandled = function() {
                                        W4("rejectionHandled", o72, void 0, this);
                                    }, e34.prototype._setReturnedNonUndefined = function() {
                                        this._bitField = 268435456 | this._bitField;
                                    }, e34.prototype._returnedNonUndefined = function() {
                                        return 0 != (268435456 & this._bitField);
                                    }, e34.prototype._notifyUnhandledRejection = function() {
                                        if (this._isRejectionUnhandled()) {
                                            var t12 = this._settledValue();
                                            this._setUnhandledRejectionIsNotified(), W4("unhandledRejection", i46, t12, this);
                                        }
                                    }, e34.prototype._setUnhandledRejectionIsNotified = function() {
                                        this._bitField = 262144 | this._bitField;
                                    }, e34.prototype._unsetUnhandledRejectionIsNotified = function() {
                                        this._bitField = -262145 & this._bitField;
                                    }, e34.prototype._isUnhandledRejectionNotified = function() {
                                        return (262144 & this._bitField) > 0;
                                    }, e34.prototype._setRejectionIsUnhandled = function() {
                                        this._bitField = 1048576 | this._bitField;
                                    }, e34.prototype._unsetRejectionIsUnhandled = function() {
                                        this._bitField = -1048577 & this._bitField, this._isUnhandledRejectionNotified() && (this._unsetUnhandledRejectionIsNotified(), this._notifyUnhandledRejectionIsHandled());
                                    }, e34.prototype._isRejectionUnhandled = function() {
                                        return (1048576 & this._bitField) > 0;
                                    }, e34.prototype._warn = function(t13, e36, r51) {
                                        return L5(t13, e36, r51 || this);
                                    }, e34.onPossiblyUnhandledRejection = function(t13) {
                                        var e36 = a44();
                                        i46 = "function" == typeof t13 ? null === e36 ? t13 : f25.domainBind(e36, t13) : void 0;
                                    }, e34.onUnhandledRejectionHandled = function(t13) {
                                        var e36 = a44();
                                        o72 = "function" == typeof t13 ? null === e36 ? t13 : f25.domainBind(e36, t13) : void 0;
                                    };
                                    var S6 = function() {
                                    };
                                    e34.longStackTraces = function() {
                                        if (u47.haveItemsQueued() && !X3.longStackTraces) throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
                                        if (!X3.longStackTraces && Y4()) {
                                            var t13 = e34.prototype._captureStackTrace, r51 = e34.prototype._attachExtraTrace;
                                            X3.longStackTraces = true, S6 = function() {
                                                if (u47.haveItemsQueued() && !X3.longStackTraces) throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
                                                e34.prototype._captureStackTrace = t13, e34.prototype._attachExtraTrace = r51, n69.deactivateLongStackTraces(), u47.enableTrampoline(), X3.longStackTraces = false;
                                            }, e34.prototype._captureStackTrace = I, e34.prototype._attachExtraTrace = F6, n69.activateLongStackTraces(), u47.disableTrampolineIfNecessary();
                                        }
                                    }, e34.hasLongStackTraces = function() {
                                        return X3.longStackTraces && Y4();
                                    };
                                    var A3 = function() {
                                        try {
                                            if ("function" == typeof CustomEvent) {
                                                var t14 = new CustomEvent("CustomEvent");
                                                return f25.global.dispatchEvent(t14), function(t15, e36) {
                                                    var r52 = new CustomEvent(t15.toLowerCase(), {
                                                        detail: e36,
                                                        cancelable: true
                                                    });
                                                    return !f25.global.dispatchEvent(r52);
                                                };
                                            }
                                            return "function" == typeof Event ? (t14 = new Event("CustomEvent"), f25.global.dispatchEvent(t14), function(t15, e36) {
                                                var r52 = new Event(t15.toLowerCase(), {
                                                    cancelable: true
                                                });
                                                return r52.detail = e36, !f25.global.dispatchEvent(r52);
                                            }) : ((t14 = document.createEvent("CustomEvent")).initCustomEvent("testingtheevent", false, true, {
                                            }), f25.global.dispatchEvent(t14), function(t15, e36) {
                                                var r52 = document.createEvent("CustomEvent");
                                                return r52.initCustomEvent(t15.toLowerCase(), false, true, e36), !f25.global.dispatchEvent(r52);
                                            });
                                        } catch (t15) {
                                        }
                                        return function() {
                                            return false;
                                        };
                                    }(), $3 = f25.isNode ? function() {
                                        return r48.emit.apply(r48, arguments);
                                    } : f25.global ? function(t15) {
                                        var e36 = "on" + t15.toLowerCase(), r52 = f25.global[e36];
                                        return !!r52 && (r52.apply(f25.global, [].slice.call(arguments, 1)), true);
                                    } : function() {
                                        return false;
                                    };
                                    function E4(t15, e36) {
                                        return {
                                            promise: e36
                                        };
                                    }
                                    var j4 = {
                                        promiseCreated: E4,
                                        promiseFulfilled: E4,
                                        promiseRejected: E4,
                                        promiseResolved: E4,
                                        promiseCancelled: E4,
                                        promiseChained: function(t15, e36, r52) {
                                            return {
                                                promise: e36,
                                                child: r52
                                            };
                                        },
                                        warning: function(t15, e36) {
                                            return {
                                                warning: e36
                                            };
                                        },
                                        unhandledRejection: function(t15, e36, r52) {
                                            return {
                                                reason: e36,
                                                promise: r52
                                            };
                                        },
                                        rejectionHandled: E4
                                    }, P3 = function(t15) {
                                        var e36 = false;
                                        try {
                                            e36 = $3.apply(null, arguments);
                                        } catch (t16) {
                                            u47.throwLater(t16), e36 = true;
                                        }
                                        var r52 = false;
                                        try {
                                            r52 = A3(t15, j4[t15].apply(null, arguments));
                                        } catch (t16) {
                                            u47.throwLater(t16), r52 = true;
                                        }
                                        return r52 || e36;
                                    };
                                    function x5() {
                                        return false;
                                    }
                                    function T4(t15, e36, r52) {
                                        var n70 = this;
                                        try {
                                            t15(e36, r52, function(t16) {
                                                if ("function" != typeof t16) throw new TypeError("onCancel must be a function, got: " + f25.toString(t16));
                                                n70._attachCancellationCallback(t16);
                                            });
                                        } catch (t16) {
                                            return t16;
                                        }
                                    }
                                    function N4(t15) {
                                        if (!this._isCancellable()) return this;
                                        var e36 = this._onCancel();
                                        (void 0) !== e36 ? f25.isArray(e36) ? e36.push(t15) : this._setOnCancel([
                                            e36,
                                            t15
                                        ]) : this._setOnCancel(t15);
                                    }
                                    function k3() {
                                        return this._onCancelField;
                                    }
                                    function B3(t15) {
                                        this._onCancelField = t15;
                                    }
                                    function R3() {
                                        this._cancellationParent = void 0, this._onCancelField = void 0;
                                    }
                                    function C4(t15, e36) {
                                        if (0 != (1 & e36)) {
                                            this._cancellationParent = t15;
                                            var r52 = t15._branchesRemainingToCancel;
                                            (void 0) === r52 && (r52 = 0), t15._branchesRemainingToCancel = r52 + 1;
                                        }
                                        0 != (2 & e36) && t15._isBound() && this._setBoundTo(t15._boundTo);
                                    }
                                    e34.config = function(t15) {
                                        if ("longStackTraces" in (t15 = Object(t15)) && (t15.longStackTraces ? e34.longStackTraces() : !t15.longStackTraces && e34.hasLongStackTraces() && S6()), "warnings" in t15) {
                                            var r55 = t15.warnings;
                                            X3.warnings = !!r55, O7 = X3.warnings, f25.isObject(r55) && "wForgottenReturn" in r55 && (O7 = !!r55.wForgottenReturn);
                                        }
                                        if ("cancellation" in t15 && t15.cancellation && !X3.cancellation) {
                                            if (u47.haveItemsQueued()) throw new Error("cannot enable cancellation after promises are in use");
                                            e34.prototype._clearCancellationData = R3, e34.prototype._propagateFrom = C4, e34.prototype._onCancel = k3, e34.prototype._setOnCancel = B3, e34.prototype._attachCancellationCallback = N4, e34.prototype._execute = T4, D = C4, X3.cancellation = true;
                                        }
                                        return "monitoring" in t15 && (t15.monitoring && !X3.monitoring ? (X3.monitoring = true, e34.prototype._fireEvent = P3) : !t15.monitoring && X3.monitoring && (X3.monitoring = false, e34.prototype._fireEvent = x5)), e34;
                                    }, e34.prototype._fireEvent = x5, e34.prototype._execute = function(t15, e36, r56) {
                                        try {
                                            t15(e36, r56);
                                        } catch (t16) {
                                            return t16;
                                        }
                                    }, e34.prototype._onCancel = function() {
                                    }, e34.prototype._setOnCancel = function(t15) {
                                    }, e34.prototype._attachCancellationCallback = function(t15) {
                                    }, e34.prototype._captureStackTrace = function() {
                                    }, e34.prototype._attachExtraTrace = function() {
                                    }, e34.prototype._clearCancellationData = function() {
                                    }, e34.prototype._propagateFrom = function(t15, e36) {
                                    };
                                    var D = function(t15, e36) {
                                        0 != (2 & e36) && t15._isBound() && this._setBoundTo(t15._boundTo);
                                    };
                                    function M6() {
                                        var t15 = this._boundTo;
                                        return (void 0) !== t15 && t15 instanceof e34 ? t15.isFulfilled() ? t15.value() : void 0 : t15;
                                    }
                                    function I() {
                                        this._trace = new J(this._peekContext());
                                    }
                                    function F6(t15, e36) {
                                        if (p23(t15)) {
                                            var r56 = this._trace;
                                            if ((void 0) !== r56 && e36 && (r56 = r56._parent), (void 0) !== r56) r56.attachExtraTrace(t15);
                                            else if (!t15.__stackCleaned__) {
                                                var n70 = V5(t15);
                                                f25.notEnumerableProp(t15, "stack", n70.message + "\n" + n70.stack.join("\n")), f25.notEnumerableProp(t15, "__stackCleaned__", true);
                                            }
                                        }
                                    }
                                    function L5(t15, r57, n71) {
                                        if (X3.warnings) {
                                            var o73, i47 = new l29(t15);
                                            if (r57) n71._attachExtraTrace(i47);
                                            else if (X3.longStackTraces && (o73 = e34._peekContext())) o73.attachExtraTrace(i47);
                                            else {
                                                var s38 = V5(i47);
                                                i47.stack = s38.message + "\n" + s38.stack.join("\n");
                                            }
                                            P3("warning", i47) || q4(i47, "", true);
                                        }
                                    }
                                    function U4(t15) {
                                        for(var e36 = [], r57 = 0; r57 < t15.length; ++r57){
                                            var n71 = t15[r57], o74 = "    (No stack trace)" === n71 || _11.test(n71), i48 = o74 && K4(n71);
                                            o74 && !i48 && (m5 && " " !== n71.charAt(0) && (n71 = "    " + n71), e36.push(n71));
                                        }
                                        return e36;
                                    }
                                    function V5(t15) {
                                        var e36 = t15.stack, r57 = t15.toString();
                                        return e36 = "string" == typeof e36 && e36.length > 0 ? (function(t16) {
                                            for(var e37 = t16.stack.replace(/\s+$/g, "").split("\n"), r58 = 0; r58 < e37.length; ++r58){
                                                var n72 = e37[r58];
                                                if ("    (No stack trace)" === n72 || _11.test(n72)) break;
                                            }
                                            return r58 > 0 && "SyntaxError" != t16.name && (e37 = e37.slice(r58)), e37;
                                        })(t15) : [
                                            "    (No stack trace)"
                                        ], {
                                            message: r57,
                                            stack: "SyntaxError" == t15.name ? e36 : U4(e36)
                                        };
                                    }
                                    function q4(t15, e36, r57) {
                                        if ("undefined" != typeof console) {
                                            var n73;
                                            if (f25.isObject(t15)) {
                                                var o75 = t15.stack;
                                                n73 = e36 + v7(o75, t15);
                                            } else n73 = e36 + String(t15);
                                            "function" == typeof s37 ? s37(n73, r57) : "function" != typeof console.log && "object" !== c33(console.log) || console.log(n73);
                                        }
                                    }
                                    function W4(t15, e36, r57, n74) {
                                        var o76 = false;
                                        try {
                                            "function" == typeof e36 && (o76 = true, "rejectionHandled" === t15 ? e36(n74) : e36(r57, n74));
                                        } catch (t16) {
                                            u47.throwLater(t16);
                                        }
                                        "unhandledRejection" === t15 ? P3(t15, r57, n74) || o76 || q4(r57, "Unhandled rejection ") : P3(t15, n74);
                                    }
                                    function H(t15) {
                                        var e36;
                                        if ("function" == typeof t15) e36 = "[function " + (t15.name || "anonymous") + "]";
                                        else {
                                            if (e36 = t15 && "function" == typeof t15.toString ? t15.toString() : f25.toString(t15), /\[object [a-zA-Z0-9$_]+\]/.test(e36)) try {
                                                e36 = JSON.stringify(t15);
                                            } catch (t16) {
                                            }
                                            0 === e36.length && (e36 = "(empty array)");
                                        }
                                        return "(<" + (function(t16) {
                                            return t16.length < 41 ? t16 : t16.substr(0, 38) + "...";
                                        })(e36) + ">, no stack trace)";
                                    }
                                    function Y4() {
                                        return "function" == typeof G;
                                    }
                                    var K4 = function() {
                                        return false;
                                    }, z = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
                                    function Q(t15) {
                                        var e36 = t15.match(z);
                                        if (e36) return {
                                            fileName: e36[1],
                                            line: parseInt(e36[2], 10)
                                        };
                                    }
                                    function J(t15) {
                                        this._parent = t15, this._promisesCreated = 0;
                                        var e36 = this._length = 1 + ((void 0) === t15 ? 0 : t15._length);
                                        G(this, J), e36 > 32 && this.uncycle();
                                    }
                                    f25.inherits(J, Error), n69.CapturedTrace = J, J.prototype.uncycle = function() {
                                        var t15 = this._length;
                                        if (!(t15 < 2)) {
                                            for(var e36 = [], r57 = {
                                            }, n74 = 0, o76 = this; (void 0) !== o76; ++n74)e36.push(o76), o76 = o76._parent;
                                            for(n74 = (t15 = this._length = n74) - 1; n74 >= 0; --n74){
                                                var i49 = e36[n74].stack;
                                                (void 0) === r57[i49] && (r57[i49] = n74);
                                            }
                                            for(n74 = 0; n74 < t15; ++n74){
                                                var s39 = r57[e36[n74].stack];
                                                if ((void 0) !== s39 && s39 !== n74) {
                                                    s39 > 0 && (e36[s39 - 1]._parent = void 0, e36[s39 - 1]._length = 1), e36[n74]._parent = void 0, e36[n74]._length = 1;
                                                    var a45 = n74 > 0 ? e36[n74 - 1] : this;
                                                    s39 < t15 - 1 ? (a45._parent = e36[s39 + 1], a45._parent.uncycle(), a45._length = a45._parent._length + 1) : (a45._parent = void 0, a45._length = 1);
                                                    for(var u48 = a45._length + 1, c35 = n74 - 2; c35 >= 0; --c35)e36[c35]._length = u48, u48++;
                                                    return;
                                                }
                                            }
                                        }
                                    }, J.prototype.attachExtraTrace = function(t15) {
                                        if (!t15.__stackCleaned__) {
                                            this.uncycle();
                                            for(var e37 = V5(t15), r58 = e37.message, n75 = [
                                                e37.stack
                                            ], o77 = this; (void 0) !== o77;)n75.push(U4(o77.stack.split("\n"))), o77 = o77._parent;
                                            (function(t16) {
                                                for(var e38 = t16[0], r59 = 1; r59 < t16.length; ++r59){
                                                    for(var n76 = t16[r59], o78 = e38.length - 1, i50 = e38[o78], s40 = -1, a46 = n76.length - 1; a46 >= 0; --a46)if (n76[a46] === i50) {
                                                        s40 = a46;
                                                        break;
                                                    }
                                                    for(a46 = s40; a46 >= 0; --a46){
                                                        var u49 = n76[a46];
                                                        if (e38[o78] !== u49) break;
                                                        e38.pop(), o78--;
                                                    }
                                                    e38 = n76;
                                                }
                                            })(n75), (function(t16) {
                                                for(var e38 = 0; e38 < t16.length; ++e38)(0 === t16[e38].length || e38 + 1 < t16.length && t16[e38][0] === t16[e38 + 1][0]) && (t16.splice(e38, 1), e38--);
                                            })(n75), f25.notEnumerableProp(t15, "stack", function(t16, e38) {
                                                for(var r59 = 0; r59 < e38.length - 1; ++r59)e38[r59].push("From previous event:"), e38[r59] = e38[r59].join("\n");
                                                return r59 < e38.length && (e38[r59] = e38[r59].join("\n")), t16 + "\n" + e38.join("\n");
                                            }(r58, n75)), f25.notEnumerableProp(t15, "__stackCleaned__", true);
                                        }
                                    };
                                    var G = function() {
                                        var t15 = /^\s*at\s*/, e38 = function(t16, e39) {
                                            return "string" == typeof t16 ? t16 : (void 0) !== e39.name && (void 0) !== e39.message ? e39.toString() : H(e39);
                                        };
                                        if ("number" == typeof Error.stackTraceLimit && "function" == typeof Error.captureStackTrace) {
                                            Error.stackTraceLimit += 6, _11 = t15, v7 = e38;
                                            var r59 = Error.captureStackTrace;
                                            return K4 = function(t16) {
                                                return h15.test(t16);
                                            }, function(t16, e39) {
                                                Error.stackTraceLimit += 6, r59(t16, e39), Error.stackTraceLimit -= 6;
                                            };
                                        }
                                        var n77, o79 = new Error;
                                        if ("string" == typeof o79.stack && o79.stack.split("\n")[0].indexOf("stackDetection@") >= 0) return _11 = /@/, v7 = e38, m5 = true, function(t16) {
                                            t16.stack = (new Error).stack;
                                        };
                                        try {
                                            throw new Error;
                                        } catch (t16) {
                                            n77 = "stack" in t16;
                                        }
                                        return !("stack" in o79) && n77 && "number" == typeof Error.stackTraceLimit ? (_11 = t15, v7 = e38, function(t16) {
                                            Error.stackTraceLimit += 6;
                                            try {
                                                throw new Error;
                                            } catch (e39) {
                                                t16.stack = e39.stack;
                                            }
                                            Error.stackTraceLimit -= 6;
                                        }) : (v7 = function(t16, e39) {
                                            return "string" == typeof t16 ? t16 : "object" !== c33(e39) && "function" != typeof e39 || (void 0) === e39.name || (void 0) === e39.message ? H(e39) : e39.toString();
                                        }, null);
                                    }();
                                    "undefined" != typeof console && (void 0) !== console.warn && (s37 = function(t15) {
                                        console.warn(t15);
                                    }, f25.isNode && r48.stderr.isTTY ? s37 = function(t15, e38) {
                                        var r60 = e38 ? "[33m" : "[31m";
                                        console.warn(r60 + t15 + "[0m\n");
                                    } : f25.isNode || "string" != typeof (new Error).stack || (s37 = function(t15, e38) {
                                        console.warn("%c" + t15, e38 ? "color: darkorange" : "color: red");
                                    }));
                                    var X3 = {
                                        warnings: b7,
                                        longStackTraces: false,
                                        cancellation: false,
                                        monitoring: false
                                    };
                                    return w7 && e34.longStackTraces(), {
                                        longStackTraces: function() {
                                            return X3.longStackTraces;
                                        },
                                        warnings: function() {
                                            return X3.warnings;
                                        },
                                        cancellation: function() {
                                            return X3.cancellation;
                                        },
                                        monitoring: function() {
                                            return X3.monitoring;
                                        },
                                        propagateFromFunction: function() {
                                            return D;
                                        },
                                        boundValueFunction: function() {
                                            return M6;
                                        },
                                        checkForgottenReturns: function(t15, e38, r60, n77, o79) {
                                            if ((void 0) === t15 && null !== e38 && O7) {
                                                if ((void 0) !== o79 && o79._returnedNonUndefined()) return;
                                                if (0 == (65535 & n77._bitField)) return;
                                                r60 && (r60 += " ");
                                                var i51 = "", s41 = "";
                                                if (e38._trace) {
                                                    for(var a47 = e38._trace.stack.split("\n"), u50 = U4(a47), c36 = u50.length - 1; c36 >= 0; --c36){
                                                        var l30 = u50[c36];
                                                        if (!y17.test(l30)) {
                                                            var f26 = l30.match(d18);
                                                            f26 && (i51 = "at " + f26[1] + ":" + f26[2] + ":" + f26[3] + " ");
                                                            break;
                                                        }
                                                    }
                                                    if (u50.length > 0) {
                                                        var p24 = u50[0];
                                                        for(c36 = 0; c36 < a47.length; ++c36)if (a47[c36] === p24) {
                                                            c36 > 0 && (s41 = "\n" + a47[c36 - 1]);
                                                            break;
                                                        }
                                                    }
                                                }
                                                var h16 = "a promise was created in a " + r60 + "handler " + i51 + "but was not returned from it, see http://goo.gl/rRqMUw" + s41;
                                                n77._warn(h16, true, e38);
                                            }
                                        },
                                        setBounds: function(t15, e38) {
                                            if (Y4()) {
                                                for(var r60, n77, o79 = t15.stack.split("\n"), i52 = e38.stack.split("\n"), s42 = -1, a48 = -1, u51 = 0; u51 < o79.length; ++u51)if (c37 = Q(o79[u51])) {
                                                    r60 = c37.fileName, s42 = c37.line;
                                                    break;
                                                }
                                                for(u51 = 0; u51 < i52.length; ++u51){
                                                    var c37;
                                                    if (c37 = Q(i52[u51])) {
                                                        n77 = c37.fileName, a48 = c37.line;
                                                        break;
                                                    }
                                                }
                                                s42 < 0 || a48 < 0 || !r60 || !n77 || r60 !== n77 || s42 >= a48 || (K4 = function(t16) {
                                                    if (h15.test(t16)) return true;
                                                    var e39 = Q(t16);
                                                    return !!(e39 && e39.fileName === r60 && s42 <= e39.line && e39.line <= a48);
                                                });
                                            }
                                        },
                                        warn: L5,
                                        deprecated: function(t15, e38) {
                                            var r61 = t15 + " is deprecated and will be removed in a future version.";
                                            return e38 && (r61 += " Use " + e38 + " instead."), L5(r61);
                                        },
                                        CapturedTrace: J,
                                        fireDomEvent: A3,
                                        fireGlobalEvent: $3
                                    };
                                };
                            },
                            {
                                "./errors": 12,
                                "./util": 36
                            }
                        ],
                        10: [
                            function(t9, e32, r61) {
                                "use strict";
                                e32.exports = function(t15) {
                                    function e34() {
                                        return this.value;
                                    }
                                    function r62() {
                                        throw this.reason;
                                    }
                                    t15.prototype.return = t15.prototype.thenReturn = function(r63) {
                                        return r63 instanceof t15 && r63.suppressUnhandledRejections(), this._then(e34, void 0, void 0, {
                                            value: r63
                                        }, void 0);
                                    }, t15.prototype.throw = t15.prototype.thenThrow = function(t16) {
                                        return this._then(r62, void 0, void 0, {
                                            reason: t16
                                        }, void 0);
                                    }, t15.prototype.catchThrow = function(t16) {
                                        if (arguments.length <= 1) return this._then(void 0, r62, void 0, {
                                            reason: t16
                                        }, void 0);
                                        var e38 = arguments[1], n66 = function() {
                                            throw e38;
                                        };
                                        return this.caught(t16, n66);
                                    }, t15.prototype.catchReturn = function(r63) {
                                        if (arguments.length <= 1) return r63 instanceof t15 && r63.suppressUnhandledRejections(), this._then(void 0, e34, void 0, {
                                            value: r63
                                        }, void 0);
                                        var n66 = arguments[1];
                                        n66 instanceof t15 && n66.suppressUnhandledRejections();
                                        var o72 = function() {
                                            return n66;
                                        };
                                        return this.caught(r63, o72);
                                    };
                                };
                            },
                            {
                            }
                        ],
                        11: [
                            function(t9, e32, r61) {
                                "use strict";
                                e32.exports = function(t15, e34) {
                                    var r62 = t15.reduce, n66 = t15.all;
                                    function o72() {
                                        return n66(this);
                                    }
                                    t15.prototype.each = function(t16) {
                                        return r62(this, t16, e34, 0)._then(o72, void 0, void 0, this, void 0);
                                    }, t15.prototype.mapSeries = function(t16) {
                                        return r62(this, t16, e34, e34);
                                    }, t15.each = function(t16, n69) {
                                        return r62(t16, n69, e34, 0)._then(o72, void 0, void 0, t16, void 0);
                                    }, t15.mapSeries = function(t16, n69) {
                                        return r62(t16, n69, e34, e34);
                                    };
                                };
                            },
                            {
                            }
                        ],
                        12: [
                            function(t9, e32, r61) {
                                "use strict";
                                var n66, o72, i46 = t9("./es5"), s37 = i46.freeze, a44 = t9("./util"), u47 = a44.inherits, c38 = a44.notEnumerableProp;
                                function l29(t15, e34) {
                                    function r62(n69) {
                                        if (!(this instanceof r62)) return new r62(n69);
                                        c38(this, "message", "string" == typeof n69 ? n69 : e34), c38(this, "name", t15), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : Error.call(this);
                                    }
                                    return u47(r62, Error), r62;
                                }
                                var f25 = l29("Warning", "warning"), p23 = l29("CancellationError", "cancellation error"), h15 = l29("TimeoutError", "timeout error"), y17 = l29("AggregateError", "aggregate error");
                                try {
                                    n66 = TypeError, o72 = RangeError;
                                } catch (t15) {
                                    n66 = l29("TypeError", "type error"), o72 = l29("RangeError", "range error");
                                }
                                for(var d18 = "join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "), _11 = 0; _11 < d18.length; ++_11)"function" == typeof Array.prototype[d18[_11]] && (y17.prototype[d18[_11]] = Array.prototype[d18[_11]]);
                                i46.defineProperty(y17.prototype, "length", {
                                    value: 0,
                                    configurable: false,
                                    writable: true,
                                    enumerable: true
                                }), y17.prototype.isOperational = true;
                                var v7 = 0;
                                function m5(t15) {
                                    if (!(this instanceof m5)) return new m5(t15);
                                    c38(this, "name", "OperationalError"), c38(this, "message", t15), this.cause = t15, this.isOperational = true, t15 instanceof Error ? (c38(this, "message", t15.message), c38(this, "stack", t15.stack)) : Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
                                }
                                y17.prototype.toString = function() {
                                    var t15 = Array(4 * v7 + 1).join(" "), e34 = "\n" + t15 + "AggregateError of:\n";
                                    v7++, t15 = Array(4 * v7 + 1).join(" ");
                                    for(var r62 = 0; r62 < this.length; ++r62){
                                        for(var n69 = this[r62] === this ? "[Circular AggregateError]" : this[r62] + "", o80 = n69.split("\n"), i53 = 0; i53 < o80.length; ++i53)o80[i53] = t15 + o80[i53];
                                        e34 += (n69 = o80.join("\n")) + "\n";
                                    }
                                    return v7--, e34;
                                }, u47(m5, Error);
                                var g7 = Error.__BluebirdErrorTypes__;
                                g7 || (g7 = s37({
                                    CancellationError: p23,
                                    TimeoutError: h15,
                                    OperationalError: m5,
                                    RejectionError: m5,
                                    AggregateError: y17
                                }), i46.defineProperty(Error, "__BluebirdErrorTypes__", {
                                    value: g7,
                                    writable: false,
                                    enumerable: false,
                                    configurable: false
                                })), e32.exports = {
                                    Error: Error,
                                    TypeError: n66,
                                    RangeError: o72,
                                    CancellationError: g7.CancellationError,
                                    OperationalError: g7.OperationalError,
                                    TimeoutError: g7.TimeoutError,
                                    AggregateError: g7.AggregateError,
                                    Warning: f25
                                };
                            },
                            {
                                "./es5": 13,
                                "./util": 36
                            }
                        ],
                        13: [
                            function(t9, e32, r61) {
                                var n66 = function() {
                                    return (void 0) === this;
                                }();
                                if (n66) e32.exports = {
                                    freeze: Object.freeze,
                                    defineProperty: Object.defineProperty,
                                    getDescriptor: Object.getOwnPropertyDescriptor,
                                    keys: Object.keys,
                                    names: Object.getOwnPropertyNames,
                                    getPrototypeOf: Object.getPrototypeOf,
                                    isArray: Array.isArray,
                                    isES5: n66,
                                    propertyIsWritable: function(t15, e34) {
                                        var r62 = Object.getOwnPropertyDescriptor(t15, e34);
                                        return !(r62 && !r62.writable && !r62.set);
                                    }
                                };
                                else {
                                    var o72 = {
                                    }.hasOwnProperty, i46 = {
                                    }.toString, s37 = {
                                    }.constructor.prototype, a44 = function(t15) {
                                        var e34 = [];
                                        for(var r62 in t15)o72.call(t15, r62) && e34.push(r62);
                                        return e34;
                                    };
                                    e32.exports = {
                                        isArray: function(t15) {
                                            try {
                                                return "[object Array]" === i46.call(t15);
                                            } catch (t16) {
                                                return false;
                                            }
                                        },
                                        keys: a44,
                                        names: a44,
                                        defineProperty: function(t15, e34, r62) {
                                            return t15[e34] = r62.value, t15;
                                        },
                                        getDescriptor: function(t15, e34) {
                                            return {
                                                value: t15[e34]
                                            };
                                        },
                                        freeze: function(t15) {
                                            return t15;
                                        },
                                        getPrototypeOf: function(t15) {
                                            try {
                                                return Object(t15).constructor.prototype;
                                            } catch (t16) {
                                                return s37;
                                            }
                                        },
                                        isES5: n66,
                                        propertyIsWritable: function() {
                                            return true;
                                        }
                                    };
                                }
                            },
                            {
                            }
                        ],
                        14: [
                            function(t9, e32, r61) {
                                "use strict";
                                e32.exports = function(t15, e34) {
                                    var r62 = t15.map;
                                    t15.prototype.filter = function(t16, n66) {
                                        return r62(this, t16, n66, e34);
                                    }, t15.filter = function(t16, n66, o81) {
                                        return r62(t16, n66, o81, e34);
                                    };
                                };
                            },
                            {
                            }
                        ],
                        15: [
                            function(t9, e32, r61) {
                                "use strict";
                                e32.exports = function(e34, r62, n66) {
                                    var o81 = t9("./util"), i54 = e34.CancellationError, s43 = o81.errorObj, a49 = t9("./catch_filter")(n66);
                                    function u47(t15, e38, r63) {
                                        this.promise = t15, this.type = e38, this.handler = r63, this.called = false, this.cancelPromise = null;
                                    }
                                    function c38(t15) {
                                        this.finallyHandler = t15;
                                    }
                                    function l29(t15, e38) {
                                        return null != t15.cancelPromise && (arguments.length > 1 ? t15.cancelPromise._reject(e38) : t15.cancelPromise._cancel(), t15.cancelPromise = null, true);
                                    }
                                    function f25() {
                                        return h15.call(this, this.promise._target()._settledValue());
                                    }
                                    function p23(t15) {
                                        if (!l29(this, t15)) return s43.e = t15, s43;
                                    }
                                    function h15(t15) {
                                        var o82 = this.promise, a50 = this.handler;
                                        if (!this.called) {
                                            this.called = true;
                                            var u52 = this.isFinallyHandler() ? a50.call(o82._boundValue()) : a50.call(o82._boundValue(), t15);
                                            if (u52 === n66) return u52;
                                            if ((void 0) !== u52) {
                                                o82._setReturnedNonUndefined();
                                                var h17 = r62(u52, o82);
                                                if (h17 instanceof e34) {
                                                    if (null != this.cancelPromise) {
                                                        if (h17._isCancelled()) {
                                                            var y17 = new i54("late cancellation observer");
                                                            return o82._attachExtraTrace(y17), s43.e = y17, s43;
                                                        }
                                                        h17.isPending() && h17._attachCancellationCallback(new c38(this));
                                                    }
                                                    return h17._then(f25, p23, void 0, this, void 0);
                                                }
                                            }
                                        }
                                        return o82.isRejected() ? (l29(this), s43.e = t15, s43) : (l29(this), t15);
                                    }
                                    return u47.prototype.isFinallyHandler = function() {
                                        return 0 === this.type;
                                    }, c38.prototype._resultCancelled = function() {
                                        l29(this.finallyHandler);
                                    }, e34.prototype._passThrough = function(t15, e38, r63, n78) {
                                        return "function" != typeof t15 ? this.then() : this._then(r63, n78, void 0, new u47(this, e38, t15), void 0);
                                    }, e34.prototype.lastly = e34.prototype.finally = function(t15) {
                                        return this._passThrough(t15, 0, h15, h15);
                                    }, e34.prototype.tap = function(t15) {
                                        return this._passThrough(t15, 1, h15);
                                    }, e34.prototype.tapCatch = function(t15) {
                                        var r63 = arguments.length;
                                        if (1 === r63) return this._passThrough(t15, 1, void 0, h15);
                                        var n78, i55 = new Array(r63 - 1), s44 = 0;
                                        for(n78 = 0; n78 < r63 - 1; ++n78){
                                            var u53 = arguments[n78];
                                            if (!o81.isObject(u53)) return e34.reject(new TypeError("tapCatch statement predicate: expecting an object but got " + o81.classString(u53)));
                                            i55[s44++] = u53;
                                        }
                                        i55.length = s44;
                                        var c39 = arguments[n78];
                                        return this._passThrough(a49(i55, c39, this), 1, void 0, h15);
                                    }, u47;
                                };
                            },
                            {
                                "./catch_filter": 7,
                                "./util": 36
                            }
                        ],
                        16: [
                            function(t9, e32, r61) {
                                "use strict";
                                e32.exports = function(e34, r62, n66, o81, i54, s43) {
                                    var a49 = t9("./errors").TypeError, u47 = t9("./util"), c38 = u47.errorObj, l29 = u47.tryCatch, f25 = [];
                                    function p23(t15, r63, o82, i55) {
                                        if (s43.cancellation()) {
                                            var a50 = new e34(n66), u54 = this._finallyPromise = new e34(n66);
                                            this._promise = a50.lastly(function() {
                                                return u54;
                                            }), a50._captureStackTrace(), a50._setOnCancel(this);
                                        } else (this._promise = new e34(n66))._captureStackTrace();
                                        this._stack = i55, this._generatorFunction = t15, this._receiver = r63, this._generator = void 0, this._yieldHandlers = "function" == typeof o82 ? [
                                            o82
                                        ].concat(f25) : f25, this._yieldedPromise = null, this._cancellationPhase = false;
                                    }
                                    u47.inherits(p23, i54), p23.prototype._isResolved = function() {
                                        return null === this._promise;
                                    }, p23.prototype._cleanup = function() {
                                        this._promise = this._generator = null, s43.cancellation() && null !== this._finallyPromise && (this._finallyPromise._fulfill(), this._finallyPromise = null);
                                    }, p23.prototype._promiseCancelled = function() {
                                        if (!this._isResolved()) {
                                            var t15;
                                            if ((void 0) !== this._generator.return) this._promise._pushContext(), t15 = l29(this._generator.return).call(this._generator, void 0), this._promise._popContext();
                                            else {
                                                var r63 = new e34.CancellationError("generator .return() sentinel");
                                                e34.coroutine.returnSentinel = r63, this._promise._attachExtraTrace(r63), this._promise._pushContext(), t15 = l29(this._generator.throw).call(this._generator, r63), this._promise._popContext();
                                            }
                                            this._cancellationPhase = true, this._yieldedPromise = null, this._continue(t15);
                                        }
                                    }, p23.prototype._promiseFulfilled = function(t16) {
                                        this._yieldedPromise = null, this._promise._pushContext();
                                        var e38 = l29(this._generator.next).call(this._generator, t16);
                                        this._promise._popContext(), this._continue(e38);
                                    }, p23.prototype._promiseRejected = function(t16) {
                                        this._yieldedPromise = null, this._promise._attachExtraTrace(t16), this._promise._pushContext();
                                        var e38 = l29(this._generator.throw).call(this._generator, t16);
                                        this._promise._popContext(), this._continue(e38);
                                    }, p23.prototype._resultCancelled = function() {
                                        if (this._yieldedPromise instanceof e34) {
                                            var t16 = this._yieldedPromise;
                                            this._yieldedPromise = null, t16.cancel();
                                        }
                                    }, p23.prototype.promise = function() {
                                        return this._promise;
                                    }, p23.prototype._run = function() {
                                        this._generator = this._generatorFunction.call(this._receiver), this._receiver = this._generatorFunction = void 0, this._promiseFulfilled(void 0);
                                    }, p23.prototype._continue = function(t17) {
                                        var r64 = this._promise;
                                        if (t17 === c38) return this._cleanup(), this._cancellationPhase ? r64.cancel() : r64._rejectCallback(t17.e, false);
                                        var n78 = t17.value;
                                        if (true === t17.done) return this._cleanup(), this._cancellationPhase ? r64.cancel() : r64._resolveCallback(n78);
                                        var i55 = o81(n78, this._promise);
                                        if (i55 instanceof e34 || null !== (i55 = (function(t18, r65, n79) {
                                            for(var i56 = 0; i56 < r65.length; ++i56){
                                                n79._pushContext();
                                                var s44 = l29(r65[i56])(t18);
                                                if (n79._popContext(), s44 === c38) {
                                                    n79._pushContext();
                                                    var a51 = e34.reject(c38.e);
                                                    return n79._popContext(), a51;
                                                }
                                                var u55 = o81(s44, n79);
                                                if (u55 instanceof e34) return u55;
                                            }
                                            return null;
                                        })(i55, this._yieldHandlers, this._promise))) {
                                            var s45 = (i55 = i55._target())._bitField;
                                            0 == (50397184 & s45) ? (this._yieldedPromise = i55, i55._proxy(this, null)) : 0 != (33554432 & s45) ? e34._async.invoke(this._promiseFulfilled, this, i55._value()) : 0 != (16777216 & s45) ? e34._async.invoke(this._promiseRejected, this, i55._reason()) : this._promiseCancelled();
                                        } else this._promiseRejected(new a49("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s", String(n78)) + "From coroutine:\n" + this._stack.split("\n").slice(1, -7).join("\n")));
                                    }, e34.coroutine = function(t17, e38) {
                                        if ("function" != typeof t17) throw new a49("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
                                        var r64 = Object(e38).yieldHandler, n78 = p23, o82 = (new Error).stack;
                                        return function() {
                                            var e39 = t17.apply(this, arguments), i55 = new n78(void 0, void 0, r64, o82), s46 = i55.promise();
                                            return i55._generator = e39, i55._promiseFulfilled(void 0), s46;
                                        };
                                    }, e34.coroutine.addYieldHandler = function(t17) {
                                        if ("function" != typeof t17) throw new a49("expecting a function but got " + u47.classString(t17));
                                        f25.push(t17);
                                    }, e34.spawn = function(t17) {
                                        if (s43.deprecated("Promise.spawn()", "Promise.coroutine()"), "function" != typeof t17) return r62("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
                                        var n78 = new p23(t17, this), o82 = n78.promise();
                                        return n78._run(e34.spawn), o82;
                                    };
                                };
                            },
                            {
                                "./errors": 12,
                                "./util": 36
                            }
                        ],
                        17: [
                            function(t9, e32, r61) {
                                "use strict";
                                e32.exports = function(e34, r62, n66, o81, i54, s43) {
                                    var a49 = t9("./util");
                                    a49.canEvaluate, a49.tryCatch, a49.errorObj, e34.join = function() {
                                        var t17, e38 = arguments.length - 1;
                                        e38 > 0 && "function" == typeof arguments[e38] && (t17 = arguments[e38]);
                                        var n78 = [].slice.call(arguments);
                                        t17 && n78.pop();
                                        var o82 = new r62(n78).promise();
                                        return (void 0) !== t17 ? o82.spread(t17) : o82;
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        18: [
                            function(t9, e32, r61) {
                                "use strict";
                                e32.exports = function(e34, r62, n66, o81, i54, s43) {
                                    var a49 = e34._getDomain, u47 = t9("./util"), l29 = u47.tryCatch, f25 = u47.errorObj, p23 = e34._async;
                                    function h15(t17, e38, r64, n78) {
                                        this.constructor$(t17), this._promise._captureStackTrace();
                                        var o82 = a49();
                                        this._callback = null === o82 ? e38 : u47.domainBind(o82, e38), this._preservedValues = n78 === i54 ? new Array(this.length()) : null, this._limit = r64, this._inFlight = 0, this._queue = [], p23.invoke(this._asyncInit, this, void 0);
                                    }
                                    function y18(t17, r64, o82, i55) {
                                        if ("function" != typeof r64) return n66("expecting a function but got " + u47.classString(r64));
                                        var s46 = 0;
                                        if ((void 0) !== o82) {
                                            if ("object" !== c33(o82) || null === o82) return e34.reject(new TypeError("options argument must be an object but it is " + u47.classString(o82)));
                                            if ("number" != typeof o82.concurrency) return e34.reject(new TypeError("'concurrency' must be a number but it is " + u47.classString(o82.concurrency)));
                                            s46 = o82.concurrency;
                                        }
                                        return new h15(t17, r64, s46 = "number" == typeof s46 && isFinite(s46) && s46 >= 1 ? s46 : 0, i55).promise();
                                    }
                                    u47.inherits(h15, r62), h15.prototype._asyncInit = function() {
                                        this._init$(void 0, -2);
                                    }, h15.prototype._init = function() {
                                    }, h15.prototype._promiseFulfilled = function(t17, r64) {
                                        var n78 = this._values, i55 = this.length(), a52 = this._preservedValues, u56 = this._limit;
                                        if (r64 < 0) {
                                            if (n78[r64 = -1 * r64 - 1] = t17, u56 >= 1 && (this._inFlight--, this._drainQueue(), this._isResolved())) return true;
                                        } else {
                                            if (u56 >= 1 && this._inFlight >= u56) return n78[r64] = t17, this._queue.push(r64), false;
                                            null !== a52 && (a52[r64] = t17);
                                            var c38 = this._promise, p25 = this._callback, h18 = c38._boundValue();
                                            c38._pushContext();
                                            var y19 = l29(p25).call(h18, t17, r64, i55), d18 = c38._popContext();
                                            if (s43.checkForgottenReturns(y19, d18, null !== a52 ? "Promise.filter" : "Promise.map", c38), y19 === f25) return this._reject(y19.e), true;
                                            var _11 = o81(y19, this._promise);
                                            if (_11 instanceof e34) {
                                                var v7 = (_11 = _11._target())._bitField;
                                                if (0 == (50397184 & v7)) return u56 >= 1 && this._inFlight++, n78[r64] = _11, _11._proxy(this, -1 * (r64 + 1)), false;
                                                if (0 == (33554432 & v7)) return 0 != (16777216 & v7) ? (this._reject(_11._reason()), true) : (this._cancel(), true);
                                                y19 = _11._value();
                                            }
                                            n78[r64] = y19;
                                        }
                                        return (++this._totalResolved) >= i55 && (null !== a52 ? this._filter(n78, a52) : this._resolve(n78), true);
                                    }, h15.prototype._drainQueue = function() {
                                        for(var t17 = this._queue, e38 = this._limit, r64 = this._values; t17.length > 0 && this._inFlight < e38;){
                                            if (this._isResolved()) return;
                                            var n78 = t17.pop();
                                            this._promiseFulfilled(r64[n78], n78);
                                        }
                                    }, h15.prototype._filter = function(t17, e38) {
                                        for(var r64 = e38.length, n79 = new Array(r64), o82 = 0, i55 = 0; i55 < r64; ++i55)t17[i55] && (n79[o82++] = e38[i55]);
                                        n79.length = o82, this._resolve(n79);
                                    }, h15.prototype.preservedValues = function() {
                                        return this._preservedValues;
                                    }, e34.prototype.map = function(t17, e38) {
                                        return y18(this, t17, e38, null);
                                    }, e34.map = function(t17, e38, r64, n79) {
                                        return y18(t17, e38, r64, n79);
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        19: [
                            function(t9, e32, r61) {
                                "use strict";
                                e32.exports = function(e34, r62, n66, o81, i54) {
                                    var s43 = t9("./util"), a49 = s43.tryCatch;
                                    e34.method = function(t17) {
                                        if ("function" != typeof t17) throw new e34.TypeError("expecting a function but got " + s43.classString(t17));
                                        return function() {
                                            var n79 = new e34(r62);
                                            n79._captureStackTrace(), n79._pushContext();
                                            var o82 = a49(t17).apply(this, arguments), s46 = n79._popContext();
                                            return i54.checkForgottenReturns(o82, s46, "Promise.method", n79), n79._resolveFromSyncValue(o82), n79;
                                        };
                                    }, e34.attempt = e34.try = function(t17) {
                                        if ("function" != typeof t17) return o81("expecting a function but got " + s43.classString(t17));
                                        var n79, u47 = new e34(r62);
                                        if (u47._captureStackTrace(), u47._pushContext(), arguments.length > 1) {
                                            i54.deprecated("calling Promise.try with more than 1 argument");
                                            var c39 = arguments[1], l29 = arguments[2];
                                            n79 = s43.isArray(c39) ? a49(t17).apply(l29, c39) : a49(t17).call(l29, c39);
                                        } else n79 = a49(t17)();
                                        var f25 = u47._popContext();
                                        return i54.checkForgottenReturns(n79, f25, "Promise.try", u47), u47._resolveFromSyncValue(n79), u47;
                                    }, e34.prototype._resolveFromSyncValue = function(t17) {
                                        t17 === s43.errorObj ? this._rejectCallback(t17.e, false) : this._resolveCallback(t17, true);
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        20: [
                            function(t9, e32, r61) {
                                "use strict";
                                var n66 = t9("./util"), o81 = n66.maybeWrapAsError, i54 = t9("./errors").OperationalError, s43 = t9("./es5"), a49 = /^(?:name|message|stack|cause)$/;
                                function u47(t17) {
                                    var e34;
                                    if ((function(t18) {
                                        return t18 instanceof Error && s43.getPrototypeOf(t18) === Error.prototype;
                                    })(t17)) {
                                        (e34 = new i54(t17)).name = t17.name, e34.message = t17.message, e34.stack = t17.stack;
                                        for(var r62 = s43.keys(t17), o82 = 0; o82 < r62.length; ++o82){
                                            var u56 = r62[o82];
                                            a49.test(u56) || (e34[u56] = t17[u56]);
                                        }
                                        return e34;
                                    }
                                    return n66.markAsOriginatingFromRejection(t17), t17;
                                }
                                e32.exports = function(t17, e34) {
                                    return function(r64, n79) {
                                        if (null !== t17) {
                                            if (r64) {
                                                var i55 = u47(o81(r64));
                                                t17._attachExtraTrace(i55), t17._reject(i55);
                                            } else if (e34) {
                                                var s46 = [].slice.call(arguments, 1);
                                                t17._fulfill(s46);
                                            } else t17._fulfill(n79);
                                            t17 = null;
                                        }
                                    };
                                };
                            },
                            {
                                "./errors": 12,
                                "./es5": 13,
                                "./util": 36
                            }
                        ],
                        21: [
                            function(t9, e32, r61) {
                                "use strict";
                                e32.exports = function(e34) {
                                    var r64 = t9("./util"), n66 = e34._async, o81 = r64.tryCatch, i54 = r64.errorObj;
                                    function s43(t17, e38) {
                                        if (!r64.isArray(t17)) return a49.call(this, t17, e38);
                                        var s47 = o81(e38).apply(this._boundValue(), [
                                            null
                                        ].concat(t17));
                                        s47 === i54 && n66.throwLater(s47.e);
                                    }
                                    function a49(t17, e38) {
                                        var r65 = this._boundValue(), s47 = (void 0) === t17 ? o81(e38).call(r65, null) : o81(e38).call(r65, null, t17);
                                        s47 === i54 && n66.throwLater(s47.e);
                                    }
                                    function u47(t17, e38) {
                                        if (!t17) {
                                            var r65 = new Error(t17 + "");
                                            r65.cause = t17, t17 = r65;
                                        }
                                        var s47 = o81(e38).call(this._boundValue(), t17);
                                        s47 === i54 && n66.throwLater(s47.e);
                                    }
                                    e34.prototype.asCallback = e34.prototype.nodeify = function(t17, e38) {
                                        if ("function" == typeof t17) {
                                            var r66 = a49;
                                            (void 0) !== e38 && Object(e38).spread && (r66 = s43), this._then(r66, u47, void 0, this, t17);
                                        }
                                        return this;
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        22: [
                            function(t9, e32, n66) {
                                "use strict";
                                e32.exports = function() {
                                    var n79 = function() {
                                        return new y18("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n");
                                    }, o81 = function() {
                                        return new x5.PromiseInspection(this._target());
                                    }, i54 = function(t17) {
                                        return x5.reject(new y18(t17));
                                    };
                                    function s43() {
                                    }
                                    var a49, u47 = {
                                    }, c40 = t9("./util");
                                    a49 = c40.isNode ? function() {
                                        var t17 = r48.domain;
                                        return (void 0) === t17 && (t17 = null), t17;
                                    } : function() {
                                        return null;
                                    }, c40.notEnumerableProp(x5, "_getDomain", a49);
                                    var l31 = t9("./es5"), f25 = t9("./async"), p23 = new f25;
                                    l31.defineProperty(x5, "_async", {
                                        value: p23
                                    });
                                    var h15 = t9("./errors"), y18 = x5.TypeError = h15.TypeError;
                                    x5.RangeError = h15.RangeError;
                                    var d19 = x5.CancellationError = h15.CancellationError;
                                    x5.TimeoutError = h15.TimeoutError, x5.OperationalError = h15.OperationalError, x5.RejectionError = h15.OperationalError, x5.AggregateError = h15.AggregateError;
                                    var _12 = function() {
                                    }, v8 = {
                                    }, m5 = {
                                    }, g7 = t9("./thenables")(x5, _12), b7 = t9("./promise_array")(x5, _12, g7, i54, s43), w7 = t9("./context")(x5), O7 = w7.create, S6 = t9("./debuggability")(x5, w7), A3 = (S6.CapturedTrace, t9("./finally")(x5, g7, m5)), $3 = t9("./catch_filter")(m5), E4 = t9("./nodeback"), j4 = c40.errorObj, P3 = c40.tryCatch;
                                    function x5(t17) {
                                        t17 !== _12 && (function(t18, e34) {
                                            if (null == t18 || t18.constructor !== x5) throw new y18("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");
                                            if ("function" != typeof e34) throw new y18("expecting a function but got " + c40.classString(e34));
                                        })(this, t17), this._bitField = 0, this._fulfillmentHandler0 = void 0, this._rejectionHandler0 = void 0, this._promise0 = void 0, this._receiver0 = void 0, this._resolveFromExecutor(t17), this._promiseCreated(), this._fireEvent("promiseCreated", this);
                                    }
                                    function T4(t17) {
                                        this.promise._resolveCallback(t17);
                                    }
                                    function N4(t17) {
                                        this.promise._rejectCallback(t17, false);
                                    }
                                    function k3(t17) {
                                        var e34 = new x5(_12);
                                        e34._fulfillmentHandler0 = t17, e34._rejectionHandler0 = t17, e34._promise0 = t17, e34._receiver0 = t17;
                                    }
                                    return x5.prototype.toString = function() {
                                        return "[object Promise]";
                                    }, x5.prototype.caught = x5.prototype.catch = function(t17) {
                                        var e34 = arguments.length;
                                        if (e34 > 1) {
                                            var r61, n80 = new Array(e34 - 1), o83 = 0;
                                            for(r61 = 0; r61 < e34 - 1; ++r61){
                                                var s47 = arguments[r61];
                                                if (!c40.isObject(s47)) return i54("Catch statement predicate: expecting an object but got " + c40.classString(s47));
                                                n80[o83++] = s47;
                                            }
                                            return n80.length = o83, t17 = arguments[r61], this.then(void 0, $3(n80, t17, this));
                                        }
                                        return this.then(void 0, t17);
                                    }, x5.prototype.reflect = function() {
                                        return this._then(o81, o81, void 0, this, void 0);
                                    }, x5.prototype.then = function(t17, e34) {
                                        if (S6.warnings() && arguments.length > 0 && "function" != typeof t17 && "function" != typeof e34) {
                                            var r64 = ".then() only accepts functions but was passed: " + c40.classString(t17);
                                            arguments.length > 1 && (r64 += ", " + c40.classString(e34)), this._warn(r64);
                                        }
                                        return this._then(t17, e34, void 0, void 0, void 0);
                                    }, x5.prototype.done = function(t17, e34) {
                                        this._then(t17, e34, void 0, void 0, void 0)._setIsFinal();
                                    }, x5.prototype.spread = function(t17) {
                                        return "function" != typeof t17 ? i54("expecting a function but got " + c40.classString(t17)) : this.all()._then(t17, void 0, void 0, v8, void 0);
                                    }, x5.prototype.toJSON = function() {
                                        var t17 = {
                                            isFulfilled: false,
                                            isRejected: false,
                                            fulfillmentValue: void 0,
                                            rejectionReason: void 0
                                        };
                                        return this.isFulfilled() ? (t17.fulfillmentValue = this.value(), t17.isFulfilled = true) : this.isRejected() && (t17.rejectionReason = this.reason(), t17.isRejected = true), t17;
                                    }, x5.prototype.all = function() {
                                        return arguments.length > 0 && this._warn(".all() was passed arguments but it does not take any"), new b7(this).promise();
                                    }, x5.prototype.error = function(t17) {
                                        return this.caught(c40.originatesFromRejection, t17);
                                    }, x5.getNewLibraryCopy = e32.exports, x5.is = function(t17) {
                                        return t17 instanceof x5;
                                    }, x5.fromNode = x5.fromCallback = function(t17) {
                                        var e34 = new x5(_12);
                                        e34._captureStackTrace();
                                        var r67 = arguments.length > 1 && !!Object(arguments[1]).multiArgs, n81 = P3(t17)(E4(e34, r67));
                                        return n81 === j4 && e34._rejectCallback(n81.e, true), e34._isFateSealed() || e34._setAsyncGuaranteed(), e34;
                                    }, x5.all = function(t17) {
                                        return new b7(t17).promise();
                                    }, x5.cast = function(t17) {
                                        var e34 = g7(t17);
                                        return e34 instanceof x5 || ((e34 = new x5(_12))._captureStackTrace(), e34._setFulfilled(), e34._rejectionHandler0 = t17), e34;
                                    }, x5.resolve = x5.fulfilled = x5.cast, x5.reject = x5.rejected = function(t17) {
                                        var e34 = new x5(_12);
                                        return e34._captureStackTrace(), e34._rejectCallback(t17, true), e34;
                                    }, x5.setScheduler = function(t17) {
                                        if ("function" != typeof t17) throw new y18("expecting a function but got " + c40.classString(t17));
                                        return p23.setScheduler(t17);
                                    }, x5.prototype._then = function(t17, e34, r67, n81, o84) {
                                        var i56 = (void 0) !== o84, s48 = i56 ? o84 : new x5(_12), u57 = this._target(), l32 = u57._bitField;
                                        i56 || (s48._propagateFrom(this, 3), s48._captureStackTrace(), (void 0) === n81 && 0 != (2097152 & this._bitField) && (n81 = 0 != (50397184 & l32) ? this._boundValue() : u57 === this ? void 0 : this._boundTo), this._fireEvent("promiseChained", this, s48));
                                        var f27 = a49();
                                        if (0 != (50397184 & l32)) {
                                            var h19, y20, v9 = u57._settlePromiseCtx;
                                            0 != (33554432 & l32) ? (y20 = u57._rejectionHandler0, h19 = t17) : 0 != (16777216 & l32) ? (y20 = u57._fulfillmentHandler0, h19 = e34, u57._unsetRejectionIsUnhandled()) : (v9 = u57._settlePromiseLateCancellationObserver, y20 = new d19("late cancellation observer"), u57._attachExtraTrace(y20), h19 = e34), p23.invoke(v9, u57, {
                                                handler: null === f27 ? h19 : "function" == typeof h19 && c40.domainBind(f27, h19),
                                                promise: s48,
                                                receiver: n81,
                                                value: y20
                                            });
                                        } else u57._addCallbacks(t17, e34, s48, n81, f27);
                                        return s48;
                                    }, x5.prototype._length = function() {
                                        return 65535 & this._bitField;
                                    }, x5.prototype._isFateSealed = function() {
                                        return 0 != (117506048 & this._bitField);
                                    }, x5.prototype._isFollowing = function() {
                                        return 67108864 == (67108864 & this._bitField);
                                    }, x5.prototype._setLength = function(t17) {
                                        this._bitField = -65536 & this._bitField | 65535 & t17;
                                    }, x5.prototype._setFulfilled = function() {
                                        this._bitField = 33554432 | this._bitField, this._fireEvent("promiseFulfilled", this);
                                    }, x5.prototype._setRejected = function() {
                                        this._bitField = 16777216 | this._bitField, this._fireEvent("promiseRejected", this);
                                    }, x5.prototype._setFollowing = function() {
                                        this._bitField = 67108864 | this._bitField, this._fireEvent("promiseResolved", this);
                                    }, x5.prototype._setIsFinal = function() {
                                        this._bitField = 4194304 | this._bitField;
                                    }, x5.prototype._isFinal = function() {
                                        return (4194304 & this._bitField) > 0;
                                    }, x5.prototype._unsetCancelled = function() {
                                        this._bitField = -65537 & this._bitField;
                                    }, x5.prototype._setCancelled = function() {
                                        this._bitField = 65536 | this._bitField, this._fireEvent("promiseCancelled", this);
                                    }, x5.prototype._setWillBeCancelled = function() {
                                        this._bitField = 8388608 | this._bitField;
                                    }, x5.prototype._setAsyncGuaranteed = function() {
                                        p23.hasCustomScheduler() || (this._bitField = 134217728 | this._bitField);
                                    }, x5.prototype._receiverAt = function(t17) {
                                        var e34 = 0 === t17 ? this._receiver0 : this[4 * t17 - 4 + 3];
                                        if (e34 !== u47) return (void 0) === e34 && this._isBound() ? this._boundValue() : e34;
                                    }, x5.prototype._promiseAt = function(t17) {
                                        return this[4 * t17 - 4 + 2];
                                    }, x5.prototype._fulfillmentHandlerAt = function(t17) {
                                        return this[4 * t17 - 4 + 0];
                                    }, x5.prototype._rejectionHandlerAt = function(t17) {
                                        return this[4 * t17 - 4 + 1];
                                    }, x5.prototype._boundValue = function() {
                                    }, x5.prototype._migrateCallback0 = function(t17) {
                                        t17._bitField;
                                        var e34 = t17._fulfillmentHandler0, r67 = t17._rejectionHandler0, n81 = t17._promise0, o84 = t17._receiverAt(0);
                                        (void 0) === o84 && (o84 = u47), this._addCallbacks(e34, r67, n81, o84, null);
                                    }, x5.prototype._migrateCallbackAt = function(t17, e34) {
                                        var r67 = t17._fulfillmentHandlerAt(e34), n81 = t17._rejectionHandlerAt(e34), o84 = t17._promiseAt(e34), i56 = t17._receiverAt(e34);
                                        (void 0) === i56 && (i56 = u47), this._addCallbacks(r67, n81, o84, i56, null);
                                    }, x5.prototype._addCallbacks = function(t17, e34, r67, n81, o84) {
                                        var i56 = this._length();
                                        if (i56 >= 65531 && (i56 = 0, this._setLength(0)), 0 === i56) this._promise0 = r67, this._receiver0 = n81, "function" == typeof t17 && (this._fulfillmentHandler0 = null === o84 ? t17 : c40.domainBind(o84, t17)), "function" == typeof e34 && (this._rejectionHandler0 = null === o84 ? e34 : c40.domainBind(o84, e34));
                                        else {
                                            var s48 = 4 * i56 - 4;
                                            this[s48 + 2] = r67, this[s48 + 3] = n81, "function" == typeof t17 && (this[s48 + 0] = null === o84 ? t17 : c40.domainBind(o84, t17)), "function" == typeof e34 && (this[s48 + 1] = null === o84 ? e34 : c40.domainBind(o84, e34));
                                        }
                                        return this._setLength(i56 + 1), i56;
                                    }, x5.prototype._proxy = function(t17, e34) {
                                        this._addCallbacks(void 0, void 0, e34, t17, null);
                                    }, x5.prototype._resolveCallback = function(t17, e34) {
                                        if (0 == (117506048 & this._bitField)) {
                                            if (t17 === this) return this._rejectCallback(n79(), false);
                                            var r67 = g7(t17, this);
                                            if (!(r67 instanceof x5)) return this._fulfill(t17);
                                            e34 && this._propagateFrom(r67, 2);
                                            var o84 = r67._target();
                                            if (o84 !== this) {
                                                var i56 = o84._bitField;
                                                if (0 == (50397184 & i56)) {
                                                    var s49 = this._length();
                                                    s49 > 0 && o84._migrateCallback0(this);
                                                    for(var a52 = 1; a52 < s49; ++a52)o84._migrateCallbackAt(this, a52);
                                                    this._setFollowing(), this._setLength(0), this._setFollowee(o84);
                                                } else if (0 != (33554432 & i56)) this._fulfill(o84._value());
                                                else if (0 != (16777216 & i56)) this._reject(o84._reason());
                                                else {
                                                    var u57 = new d19("late cancellation observer");
                                                    o84._attachExtraTrace(u57), this._reject(u57);
                                                }
                                            } else this._reject(n79());
                                        }
                                    }, x5.prototype._rejectCallback = function(t17, e34, r68) {
                                        var n81 = c40.ensureErrorObject(t17), o85 = n81 === t17;
                                        if (!o85 && !r68 && S6.warnings()) {
                                            var i57 = "a promise was rejected with a non-error: " + c40.classString(t17);
                                            this._warn(i57, true);
                                        }
                                        this._attachExtraTrace(n81, !!e34 && o85), this._reject(t17);
                                    }, x5.prototype._resolveFromExecutor = function(t17) {
                                        if (t17 !== _12) {
                                            var e34 = this;
                                            this._captureStackTrace(), this._pushContext();
                                            var r68 = true, n81 = this._execute(t17, function(t18) {
                                                e34._resolveCallback(t18);
                                            }, function(t18) {
                                                e34._rejectCallback(t18, r68);
                                            });
                                            r68 = false, this._popContext(), (void 0) !== n81 && e34._rejectCallback(n81, true);
                                        }
                                    }, x5.prototype._settlePromiseFromHandler = function(t17, e38, r69, n82) {
                                        var o85 = n82._bitField;
                                        if (0 == (65536 & o85)) {
                                            var i58;
                                            n82._pushContext(), e38 === v8 ? r69 && "number" == typeof r69.length ? i58 = P3(t17).apply(this._boundValue(), r69) : (i58 = j4).e = new y18("cannot .spread() a non-array: " + c40.classString(r69)) : i58 = P3(t17).call(e38, r69);
                                            var s50 = n82._popContext();
                                            0 == (65536 & (o85 = n82._bitField)) && (i58 === m5 ? n82._reject(r69) : i58 === j4 ? n82._rejectCallback(i58.e, false) : (S6.checkForgottenReturns(i58, s50, "", n82, this), n82._resolveCallback(i58)));
                                        }
                                    }, x5.prototype._target = function() {
                                        for(var t17 = this; t17._isFollowing();)t17 = t17._followee();
                                        return t17;
                                    }, x5.prototype._followee = function() {
                                        return this._rejectionHandler0;
                                    }, x5.prototype._setFollowee = function(t17) {
                                        this._rejectionHandler0 = t17;
                                    }, x5.prototype._settlePromise = function(t17, e38, r69, n82) {
                                        var i59 = t17 instanceof x5, a53 = this._bitField, u58 = 0 != (134217728 & a53);
                                        0 != (65536 & a53) ? (i59 && t17._invokeInternalOnCancel(), r69 instanceof A3 && r69.isFinallyHandler() ? (r69.cancelPromise = t17, P3(e38).call(r69, n82) === j4 && t17._reject(j4.e)) : e38 === o81 ? t17._fulfill(o81.call(r69)) : r69 instanceof s43 ? r69._promiseCancelled(t17) : i59 || t17 instanceof b7 ? t17._cancel() : r69.cancel()) : "function" == typeof e38 ? i59 ? (u58 && t17._setAsyncGuaranteed(), this._settlePromiseFromHandler(e38, r69, n82, t17)) : e38.call(r69, n82, t17) : r69 instanceof s43 ? r69._isResolved() || (0 != (33554432 & a53) ? r69._promiseFulfilled(n82, t17) : r69._promiseRejected(n82, t17)) : i59 && (u58 && t17._setAsyncGuaranteed(), 0 != (33554432 & a53) ? t17._fulfill(n82) : t17._reject(n82));
                                    }, x5.prototype._settlePromiseLateCancellationObserver = function(t17) {
                                        var e38 = t17.handler, r69 = t17.promise, n82 = t17.receiver, o85 = t17.value;
                                        "function" == typeof e38 ? r69 instanceof x5 ? this._settlePromiseFromHandler(e38, n82, o85, r69) : e38.call(n82, o85, r69) : r69 instanceof x5 && r69._reject(o85);
                                    }, x5.prototype._settlePromiseCtx = function(t17) {
                                        this._settlePromise(t17.promise, t17.handler, t17.receiver, t17.value);
                                    }, x5.prototype._settlePromise0 = function(t17, e38, r69) {
                                        var n82 = this._promise0, o85 = this._receiverAt(0);
                                        this._promise0 = void 0, this._receiver0 = void 0, this._settlePromise(n82, t17, o85, e38);
                                    }, x5.prototype._clearCallbackDataAtIndex = function(t17) {
                                        var e38 = 4 * t17 - 4;
                                        this[e38 + 2] = this[e38 + 3] = this[e38 + 0] = this[e38 + 1] = void 0;
                                    }, x5.prototype._fulfill = function(t17) {
                                        var e38 = this._bitField;
                                        if (!((117506048 & e38) >>> 16)) {
                                            if (t17 === this) {
                                                var r69 = n79();
                                                return this._attachExtraTrace(r69), this._reject(r69);
                                            }
                                            this._setFulfilled(), this._rejectionHandler0 = t17, (65535 & e38) > 0 && (0 != (134217728 & e38) ? this._settlePromises() : p23.settlePromises(this));
                                        }
                                    }, x5.prototype._reject = function(t17) {
                                        var e38 = this._bitField;
                                        if (!((117506048 & e38) >>> 16)) {
                                            if (this._setRejected(), this._fulfillmentHandler0 = t17, this._isFinal()) return p23.fatalError(t17, c40.isNode);
                                            (65535 & e38) > 0 ? p23.settlePromises(this) : this._ensurePossibleRejectionHandled();
                                        }
                                    }, x5.prototype._fulfillPromises = function(t17, e38) {
                                        for(var r70 = 1; r70 < t17; r70++){
                                            var n82 = this._fulfillmentHandlerAt(r70), o85 = this._promiseAt(r70), i59 = this._receiverAt(r70);
                                            this._clearCallbackDataAtIndex(r70), this._settlePromise(o85, n82, i59, e38);
                                        }
                                    }, x5.prototype._rejectPromises = function(t17, e38) {
                                        for(var r70 = 1; r70 < t17; r70++){
                                            var n83 = this._rejectionHandlerAt(r70), o86 = this._promiseAt(r70), i60 = this._receiverAt(r70);
                                            this._clearCallbackDataAtIndex(r70), this._settlePromise(o86, n83, i60, e38);
                                        }
                                    }, x5.prototype._settlePromises = function() {
                                        var t17 = this._bitField, e38 = 65535 & t17;
                                        if (e38 > 0) {
                                            if (0 != (16842752 & t17)) {
                                                var r70 = this._fulfillmentHandler0;
                                                this._settlePromise0(this._rejectionHandler0, r70, t17), this._rejectPromises(e38, r70);
                                            } else {
                                                var n84 = this._rejectionHandler0;
                                                this._settlePromise0(this._fulfillmentHandler0, n84, t17), this._fulfillPromises(e38, n84);
                                            }
                                            this._setLength(0);
                                        }
                                        this._clearCancellationData();
                                    }, x5.prototype._settledValue = function() {
                                        var t17 = this._bitField;
                                        return 0 != (33554432 & t17) ? this._rejectionHandler0 : 0 != (16777216 & t17) ? this._fulfillmentHandler0 : void 0;
                                    }, x5.defer = x5.pending = function() {
                                        return S6.deprecated("Promise.defer", "new Promise"), {
                                            promise: new x5(_12),
                                            resolve: T4,
                                            reject: N4
                                        };
                                    }, c40.notEnumerableProp(x5, "_makeSelfResolutionError", n79), t9("./method")(x5, _12, g7, i54, S6), t9("./bind")(x5, _12, g7, S6), t9("./cancel")(x5, b7, i54, S6), t9("./direct_resolve")(x5), t9("./synchronous_inspection")(x5), t9("./join")(x5, b7, g7, _12, p23, a49), x5.Promise = x5, x5.version = "3.5.1", t9("./map.js")(x5, b7, i54, g7, _12, S6), t9("./call_get.js")(x5), t9("./using.js")(x5, i54, g7, O7, _12, S6), t9("./timers.js")(x5, _12, S6), t9("./generators.js")(x5, i54, _12, g7, s43, S6), t9("./nodeify.js")(x5), t9("./promisify.js")(x5, _12), t9("./props.js")(x5, b7, g7, i54), t9("./race.js")(x5, _12, g7, i54), t9("./reduce.js")(x5, b7, i54, g7, _12, S6), t9("./settle.js")(x5, b7, S6), t9("./some.js")(x5, b7, i54), t9("./filter.js")(x5, _12), t9("./each.js")(x5, _12), t9("./any.js")(x5), c40.toFastProperties(x5), c40.toFastProperties(x5.prototype), k3({
                                        a: 1
                                    }), k3({
                                        b: 2
                                    }), k3({
                                        c: 3
                                    }), k3(1), k3(function() {
                                    }), k3(void 0), k3(false), k3(new x5(_12)), S6.setBounds(f25.firstLineError, c40.lastLineError), x5;
                                };
                            },
                            {
                                "./any.js": 1,
                                "./async": 2,
                                "./bind": 3,
                                "./call_get.js": 5,
                                "./cancel": 6,
                                "./catch_filter": 7,
                                "./context": 8,
                                "./debuggability": 9,
                                "./direct_resolve": 10,
                                "./each.js": 11,
                                "./errors": 12,
                                "./es5": 13,
                                "./filter.js": 14,
                                "./finally": 15,
                                "./generators.js": 16,
                                "./join": 17,
                                "./map.js": 18,
                                "./method": 19,
                                "./nodeback": 20,
                                "./nodeify.js": 21,
                                "./promise_array": 23,
                                "./promisify.js": 24,
                                "./props.js": 25,
                                "./race.js": 27,
                                "./reduce.js": 28,
                                "./settle.js": 30,
                                "./some.js": 31,
                                "./synchronous_inspection": 32,
                                "./thenables": 33,
                                "./timers.js": 34,
                                "./using.js": 35,
                                "./util": 36
                            }
                        ],
                        23: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72, n66, o81, i54) {
                                    var s43 = t9("./util");
                                    function a49(t17) {
                                        var n79 = this._promise = new e38(r72);
                                        t17 instanceof e38 && n79._propagateFrom(t17, 3), n79._setOnCancel(this), this._values = t17, this._length = 0, this._totalResolved = 0, this._init(void 0, -2);
                                    }
                                    return s43.isArray, s43.inherits(a49, i54), a49.prototype.length = function() {
                                        return this._length;
                                    }, a49.prototype.promise = function() {
                                        return this._promise;
                                    }, a49.prototype._init = function t17(r73, i61) {
                                        var a53 = n66(this._values, this._promise);
                                        if (a53 instanceof e38) {
                                            var u47 = (a53 = a53._target())._bitField;
                                            if (this._values = a53, 0 == (50397184 & u47)) return this._promise._setAsyncGuaranteed(), a53._then(t17, this._reject, void 0, this, i61);
                                            if (0 == (33554432 & u47)) return 0 != (16777216 & u47) ? this._reject(a53._reason()) : this._cancel();
                                            a53 = a53._value();
                                        }
                                        if (null !== (a53 = s43.asArray(a53))) 0 !== a53.length ? this._iterate(a53) : -5 === i61 ? this._resolveEmptyArray() : this._resolve(function(t18) {
                                            switch(t18){
                                                case -2:
                                                    return [];
                                                case -3:
                                                    return {
                                                    };
                                                case -6:
                                                    return new Map;
                                            }
                                        }(i61));
                                        else {
                                            var c40 = o81("expecting an array or an iterable object but got " + s43.classString(a53)).reason();
                                            this._promise._rejectCallback(c40, false);
                                        }
                                    }, a49.prototype._iterate = function(t18) {
                                        var r73 = this.getActualLength(t18.length);
                                        this._length = r73, this._values = this.shouldCopyValues() ? new Array(r73) : this._values;
                                        for(var o87 = this._promise, i61 = false, s51 = null, a53 = 0; a53 < r73; ++a53){
                                            var u58 = n66(t18[a53], o87);
                                            s51 = u58 instanceof e38 ? (u58 = u58._target())._bitField : null, i61 ? null !== s51 && u58.suppressUnhandledRejections() : null !== s51 ? 0 == (50397184 & s51) ? (u58._proxy(this, a53), this._values[a53] = u58) : i61 = 0 != (33554432 & s51) ? this._promiseFulfilled(u58._value(), a53) : 0 != (16777216 & s51) ? this._promiseRejected(u58._reason(), a53) : this._promiseCancelled(a53) : i61 = this._promiseFulfilled(u58, a53);
                                        }
                                        i61 || o87._setAsyncGuaranteed();
                                    }, a49.prototype._isResolved = function() {
                                        return null === this._values;
                                    }, a49.prototype._resolve = function(t18) {
                                        this._values = null, this._promise._fulfill(t18);
                                    }, a49.prototype._cancel = function() {
                                        !this._isResolved() && this._promise._isCancellable() && (this._values = null, this._promise._cancel());
                                    }, a49.prototype._reject = function(t18) {
                                        this._values = null, this._promise._rejectCallback(t18, false);
                                    }, a49.prototype._promiseFulfilled = function(t18, e39) {
                                        return this._values[e39] = t18, (++this._totalResolved) >= this._length && (this._resolve(this._values), true);
                                    }, a49.prototype._promiseCancelled = function() {
                                        return this._cancel(), true;
                                    }, a49.prototype._promiseRejected = function(t18) {
                                        return this._totalResolved++, this._reject(t18), true;
                                    }, a49.prototype._resultCancelled = function() {
                                        if (!this._isResolved()) {
                                            var t18 = this._values;
                                            if (this._cancel(), t18 instanceof e38) t18.cancel();
                                            else for(var r73 = 0; r73 < t18.length; ++r73)t18[r73] instanceof e38 && t18[r73].cancel();
                                        }
                                    }, a49.prototype.shouldCopyValues = function() {
                                        return true;
                                    }, a49.prototype.getActualLength = function(t19) {
                                        return t19;
                                    }, a49;
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        24: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72) {
                                    var n66 = {
                                    }, o81 = t9("./util"), i54 = t9("./nodeback"), s43 = o81.withAppended, a49 = o81.maybeWrapAsError, u59 = o81.canEvaluate, l31 = t9("./errors").TypeError, f25 = {
                                        __isPromisified__: true
                                    }, p23 = new RegExp("^(?:" + [
                                        "arity",
                                        "length",
                                        "name",
                                        "arguments",
                                        "caller",
                                        "callee",
                                        "prototype",
                                        "__isPromisified__"
                                    ].join("|") + ")$"), h15 = function(t17) {
                                        return o81.isIdentifier(t17) && "_" !== t17.charAt(0) && "constructor" !== t17;
                                    };
                                    function y18(t17) {
                                        return !p23.test(t17);
                                    }
                                    function d19(t17) {
                                        try {
                                            return true === t17.__isPromisified__;
                                        } catch (t19) {
                                            return false;
                                        }
                                    }
                                    function _12(t17, e39, r74) {
                                        var n79 = o81.getDataPropertyOrDefault(t17, e39 + r74, f25);
                                        return !!n79 && d19(n79);
                                    }
                                    function v8(t17, e39, r74, n79) {
                                        for(var i61 = o81.inheritedDataKeys(t17), s51 = [], a53 = 0; a53 < i61.length; ++a53){
                                            var u60 = i61[a53], c41 = t17[u60], f27 = n79 === h15 || h15(u60);
                                            "function" != typeof c41 || d19(c41) || _12(t17, u60, e39) || !n79(u60, c41, t17, f27) || s51.push(u60, c41);
                                        }
                                        return (function(t19, e40, r75) {
                                            for(var n85 = 0; n85 < t19.length; n85 += 2){
                                                var o87 = t19[n85];
                                                if (r75.test(o87)) for(var i62 = o87.replace(r75, ""), s52 = 0; s52 < t19.length; s52 += 2)if (t19[s52] === i62) throw new l31("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s", e40));
                                            }
                                        })(s51, e39, r74), s51;
                                    }
                                    var m5 = u59 ? void 0 : function(t17, u61, c42, l32, f28, p26) {
                                        var h20 = function() {
                                            return this;
                                        }(), y21 = t17;
                                        function d20() {
                                            var o88 = u61;
                                            u61 === n66 && (o88 = this);
                                            var c43 = new e38(r72);
                                            c43._captureStackTrace();
                                            var l33 = "string" == typeof y21 && this !== h20 ? this[y21] : t17, f29 = i54(c43, p26);
                                            try {
                                                l33.apply(o88, s43(arguments, f29));
                                            } catch (t19) {
                                                c43._rejectCallback(a49(t19), true, true);
                                            }
                                            return c43._isFateSealed() || c43._setAsyncGuaranteed(), c43;
                                        }
                                        return "string" == typeof y21 && (t17 = l32), o81.notEnumerableProp(d20, "__isPromisified__", true), d20;
                                    };
                                    function g7(t17, e39, r74, i61, s51) {
                                        for(var a53 = new RegExp(e39.replace(/([$])/, "\\$") + "$"), u61 = v8(t17, e39, a53, r74), c42 = 0, l32 = u61.length; c42 < l32; c42 += 2){
                                            var f28 = u61[c42], p26 = u61[c42 + 1], h20 = f28 + e39;
                                            if (i61 === m5) t17[h20] = m5(f28, n66, f28, p26, e39, s51);
                                            else {
                                                var y21 = i61(p26, function() {
                                                    return m5(f28, n66, f28, p26, e39, s51);
                                                });
                                                o81.notEnumerableProp(y21, "__isPromisified__", true), t17[h20] = y21;
                                            }
                                        }
                                        return o81.toFastProperties(t17), t17;
                                    }
                                    e38.promisify = function(t17, e39) {
                                        if ("function" != typeof t17) throw new l31("expecting a function but got " + o81.classString(t17));
                                        if (d19(t17)) return t17;
                                        var r74 = function(t19, e40, r75) {
                                            return m5(t19, e40, void 0, t19, null, r75);
                                        }(t17, (void 0) === (e39 = Object(e39)).context ? n66 : e39.context, !!e39.multiArgs);
                                        return o81.copyDescriptors(t17, r74, y18), r74;
                                    }, e38.promisifyAll = function(t17, e39) {
                                        if ("function" != typeof t17 && "object" !== c33(t17)) throw new l31("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");
                                        var r74 = !!(e39 = Object(e39)).multiArgs, n79 = e39.suffix;
                                        "string" != typeof n79 && (n79 = "Async");
                                        var i61 = e39.filter;
                                        "function" != typeof i61 && (i61 = h15);
                                        var s51 = e39.promisifier;
                                        if ("function" != typeof s51 && (s51 = m5), !o81.isIdentifier(n79)) throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");
                                        for(var a53 = o81.inheritedDataKeys(t17), u61 = 0; u61 < a53.length; ++u61){
                                            var f29 = t17[a53[u61]];
                                            "constructor" !== a53[u61] && o81.isClass(f29) && (g7(f29.prototype, n79, i61, s51, r74), g7(f29, n79, i61, s51, r74));
                                        }
                                        return g7(t17, n79, i61, s51, r74);
                                    };
                                };
                            },
                            {
                                "./errors": 12,
                                "./nodeback": 20,
                                "./util": 36
                            }
                        ],
                        25: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72, n66, o81) {
                                    var i54, s43 = t9("./util"), a49 = s43.isObject, u59 = t9("./es5");
                                    "function" == typeof Map && (i54 = Map);
                                    var c42 = function() {
                                        var t17 = 0, e39 = 0;
                                        function r74(r75, n79) {
                                            this[t17] = r75, this[t17 + e39] = n79, t17++;
                                        }
                                        return function(n79) {
                                            e39 = n79.size, t17 = 0;
                                            var o88 = new Array(2 * n79.size);
                                            return n79.forEach(r74, o88), o88;
                                        };
                                    }();
                                    function l31(t17) {
                                        var e39, r74 = false;
                                        if ((void 0) !== i54 && t17 instanceof i54) e39 = c42(t17), r74 = true;
                                        else {
                                            var n79 = u59.keys(t17), o88 = n79.length;
                                            e39 = new Array(2 * o88);
                                            for(var s51 = 0; s51 < o88; ++s51){
                                                var a53 = n79[s51];
                                                e39[s51] = t17[a53], e39[s51 + o88] = a53;
                                            }
                                        }
                                        this.constructor$(e39), this._isMap = r74, this._init$(void 0, r74 ? -6 : -3);
                                    }
                                    function f25(t17) {
                                        var r74, i61 = n66(t17);
                                        return a49(i61) ? (r74 = i61 instanceof e38 ? i61._then(e38.props, void 0, void 0, void 0, void 0) : new l31(i61).promise(), i61 instanceof e38 && r74._propagateFrom(i61, 2), r74) : o81("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n");
                                    }
                                    s43.inherits(l31, r72), l31.prototype._init = function() {
                                    }, l31.prototype._promiseFulfilled = function(t17, e39) {
                                        if (this._values[e39] = t17, (++this._totalResolved) >= this._length) {
                                            var r74;
                                            if (this._isMap) r74 = (function(t19) {
                                                for(var e40 = new i54, r75 = t19.length / 2 | 0, n85 = 0; n85 < r75; ++n85){
                                                    var o89 = t19[r75 + n85], s53 = t19[n85];
                                                    e40.set(o89, s53);
                                                }
                                                return e40;
                                            })(this._values);
                                            else {
                                                r74 = {
                                                };
                                                for(var n85 = this.length(), o90 = 0, s54 = this.length(); o90 < s54; ++o90)r74[this._values[o90 + n85]] = this._values[o90];
                                            }
                                            return this._resolve(r74), true;
                                        }
                                        return false;
                                    }, l31.prototype.shouldCopyValues = function() {
                                        return false;
                                    }, l31.prototype.getActualLength = function(t17) {
                                        return t17 >> 1;
                                    }, e38.prototype.props = function() {
                                        return f25(this);
                                    }, e38.props = function(t17) {
                                        return f25(t17);
                                    };
                                };
                            },
                            {
                                "./es5": 13,
                                "./util": 36
                            }
                        ],
                        26: [
                            function(t9, e32, r71) {
                                "use strict";
                                function n66(t17) {
                                    this._capacity = t17, this._length = 0, this._front = 0;
                                }
                                n66.prototype._willBeOverCapacity = function(t17) {
                                    return this._capacity < t17;
                                }, n66.prototype._pushOne = function(t17) {
                                    var e38 = this.length();
                                    this._checkCapacity(e38 + 1), this[this._front + e38 & this._capacity - 1] = t17, this._length = e38 + 1;
                                }, n66.prototype.push = function(t17, e38, r72) {
                                    var n86 = this.length() + 3;
                                    if (this._willBeOverCapacity(n86)) return this._pushOne(t17), this._pushOne(e38), void this._pushOne(r72);
                                    var o81 = this._front + n86 - 3;
                                    this._checkCapacity(n86);
                                    var i54 = this._capacity - 1;
                                    this[o81 + 0 & i54] = t17, this[o81 + 1 & i54] = e38, this[o81 + 2 & i54] = r72, this._length = n86;
                                }, n66.prototype.shift = function() {
                                    var t17 = this._front, e38 = this[t17];
                                    return this[t17] = void 0, this._front = t17 + 1 & this._capacity - 1, this._length--, e38;
                                }, n66.prototype.length = function() {
                                    return this._length;
                                }, n66.prototype._checkCapacity = function(t17) {
                                    this._capacity < t17 && this._resizeTo(this._capacity << 1);
                                }, n66.prototype._resizeTo = function(t17) {
                                    var e38 = this._capacity;
                                    this._capacity = t17, (function(t19, e39, r72, n86, o81) {
                                        for(var i54 = 0; i54 < o81; ++i54)r72[i54 + n86] = t19[i54 + e39], t19[i54 + e39] = void 0;
                                    })(this, 0, this, e38, this._front + this._length & e38 - 1);
                                }, e32.exports = n66;
                            },
                            {
                            }
                        ],
                        27: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72, n66, o81) {
                                    var i54 = t9("./util");
                                    function s43(t17, a49) {
                                        var u59, c42 = n66(t17);
                                        if (c42 instanceof e38) return (u59 = c42).then(function(t19) {
                                            return s43(t19, u59);
                                        });
                                        if (null === (t17 = i54.asArray(t17))) return o81("expecting an array or an iterable object but got " + i54.classString(t17));
                                        var l31 = new e38(r72);
                                        (void 0) !== a49 && l31._propagateFrom(a49, 3);
                                        for(var f25 = l31._fulfill, p23 = l31._reject, h15 = 0, y18 = t17.length; h15 < y18; ++h15){
                                            var d19 = t17[h15];
                                            ((void 0) !== d19 || h15 in t17) && e38.cast(d19)._then(f25, p23, void 0, l31, null);
                                        }
                                        return l31;
                                    }
                                    e38.race = function(t17) {
                                        return s43(t17, void 0);
                                    }, e38.prototype.race = function() {
                                        return s43(this, void 0);
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        28: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72, n66, o81, i54, s43) {
                                    var a49 = e38._getDomain, u59 = t9("./util"), c42 = u59.tryCatch;
                                    function l31(t17, r75, n86, o91) {
                                        this.constructor$(t17);
                                        var s55 = a49();
                                        this._fn = null === s55 ? r75 : u59.domainBind(s55, r75), (void 0) !== n86 && (n86 = e38.resolve(n86))._attachCancellationCallback(this), this._initialValue = n86, this._currentCancellable = null, this._eachValues = o91 === i54 ? Array(this._length) : 0 === o91 ? null : void 0, this._promise._captureStackTrace(), this._init$(void 0, -5);
                                    }
                                    function f25(t17, e39) {
                                        this.isFulfilled() ? e39._resolve(t17) : e39._reject(t17);
                                    }
                                    function p23(t17, e39, r75, o91) {
                                        return "function" != typeof e39 ? n66("expecting a function but got " + u59.classString(e39)) : new l31(t17, e39, r75, o91).promise();
                                    }
                                    function h15(t17) {
                                        this.accum = t17, this.array._gotAccum(t17);
                                        var r75 = o81(this.value, this.array._promise);
                                        return r75 instanceof e38 ? (this.array._currentCancellable = r75, r75._then(y18, void 0, void 0, this, void 0)) : y18.call(this, r75);
                                    }
                                    function y18(t17) {
                                        var r75, n86 = this.array, o91 = n86._promise, i61 = c42(n86._fn);
                                        o91._pushContext(), (r75 = (void 0) !== n86._eachValues ? i61.call(o91._boundValue(), t17, this.index, this.length) : i61.call(o91._boundValue(), this.accum, t17, this.index, this.length)) instanceof e38 && (n86._currentCancellable = r75);
                                        var a54 = o91._popContext();
                                        return s43.checkForgottenReturns(r75, a54, (void 0) !== n86._eachValues ? "Promise.each" : "Promise.reduce", o91), r75;
                                    }
                                    u59.inherits(l31, r72), l31.prototype._gotAccum = function(t17) {
                                        (void 0) !== this._eachValues && null !== this._eachValues && t17 !== i54 && this._eachValues.push(t17);
                                    }, l31.prototype._eachComplete = function(t17) {
                                        return null !== this._eachValues && this._eachValues.push(t17), this._eachValues;
                                    }, l31.prototype._init = function() {
                                    }, l31.prototype._resolveEmptyArray = function() {
                                        this._resolve((void 0) !== this._eachValues ? this._eachValues : this._initialValue);
                                    }, l31.prototype.shouldCopyValues = function() {
                                        return false;
                                    }, l31.prototype._resolve = function(t17) {
                                        this._promise._resolveCallback(t17), this._values = null;
                                    }, l31.prototype._resultCancelled = function(t17) {
                                        if (t17 === this._initialValue) return this._cancel();
                                        this._isResolved() || (this._resultCancelled$(), this._currentCancellable instanceof e38 && this._currentCancellable.cancel(), this._initialValue instanceof e38 && this._initialValue.cancel());
                                    }, l31.prototype._iterate = function(t17) {
                                        var r75, n86;
                                        this._values = t17;
                                        var o91 = t17.length;
                                        if ((void 0) !== this._initialValue ? (r75 = this._initialValue, n86 = 0) : (r75 = e38.resolve(t17[0]), n86 = 1), this._currentCancellable = r75, !r75.isRejected()) for(; n86 < o91; ++n86){
                                            var i61 = {
                                                accum: null,
                                                value: t17[n86],
                                                index: n86,
                                                length: o91,
                                                array: this
                                            };
                                            r75 = r75._then(h15, void 0, void 0, i61, void 0);
                                        }
                                        (void 0) !== this._eachValues && (r75 = r75._then(this._eachComplete, void 0, void 0, this, void 0)), r75._then(f25, f25, void 0, r75, this);
                                    }, e38.prototype.reduce = function(t17, e39) {
                                        return p23(this, t17, e39, null);
                                    }, e38.reduce = function(t17, e39, r75, n86) {
                                        return p23(t17, e39, r75, n86);
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        29: [
                            function(t9, e32, i54) {
                                "use strict";
                                var s43, a49, u59, c42, l31, f25 = t9("./util"), p23 = f25.getNativePromise();
                                if (f25.isNode && "undefined" == typeof MutationObserver) {
                                    var h15 = n64.setImmediate, y18 = r48.nextTick;
                                    s43 = f25.isRecentNode ? function(t17) {
                                        h15.call(n64, t17);
                                    } : function(t17) {
                                        y18.call(r48, t17);
                                    };
                                } else if ("function" == typeof p23 && "function" == typeof p23.resolve) {
                                    var d20 = p23.resolve();
                                    s43 = function(t17) {
                                        d20.then(t17);
                                    };
                                } else s43 = "undefined" == typeof MutationObserver || "undefined" != typeof window && window.navigator && (window.navigator.standalone || window.cordova) ? (void 0) !== o70 ? function(t17) {
                                    o70(t17);
                                } : "undefined" != typeof setTimeout ? function(t17) {
                                    setTimeout(t17, 0);
                                } : function() {
                                    throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
                                } : (a49 = document.createElement("div"), u59 = {
                                    attributes: true
                                }, c42 = false, l31 = document.createElement("div"), new MutationObserver(function() {
                                    a49.classList.toggle("foo"), c42 = false;
                                }).observe(l31, u59), function(t17) {
                                    var e38 = new MutationObserver(function() {
                                        e38.disconnect(), t17();
                                    });
                                    e38.observe(a49, u59), c42 || (c42 = true, l31.classList.toggle("foo"));
                                });
                                e32.exports = s43;
                            },
                            {
                                "./util": 36
                            }
                        ],
                        30: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72, n66) {
                                    var o81 = e38.PromiseInspection;
                                    function i54(t17) {
                                        this.constructor$(t17);
                                    }
                                    t9("./util").inherits(i54, r72), i54.prototype._promiseResolved = function(t17, e39) {
                                        return this._values[t17] = e39, (++this._totalResolved) >= this._length && (this._resolve(this._values), true);
                                    }, i54.prototype._promiseFulfilled = function(t17, e39) {
                                        var r75 = new o81;
                                        return r75._bitField = 33554432, r75._settledValueField = t17, this._promiseResolved(e39, r75);
                                    }, i54.prototype._promiseRejected = function(t17, e39) {
                                        var r75 = new o81;
                                        return r75._bitField = 16777216, r75._settledValueField = t17, this._promiseResolved(e39, r75);
                                    }, e38.settle = function(t17) {
                                        return n66.deprecated(".settle()", ".reflect()"), new i54(t17).promise();
                                    }, e38.prototype.settle = function() {
                                        return e38.settle(this);
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        31: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72, n66) {
                                    var o81 = t9("./util"), i54 = t9("./errors").RangeError, s43 = t9("./errors").AggregateError, a49 = o81.isArray, u59 = {
                                    };
                                    function c42(t17) {
                                        this.constructor$(t17), this._howMany = 0, this._unwrap = false, this._initialized = false;
                                    }
                                    function l31(t17, e39) {
                                        if ((0 | e39) !== e39 || e39 < 0) return n66("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");
                                        var r75 = new c42(t17), o91 = r75.promise();
                                        return r75.setHowMany(e39), r75.init(), o91;
                                    }
                                    o81.inherits(c42, r72), c42.prototype._init = function() {
                                        if (this._initialized) {
                                            if (0 !== this._howMany) {
                                                this._init$(void 0, -5);
                                                var t17 = a49(this._values);
                                                !this._isResolved() && t17 && this._howMany > this._canPossiblyFulfill() && this._reject(this._getRangeError(this.length()));
                                            } else this._resolve([]);
                                        }
                                    }, c42.prototype.init = function() {
                                        this._initialized = true, this._init();
                                    }, c42.prototype.setUnwrap = function() {
                                        this._unwrap = true;
                                    }, c42.prototype.howMany = function() {
                                        return this._howMany;
                                    }, c42.prototype.setHowMany = function(t19) {
                                        this._howMany = t19;
                                    }, c42.prototype._promiseFulfilled = function(t19) {
                                        return this._addFulfilled(t19), this._fulfilled() === this.howMany() && (this._values.length = this.howMany(), 1 === this.howMany() && this._unwrap ? this._resolve(this._values[0]) : this._resolve(this._values), true);
                                    }, c42.prototype._promiseRejected = function(t19) {
                                        return this._addRejected(t19), this._checkOutcome();
                                    }, c42.prototype._promiseCancelled = function() {
                                        return this._values instanceof e38 || null == this._values ? this._cancel() : (this._addRejected(u59), this._checkOutcome());
                                    }, c42.prototype._checkOutcome = function() {
                                        if (this.howMany() > this._canPossiblyFulfill()) {
                                            for(var t19 = new s43, e39 = this.length(); e39 < this._values.length; ++e39)this._values[e39] !== u59 && t19.push(this._values[e39]);
                                            return t19.length > 0 ? this._reject(t19) : this._cancel(), true;
                                        }
                                        return false;
                                    }, c42.prototype._fulfilled = function() {
                                        return this._totalResolved;
                                    }, c42.prototype._rejected = function() {
                                        return this._values.length - this.length();
                                    }, c42.prototype._addRejected = function(t20) {
                                        this._values.push(t20);
                                    }, c42.prototype._addFulfilled = function(t20) {
                                        this._values[this._totalResolved++] = t20;
                                    }, c42.prototype._canPossiblyFulfill = function() {
                                        return this.length() - this._rejected();
                                    }, c42.prototype._getRangeError = function(t20) {
                                        var e40 = "Input array must contain at least " + this._howMany + " items but contains only " + t20 + " items";
                                        return new i54(e40);
                                    }, c42.prototype._resolveEmptyArray = function() {
                                        this._reject(this._getRangeError(0));
                                    }, e38.some = function(t20, e40) {
                                        return l31(t20, e40);
                                    }, e38.prototype.some = function(t20) {
                                        return l31(this, t20);
                                    }, e38._SomePromiseArray = c42;
                                };
                            },
                            {
                                "./errors": 12,
                                "./util": 36
                            }
                        ],
                        32: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(t20) {
                                    function e38(t21) {
                                        (void 0) !== t21 ? (t21 = t21._target(), this._bitField = t21._bitField, this._settledValueField = t21._isFateSealed() ? t21._settledValue() : void 0) : (this._bitField = 0, this._settledValueField = void 0);
                                    }
                                    e38.prototype._settledValue = function() {
                                        return this._settledValueField;
                                    };
                                    var r72 = e38.prototype.value = function() {
                                        if (!this.isFulfilled()) throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");
                                        return this._settledValue();
                                    }, n66 = e38.prototype.error = e38.prototype.reason = function() {
                                        if (!this.isRejected()) throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");
                                        return this._settledValue();
                                    }, o81 = e38.prototype.isFulfilled = function() {
                                        return 0 != (33554432 & this._bitField);
                                    }, i54 = e38.prototype.isRejected = function() {
                                        return 0 != (16777216 & this._bitField);
                                    }, s43 = e38.prototype.isPending = function() {
                                        return 0 == (50397184 & this._bitField);
                                    }, a49 = e38.prototype.isResolved = function() {
                                        return 0 != (50331648 & this._bitField);
                                    };
                                    e38.prototype.isCancelled = function() {
                                        return 0 != (8454144 & this._bitField);
                                    }, t20.prototype.__isCancelled = function() {
                                        return 65536 == (65536 & this._bitField);
                                    }, t20.prototype._isCancelled = function() {
                                        return this._target().__isCancelled();
                                    }, t20.prototype.isCancelled = function() {
                                        return 0 != (8454144 & this._target()._bitField);
                                    }, t20.prototype.isPending = function() {
                                        return s43.call(this._target());
                                    }, t20.prototype.isRejected = function() {
                                        return i54.call(this._target());
                                    }, t20.prototype.isFulfilled = function() {
                                        return o81.call(this._target());
                                    }, t20.prototype.isResolved = function() {
                                        return a49.call(this._target());
                                    }, t20.prototype.value = function() {
                                        return r72.call(this._target());
                                    }, t20.prototype.reason = function() {
                                        var t21 = this._target();
                                        return t21._unsetRejectionIsUnhandled(), n66.call(t21);
                                    }, t20.prototype._value = function() {
                                        return this._settledValue();
                                    }, t20.prototype._reason = function() {
                                        return this._unsetRejectionIsUnhandled(), this._settledValue();
                                    }, t20.PromiseInspection = e38;
                                };
                            },
                            {
                            }
                        ],
                        33: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72) {
                                    var n66 = t9("./util"), o81 = n66.errorObj, i54 = n66.isObject, s43 = {
                                    }.hasOwnProperty;
                                    return function(t20, a49) {
                                        if (i54(t20)) {
                                            if (t20 instanceof e38) return t20;
                                            var u59 = function(t21) {
                                                try {
                                                    return (function(t22) {
                                                        return t22.then;
                                                    })(t21);
                                                } catch (t22) {
                                                    return o81.e = t22, o81;
                                                }
                                            }(t20);
                                            if (u59 === o81) {
                                                a49 && a49._pushContext();
                                                var c42 = e38.reject(u59.e);
                                                return a49 && a49._popContext(), c42;
                                            }
                                            if ("function" == typeof u59) return (function(t21) {
                                                try {
                                                    return s43.call(t21, "_promise0");
                                                } catch (t22) {
                                                    return false;
                                                }
                                            })(t20) ? (c42 = new e38(r72), t20._then(c42._fulfill, c42._reject, void 0, c42, null), c42) : (function(t21, i63, s55) {
                                                var a54 = new e38(r72), u61 = a54;
                                                s55 && s55._pushContext(), a54._captureStackTrace(), s55 && s55._popContext();
                                                var c43 = n66.tryCatch(i63).call(t21, function(t22) {
                                                    a54 && (a54._resolveCallback(t22), a54 = null);
                                                }, function(t22) {
                                                    a54 && (a54._rejectCallback(t22, false, true), a54 = null);
                                                });
                                                return a54 && c43 === o81 && (a54._rejectCallback(c43.e, true, true), a54 = null), u61;
                                            })(t20, u59, a49);
                                        }
                                        return t20;
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        34: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72, n66) {
                                    var o81 = t9("./util"), i54 = e38.TimeoutError;
                                    function s43(t20) {
                                        this.handle = t20;
                                    }
                                    s43.prototype._resultCancelled = function() {
                                        clearTimeout(this.handle);
                                    };
                                    var a49 = function(t20) {
                                        return u61(+this).thenReturn(t20);
                                    }, u61 = e38.delay = function(t20, o91) {
                                        var i63, u62;
                                        return (void 0) !== o91 ? (i63 = e38.resolve(o91)._then(a49, null, null, t20, void 0), n66.cancellation() && o91 instanceof e38 && i63._setOnCancel(o91)) : (i63 = new e38(r72), u62 = setTimeout(function() {
                                            i63._fulfill();
                                        }, +t20), n66.cancellation() && i63._setOnCancel(new s43(u62)), i63._captureStackTrace()), i63._setAsyncGuaranteed(), i63;
                                    };
                                    function c43(t20) {
                                        return clearTimeout(this.handle), t20;
                                    }
                                    function l31(t20) {
                                        throw clearTimeout(this.handle), t20;
                                    }
                                    e38.prototype.delay = function(t20) {
                                        return u61(t20, this);
                                    }, e38.prototype.timeout = function(t20, e40) {
                                        var r75, a54;
                                        t20 = +t20;
                                        var u62 = new s43(setTimeout(function() {
                                            r75.isPending() && (function(t21, e41, r76) {
                                                var n86;
                                                n86 = "string" != typeof e41 ? e41 instanceof Error ? e41 : new i54("operation timed out") : new i54(e41), o81.markAsOriginatingFromRejection(n86), t21._attachExtraTrace(n86), t21._reject(n86), null != r76 && r76.cancel();
                                            })(r75, e40, a54);
                                        }, t20));
                                        return n66.cancellation() ? (a54 = this.then(), (r75 = a54._then(c43, l31, void 0, u62, void 0))._setOnCancel(u62)) : r75 = this._then(c43, l31, void 0, u62, void 0), r75;
                                    };
                                };
                            },
                            {
                                "./util": 36
                            }
                        ],
                        35: [
                            function(t9, e32, r71) {
                                "use strict";
                                e32.exports = function(e38, r72, n66, o81, i54, s43) {
                                    var a49 = t9("./util"), u61 = t9("./errors").TypeError, c43 = t9("./util").inherits, l31 = a49.errorObj, f25 = a49.tryCatch, p23 = {
                                    };
                                    function h21(t20) {
                                        setTimeout(function() {
                                            throw t20;
                                        }, 0);
                                    }
                                    function y22(t20, r75) {
                                        var o91 = 0, s55 = t20.length, a54 = new e38(i54);
                                        return (function i63() {
                                            if (o91 >= s55) return a54._fulfill();
                                            var u62 = function(t21) {
                                                var e40 = n66(t21);
                                                return e40 !== t21 && "function" == typeof t21._isDisposable && "function" == typeof t21._getDisposer && t21._isDisposable() && e40._setDisposable(t21._getDisposer()), e40;
                                            }(t20[o91++]);
                                            if (u62 instanceof e38 && u62._isDisposable()) {
                                                try {
                                                    u62 = n66(u62._getDisposer().tryDispose(r75), t20.promise);
                                                } catch (t21) {
                                                    return h21(t21);
                                                }
                                                if (u62 instanceof e38) return u62._then(i63, h21, null, null, null);
                                            }
                                            i63();
                                        })(), a54;
                                    }
                                    function d21(t20, e40, r75) {
                                        this._data = t20, this._promise = e40, this._context = r75;
                                    }
                                    function _12(t20, e40, r75) {
                                        this.constructor$(t20, e40, r75);
                                    }
                                    function v8(t20) {
                                        return d21.isDisposer(t20) ? (this.resources[this.index]._setDisposable(t20), t20.promise()) : t20;
                                    }
                                    function m5(t20) {
                                        this.length = t20, this.promise = null, this[t20 - 1] = null;
                                    }
                                    d21.prototype.data = function() {
                                        return this._data;
                                    }, d21.prototype.promise = function() {
                                        return this._promise;
                                    }, d21.prototype.resource = function() {
                                        return this.promise().isFulfilled() ? this.promise().value() : p23;
                                    }, d21.prototype.tryDispose = function(t20) {
                                        var e40 = this.resource(), r75 = this._context;
                                        (void 0) !== r75 && r75._pushContext();
                                        var n86 = e40 !== p23 ? this.doDispose(e40, t20) : null;
                                        return (void 0) !== r75 && r75._popContext(), this._promise._unsetDisposable(), this._data = null, n86;
                                    }, d21.isDisposer = function(t20) {
                                        return null != t20 && "function" == typeof t20.resource && "function" == typeof t20.tryDispose;
                                    }, c43(_12, d21), _12.prototype.doDispose = function(t20, e40) {
                                        return this.data().call(t20, t20, e40);
                                    }, m5.prototype._resultCancelled = function() {
                                        for(var t20 = this.length, r75 = 0; r75 < t20; ++r75){
                                            var n86 = this[r75];
                                            n86 instanceof e38 && n86.cancel();
                                        }
                                    }, e38.using = function() {
                                        var t20 = arguments.length;
                                        if (t20 < 2) return r72("you must pass at least 2 arguments to Promise.using");
                                        var o91, i63 = arguments[t20 - 1];
                                        if ("function" != typeof i63) return r72("expecting a function but got " + a49.classString(i63));
                                        var u62 = true;
                                        2 === t20 && Array.isArray(arguments[0]) ? (t20 = (o91 = arguments[0]).length, u62 = false) : (o91 = arguments, t20--);
                                        for(var c44 = new m5(t20), p27 = 0; p27 < t20; ++p27){
                                            var h22 = o91[p27];
                                            if (d21.isDisposer(h22)) {
                                                var _13 = h22;
                                                (h22 = h22.promise())._setDisposable(_13);
                                            } else {
                                                var g7 = n66(h22);
                                                g7 instanceof e38 && (h22 = g7._then(v8, null, null, {
                                                    resources: c44,
                                                    index: p27
                                                }, void 0));
                                            }
                                            c44[p27] = h22;
                                        }
                                        var b7 = new Array(c44.length);
                                        for(p27 = 0; p27 < b7.length; ++p27)b7[p27] = e38.resolve(c44[p27]).reflect();
                                        var w7 = e38.all(b7).then(function(t21) {
                                            for(var e40 = 0; e40 < t21.length; ++e40){
                                                var r75 = t21[e40];
                                                if (r75.isRejected()) return l31.e = r75.error(), l31;
                                                if (!r75.isFulfilled()) return void w7.cancel();
                                                t21[e40] = r75.value();
                                            }
                                            O7._pushContext(), i63 = f25(i63);
                                            var n87 = u62 ? i63.apply(void 0, t21) : i63(t21), o92 = O7._popContext();
                                            return s43.checkForgottenReturns(n87, o92, "Promise.using", O7), n87;
                                        }), O7 = w7.lastly(function() {
                                            var t21 = new e38.PromiseInspection(w7);
                                            return y22(c44, t21);
                                        });
                                        return c44.promise = O7, O7._setOnCancel(c44), O7;
                                    }, e38.prototype._setDisposable = function(t20) {
                                        this._bitField = 131072 | this._bitField, this._disposer = t20;
                                    }, e38.prototype._isDisposable = function() {
                                        return (131072 & this._bitField) > 0;
                                    }, e38.prototype._getDisposer = function() {
                                        return this._disposer;
                                    }, e38.prototype._unsetDisposable = function() {
                                        this._bitField = -131073 & this._bitField, this._disposer = void 0;
                                    }, e38.prototype.disposer = function(t20) {
                                        if ("function" == typeof t20) return new _12(t20, this, o81());
                                        throw new u61;
                                    };
                                };
                            },
                            {
                                "./errors": 12,
                                "./util": 36
                            }
                        ],
                        36: [
                            function(t9, e32, o81) {
                                "use strict";
                                var i54 = t9("./es5"), s43 = "undefined" == typeof navigator, a49 = {
                                    e: {
                                    }
                                }, u61, l31 = "undefined" != typeof self ? self : "undefined" != typeof window ? window : (void 0) !== n64 ? n64 : (void 0) !== this ? this : null;
                                function f25() {
                                    try {
                                        var t20 = u61;
                                        return u61 = null, t20.apply(this, arguments);
                                    } catch (t21) {
                                        return a49.e = t21, a49;
                                    }
                                }
                                function p23(t20) {
                                    return u61 = t20, f25;
                                }
                                var h21 = function(t20, e38) {
                                    var r71 = {
                                    }.hasOwnProperty;
                                    function n66() {
                                        for(var n87 in this.constructor = t20, this.constructor$ = e38, e38.prototype)r71.call(e38.prototype, n87) && "$" !== n87.charAt(n87.length - 1) && (this[n87 + "$"] = e38.prototype[n87]);
                                    }
                                    return n66.prototype = e38.prototype, t20.prototype = new n66, t20.prototype;
                                };
                                function y22(t20) {
                                    return null == t20 || true === t20 || false === t20 || "string" == typeof t20 || "number" == typeof t20;
                                }
                                function d21(t20) {
                                    return "function" == typeof t20 || "object" === c33(t20) && null !== t20;
                                }
                                function _12(t20) {
                                    return y22(t20) ? new Error(P3(t20)) : t20;
                                }
                                function v8(t20, e38) {
                                    var r71, n66 = t20.length, o91 = new Array(n66 + 1);
                                    for(r71 = 0; r71 < n66; ++r71)o91[r71] = t20[r71];
                                    return o91[r71] = e38, o91;
                                }
                                function m5(t20, e38, r71) {
                                    if (!i54.isES5) return ({
                                    }).hasOwnProperty.call(t20, e38) ? t20[e38] : void 0;
                                    var n66 = Object.getOwnPropertyDescriptor(t20, e38);
                                    return null != n66 ? null == n66.get && null == n66.set ? n66.value : r71 : void 0;
                                }
                                function g8(t20, e38, r71) {
                                    if (y22(t20)) return t20;
                                    var n66 = {
                                        value: r71,
                                        configurable: true,
                                        enumerable: false,
                                        writable: true
                                    };
                                    return i54.defineProperty(t20, e38, n66), t20;
                                }
                                function b7(t20) {
                                    throw t20;
                                }
                                var w7 = function() {
                                    var t20 = [
                                        Array.prototype,
                                        Object.prototype,
                                        Function.prototype
                                    ], e38 = function(e40) {
                                        for(var r71 = 0; r71 < t20.length; ++r71)if (t20[r71] === e40) return true;
                                        return false;
                                    };
                                    if (i54.isES5) {
                                        var r71 = Object.getOwnPropertyNames;
                                        return function(t21) {
                                            for(var n66 = [], o91 = Object.create(null); null != t21 && !e38(t21);){
                                                var s55;
                                                try {
                                                    s55 = r71(t21);
                                                } catch (t22) {
                                                    return n66;
                                                }
                                                for(var a54 = 0; a54 < s55.length; ++a54){
                                                    var u62 = s55[a54];
                                                    if (!o91[u62]) {
                                                        o91[u62] = true;
                                                        var c43 = Object.getOwnPropertyDescriptor(t21, u62);
                                                        null != c43 && null == c43.get && null == c43.set && n66.push(u62);
                                                    }
                                                }
                                                t21 = i54.getPrototypeOf(t21);
                                            }
                                            return n66;
                                        };
                                    }
                                    var n66 = {
                                    }.hasOwnProperty;
                                    return function(r72) {
                                        if (e38(r72)) return [];
                                        var o91 = [];
                                        t: for(var i63 in r72)if (n66.call(r72, i63)) o91.push(i63);
                                        else {
                                            for(var s56 = 0; s56 < t20.length; ++s56)if (n66.call(t20[s56], i63)) continue t;
                                            o91.push(i63);
                                        }
                                        return o91;
                                    };
                                }(), O7 = /this\s*\.\s*\S+\s*=/;
                                function S6(t20) {
                                    try {
                                        if ("function" == typeof t20) {
                                            var e38 = i54.names(t20.prototype), r72 = i54.isES5 && e38.length > 1, n66 = e38.length > 0 && !(1 === e38.length && "constructor" === e38[0]), o91 = O7.test(t20 + "") && i54.names(t20).length > 0;
                                            if (r72 || n66 || o91) return true;
                                        }
                                        return false;
                                    } catch (t21) {
                                        return false;
                                    }
                                }
                                function A3(t20) {
                                    function e40() {
                                    }
                                    e40.prototype = t20;
                                    for(var r76 = 8; r76--;)new e40;
                                    return t20;
                                }
                                var $3 = /^[a-z$_][a-z$_0-9]*$/i;
                                function E4(t20) {
                                    return $3.test(t20);
                                }
                                function j4(t20, e40, r76) {
                                    for(var n87 = new Array(t20), o92 = 0; o92 < t20; ++o92)n87[o92] = e40 + o92 + r76;
                                    return n87;
                                }
                                function P3(t20) {
                                    try {
                                        return t20 + "";
                                    } catch (t21) {
                                        return "[no string representation]";
                                    }
                                }
                                function x5(t20) {
                                    return t20 instanceof Error || null !== t20 && "object" === c33(t20) && "string" == typeof t20.message && "string" == typeof t20.name;
                                }
                                function T4(t20) {
                                    try {
                                        g8(t20, "isOperational", true);
                                    } catch (t21) {
                                    }
                                }
                                function N4(t20) {
                                    return null != t20 && (t20 instanceof Error.__BluebirdErrorTypes__.OperationalError || true === t20.isOperational);
                                }
                                function k3(t20) {
                                    return x5(t20) && i54.propertyIsWritable(t20, "stack");
                                }
                                var B3 = "stack" in new Error ? function(t20) {
                                    return k3(t20) ? t20 : new Error(P3(t20));
                                } : function(t20) {
                                    if (k3(t20)) return t20;
                                    try {
                                        throw new Error(P3(t20));
                                    } catch (t21) {
                                        return t21;
                                    }
                                };
                                function R3(t20) {
                                    return ({
                                    }).toString.call(t20);
                                }
                                function C4(t20, e40, r76) {
                                    for(var n87 = i54.names(t20), o92 = 0; o92 < n87.length; ++o92){
                                        var s57 = n87[o92];
                                        if (r76(s57)) try {
                                            i54.defineProperty(e40, s57, i54.getDescriptor(t20, s57));
                                        } catch (t21) {
                                        }
                                    }
                                }
                                var D = function(t20) {
                                    return i54.isArray(t20) ? t20 : null;
                                };
                                if ("undefined" != typeof Symbol && Symbol.iterator) {
                                    var M6 = "function" == typeof Array.from ? function(t20) {
                                        return Array.from(t20);
                                    } : function(t20) {
                                        for(var e40, r76 = [], n87 = t20[Symbol.iterator](); !(e40 = n87.next()).done;)r76.push(e40.value);
                                        return r76;
                                    };
                                    D = function(t20) {
                                        return i54.isArray(t20) ? t20 : null != t20 && "function" == typeof t20[Symbol.iterator] ? M6(t20) : null;
                                    };
                                }
                                var I = (void 0) !== r48 && "[object process]" === R3(r48).toLowerCase(), F6 = (void 0) !== r48 && (void 0) !== r48.env;
                                function L5(t20) {
                                    return F6 ? r48.env[t20] : void 0;
                                }
                                function U4() {
                                    if ("function" == typeof Promise) try {
                                        var t20 = new Promise(function() {
                                        });
                                        if ("[object Promise]" === ({
                                        }).toString.call(t20)) return Promise;
                                    } catch (t21) {
                                    }
                                }
                                function V5(t20, e40) {
                                    return t20.bind(e40);
                                }
                                var q4 = {
                                    isClass: S6,
                                    isIdentifier: E4,
                                    inheritedDataKeys: w7,
                                    getDataPropertyOrDefault: m5,
                                    thrower: b7,
                                    isArray: i54.isArray,
                                    asArray: D,
                                    notEnumerableProp: g8,
                                    isPrimitive: y22,
                                    isObject: d21,
                                    isError: x5,
                                    canEvaluate: s43,
                                    errorObj: a49,
                                    tryCatch: p23,
                                    inherits: h21,
                                    withAppended: v8,
                                    maybeWrapAsError: _12,
                                    toFastProperties: A3,
                                    filledRange: j4,
                                    toString: P3,
                                    canAttachTrace: k3,
                                    ensureErrorObject: B3,
                                    originatesFromRejection: N4,
                                    markAsOriginatingFromRejection: T4,
                                    classString: R3,
                                    copyDescriptors: C4,
                                    hasDevTools: "undefined" != typeof chrome && chrome && "function" == typeof chrome.loadTimes,
                                    isNode: I,
                                    hasEnvVariables: F6,
                                    env: L5,
                                    global: l31,
                                    getNativePromise: U4,
                                    domainBind: V5
                                }, W4;
                                q4.isRecentNode = q4.isNode && (W4 = r48.versions.node.split(".").map(Number), 0 === W4[0] && W4[1] > 10 || W4[0] > 0), q4.isNode && q4.toFastProperties(r48);
                                try {
                                    throw new Error;
                                } catch (t20) {
                                    q4.lastLineError = t20;
                                }
                                e32.exports = q4;
                            },
                            {
                                "./es5": 13
                            }
                        ]
                    }, {
                    }, [
                        4
                    ])(4);
                }, "object" == c33(e3) && (void 0) !== t2 ? t2.exports = u45() : (s36 = [], (void 0) === (a43 = "function" == typeof (i42 = u45) ? i42.apply(e3, s36) : i42) || (t2.exports = a43)), "undefined" != typeof window && null !== window ? window.P = window.Promise : "undefined" != typeof self && null !== self && (self.P = self.Promise);
            }).call(this, r2(7), r2(11), r2(69).setImmediate);
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = t2.exports = {
            };
            n64.DocumentNotFoundError = null, n64.general = {
            }, n64.general.default = "Validator failed for path `{PATH}` with value `{VALUE}`", n64.general.required = "Path `{PATH}` is required.", n64.Number = {
            }, n64.Number.min = "Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).", n64.Number.max = "Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).", n64.Number.enum = "`{VALUE}` is not a valid enum value for path `{PATH}`.", n64.Date = {
            }, n64.Date.min = "Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).", n64.Date.max = "Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).", n64.String = {
            }, n64.String.enum = "`{VALUE}` is not a valid enum value for path `{PATH}`.", n64.String.match = "Path `{PATH}` is invalid ({VALUE}).", n64.String.minlength = "Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).", n64.String.maxlength = "Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).";
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o70(t5, e29) {
                return (o70 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function i42(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r48, n87 = a43(t5);
                    if (e29) {
                        var o81 = a43(this).constructor;
                        r48 = Reflect.construct(n87, arguments, o81);
                    } else r48 = n87.apply(this, arguments);
                    return s36(this, r48);
                };
            }
            function s36(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function a43(t5) {
                return (a43 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var u45 = r2(5), c33 = r2(4), l31 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && o70(t8, e29);
                })(r48, t5);
                var e29 = i42(r48);
                /*!
   * OverwriteModel Error constructor.
   */ function r48(t8, n87, o92, i43) {
                    var s43, a49;
                    (function(t9, e32) {
                        if (!(t9 instanceof e32)) throw new TypeError("Cannot call a class as a function");
                    })(this, r48);
                    var l32 = u45.messages;
                    return a49 = null != l32.DocumentNotFoundError ? "function" == typeof l32.DocumentNotFoundError ? l32.DocumentNotFoundError(t8, n87) : l32.DocumentNotFoundError : 'No document found for query "' + c33.inspect(t8) + '" on model "' + n87 + '"', (s43 = e29.call(this, a49)).result = i43, s43.numAffected = o92, s43.filter = t8, s43.query = t8, s43;
                }
                return r48;
            }(u45);
            Object.defineProperty(l31.prototype, "name", {
                value: "DocumentNotFoundError"
            }), /*!
 * exports
 */ t2.exports = l31;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o70(t5, e29) {
                return (o70 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function i42(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r48, n87 = a43(t5);
                    if (e29) {
                        var o92 = a43(this).constructor;
                        r48 = Reflect.construct(n87, arguments, o92);
                    } else r48 = n87.apply(this, arguments);
                    return s36(this, r48);
                };
            }
            function s36(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function a43(t5) {
                return (a43 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var u45 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && o70(t8, e29);
                })(r48, t5);
                var e29 = i42(r48);
                function r48(t8, n87, o93) {
                    var i43;
                    (function(t9, e32) {
                        if (!(t9 instanceof e32)) throw new TypeError("Cannot call a class as a function");
                    })(this, r48);
                    var s43 = o93.join(", ");
                    return (i43 = e29.call(this, 'No matching document found for id "' + t8._id + '" version ' + n87 + ' modifiedPaths "' + s43 + '"')).version = n87, i43.modifiedPaths = o93, i43;
                }
                return r48;
            }(r2(5));
            Object.defineProperty(u45.prototype, "name", {
                value: "VersionError"
            }), /*!
 * exports
 */ t2.exports = u45;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o70(t5, e29) {
                return (o70 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function i42(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r48, n87 = a43(t5);
                    if (e29) {
                        var o93 = a43(this).constructor;
                        r48 = Reflect.construct(n87, arguments, o93);
                    } else r48 = n87.apply(this, arguments);
                    return s36(this, r48);
                };
            }
            function s36(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function a43(t5) {
                return (a43 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var u45 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && o70(t8, e29);
                })(r48, t5);
                var e29 = i42(r48);
                function r48(t8) {
                    (function(t9, e32) {
                        if (!(t9 instanceof e32)) throw new TypeError("Cannot call a class as a function");
                    })(this, r48);
                    return e29.call(this, "Can't save() the same doc multiple times in parallel. Document: " + t8._id);
                }
                return r48;
            }(r2(5));
            Object.defineProperty(u45.prototype, "name", {
                value: "ParallelSaveError"
            }), /*!
 * exports
 */ t2.exports = u45;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o70(t5, e29) {
                return (o70 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function i42(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r48, n87 = a43(t5);
                    if (e29) {
                        var o94 = a43(this).constructor;
                        r48 = Reflect.construct(n87, arguments, o94);
                    } else r48 = n87.apply(this, arguments);
                    return s36(this, r48);
                };
            }
            function s36(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function a43(t5) {
                return (a43 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var u45 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && o70(t8, e29);
                })(r48, t5);
                var e29 = i42(r48);
                /*!
   * OverwriteModel Error constructor.
   * @param {String} name
   */ function r48(t8) {
                    return (function(t9, e32) {
                        if (!(t9 instanceof e32)) throw new TypeError("Cannot call a class as a function");
                    })(this, r48), e29.call(this, "Cannot overwrite `" + t8 + "` model once compiled.");
                }
                return r48;
            }(r2(5));
            Object.defineProperty(u45.prototype, "name", {
                value: "OverwriteModelError"
            }), /*!
 * exports
 */ t2.exports = u45;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o70(t5, e29) {
                return (o70 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function i42(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r48, n87 = a43(t5);
                    if (e29) {
                        var o95 = a43(this).constructor;
                        r48 = Reflect.construct(n87, arguments, o95);
                    } else r48 = n87.apply(this, arguments);
                    return s36(this, r48);
                };
            }
            function s36(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function a43(t5) {
                return (a43 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var u45 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && o70(t8, e29);
                })(r48, t5);
                var e29 = i42(r48);
                /*!
   * MissingSchema Error constructor.
   * @param {String} name
   */ function r48(t8) {
                    (function(t9, e32) {
                        if (!(t9 instanceof e32)) throw new TypeError("Cannot call a class as a function");
                    })(this, r48);
                    var n87 = "Schema hasn't been registered for model \"" + t8 + '".\nUse mongoose.model(name, schema)';
                    return e29.call(this, n87);
                }
                return r48;
            }(r2(5));
            Object.defineProperty(u45.prototype, "name", {
                value: "MissingSchemaError"
            }), /*!
 * exports
 */ t2.exports = u45;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o70(t5, e29) {
                return (o70 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function i42(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r48, n87 = a43(t5);
                    if (e29) {
                        var o96 = a43(this).constructor;
                        r48 = Reflect.construct(n87, arguments, o96);
                    } else r48 = n87.apply(this, arguments);
                    return s36(this, r48);
                };
            }
            function s36(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function a43(t5) {
                return (a43 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var u45 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && o70(t8, e29);
                })(r48, t5);
                var e29 = i42(r48);
                /*!
   * DivergentArrayError constructor.
   * @param {Array<String>} paths
   */ function r48(t8) {
                    (function(t9, e32) {
                        if (!(t9 instanceof e32)) throw new TypeError("Cannot call a class as a function");
                    })(this, r48);
                    var n87 = "For your own good, using `document.save()` to update an array which was selected using an $elemMatch projection OR populated using skip, limit, query conditions, or exclusion of the _id field when the operation results in a $pop or $set of the entire array is not supported. The following path(s) would have been modified unsafely:\n  " + t8.join("\n  ") + "\nUse Model.update() to update these arrays instead.";
                    return e29.call(this, n87);
                }
                return r48;
            }(r2(5));
            Object.defineProperty(u45.prototype, "name", {
                value: "DivergentArrayError"
            }), /*!
 * exports
 */ t2.exports = u45;
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(32);
            /*!
 * ignore
 */ t2.exports = function(t5) {
                var e29, r48;
                t5.$immutable ? (t5.$immutableSetter = (e29 = t5.path, r48 = t5.options.immutable, function(t8) {
                    if (null == this || null == this.$__) return t8;
                    if (this.isNew) return t8;
                    if (!("function" == typeof r48 ? r48.call(this, this) : r48)) return t8;
                    var o70 = this.$__getValue(e29);
                    if ("throw" === this.$__.strictMode && t8 !== o70) throw new n64(e29, "Path `" + e29 + "` is immutable and strict mode is set to throw.", true);
                    return o70;
                }), t5.set(t5.$immutableSetter)) : t5.$immutableSetter && (t5.setters = t5.setters.filter(function(e32) {
                    return e32 !== t5.$immutableSetter;
                }), delete t5.$immutableSetter);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o70(t5, e29) {
                return (o70 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function i42(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r48, n87 = a43(t5);
                    if (e29) {
                        var o97 = a43(this).constructor;
                        r48 = Reflect.construct(n87, arguments, o97);
                    } else r48 = n87.apply(this, arguments);
                    return s36(this, r48);
                };
            }
            function s36(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function a43(t5) {
                return (a43 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var u45 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && o70(t8, e29);
                })(r48, t5);
                var e29 = i42(r48);
                function r48(t8, n87, o98) {
                    return (function(t9, e32) {
                        if (!(t9 instanceof e32)) throw new TypeError("Cannot call a class as a function");
                    })(this, r48), e29.call(this, 'Parameter "' + n87 + '" to ' + o98 + "() must be an object, got " + t8.toString());
                }
                return r48;
            }(r2(5));
            Object.defineProperty(u45.prototype, "name", {
                value: "ObjectParameterError"
            }), t2.exports = u45;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o70(t5, e29) {
                return (o70 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function i42(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r48, n87 = a43(t5);
                    if (e29) {
                        var o98 = a43(this).constructor;
                        r48 = Reflect.construct(n87, arguments, o98);
                    } else r48 = n87.apply(this, arguments);
                    return s36(this, r48);
                };
            }
            function s36(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function a43(t5) {
                return (a43 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var u45 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && o70(t8, e29);
                })(r48, t5);
                var e29 = i42(r48);
                function r48(t8) {
                    (function(t9, e32) {
                        if (!(t9 instanceof e32)) throw new TypeError("Cannot call a class as a function");
                    })(this, r48);
                    return e29.call(this, "Can't validate() the same doc multiple times in parallel. Document: " + t8._id);
                }
                return r48;
            }(r2(14));
            Object.defineProperty(u45.prototype, "name", {
                value: "ParallelValidateError"
            }), /*!
 * exports
 */ t2.exports = u45;
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e29) {
                function r48(t5, e32) {
                    var r76 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                    if (!r76) {
                        if (Array.isArray(t5) || (r76 = (function(t8, e40) {
                            if (!t8) return;
                            if ("string" == typeof t8) return n64(t8, e40);
                            var r77 = Object.prototype.toString.call(t8).slice(8, -1);
                            "Object" === r77 && t8.constructor && (r77 = t8.constructor.name);
                            if ("Map" === r77 || "Set" === r77) return Array.from(t8);
                            if ("Arguments" === r77 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r77)) return n64(t8, e40);
                        })(t5)) || e32 && t5 && "number" == typeof t5.length) {
                            r76 && (t5 = r76);
                            var o70 = 0, i42 = function() {
                            };
                            return {
                                s: i42,
                                n: function() {
                                    return o70 >= t5.length ? {
                                        done: true
                                    } : {
                                        done: false,
                                        value: t5[o70++]
                                    };
                                },
                                e: function(t8) {
                                    throw t8;
                                },
                                f: i42
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var s36, a43 = true, u45 = false;
                    return {
                        s: function() {
                            r76 = r76.call(t5);
                        },
                        n: function() {
                            var t8 = r76.next();
                            return a43 = t8.done, t8;
                        },
                        e: function(t8) {
                            u45 = true, s36 = t8;
                        },
                        f: function() {
                            try {
                                a43 || null == r76.return || r76.return();
                            } finally{
                                if (u45) throw s36;
                            }
                        }
                    };
                }
                function n64(t5, e32) {
                    (null == e32 || e32 > t5.length) && (e32 = t5.length);
                    for(var r76 = 0, n87 = new Array(e32); r76 < e32; r76++)n87[r76] = t5[r76];
                    return n87;
                }
                function o99(t5) {
                    return (o99 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                        return typeof t8;
                    } : function(t8) {
                        return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                    })(t5);
                }
                function i43() {
                    this._pres = new Map, this._posts = new Map;
                }
                function s36(t5, e32, r76, n87, o100, i54, s43) {
                    if (i54.useErrorHandlers) {
                        var a43 = {
                            error: e32
                        };
                        return t5.execPost(r76, n87, o100, a43, function(t8) {
                            return "function" == typeof s43 && s43(t8);
                        });
                    }
                    return "function" == typeof s43 ? s43(e32) : void 0;
                }
                function a49(t5, e32, r76) {
                    return t5.has(e32) ? t5.get(e32) : r76;
                }
                function u45(t5, e32, r76, n87) {
                    var o100;
                    try {
                        o100 = t5.apply(e32, r76);
                    } catch (t8) {
                        return n87(t8);
                    }
                    c33(o100) && o100.then(function() {
                        return n87();
                    }, function(t8) {
                        return n87(t8);
                    });
                }
                function c33(t5) {
                    return null != t5 && "function" == typeof t5.then;
                }
                function l31(t5) {
                    var r76 = false, n87 = this;
                    return function() {
                        var o100 = arguments;
                        if (!r76) return r76 = true, e29.nextTick(function() {
                            return t5.apply(n87, o100);
                        });
                    };
                }
                i43.prototype.execPre = function(t5, r76, n87, o100) {
                    3 === arguments.length && (o100 = n87, n87 = []);
                    var i54 = a49(this._pres, t5, []), s43 = i54.length, f25 = i54.numAsync || 0, p23 = 0, h21 = f25, y22 = false, d21 = n87;
                    if (!s43) return e29.nextTick(function() {
                        o100(null);
                    });
                    var _12 = function t8() {
                        if (!(p23 >= s43)) {
                            var n88 = i54[p23];
                            if (n88.isAsync) {
                                var a55 = [
                                    l31(v8),
                                    l31(function(t9) {
                                        if (t9) {
                                            if (y22) return;
                                            return y22 = true, o100(t9);
                                        }
                                        if (0 == --h21 && p23 >= s43) return o100(null);
                                    })
                                ];
                                u45(n88.fn, r76, a55, a55[0]);
                            } else if (n88.fn.length > 0) {
                                a55 = [
                                    l31(v8)
                                ];
                                for(var f30 = arguments.length >= 2 ? arguments : [
                                    null
                                ].concat(d21), _14 = 1; _14 < f30.length; ++_14)a55.push(f30[_14]);
                                u45(n88.fn, r76, a55, a55[0]);
                            } else {
                                var m5 = null;
                                try {
                                    m5 = n88.fn.call(r76);
                                } catch (t9) {
                                    if (null != t9) return o100(t9);
                                }
                                if (c33(m5)) m5.then(function() {
                                    return v8();
                                }, function(t9) {
                                    return v8(t9);
                                });
                                else {
                                    if ((++p23) >= s43) return h21 > 0 ? void 0 : e29.nextTick(function() {
                                        o100(null);
                                    });
                                    t8();
                                }
                            }
                        }
                    };
                    function v8(t9) {
                        if (t9) {
                            if (y22) return;
                            return y22 = true, o100(t9);
                        }
                        if ((++p23) >= s43) return h21 > 0 ? void 0 : o100(null);
                        _12.apply(r76, arguments);
                    }
                    _12.apply(null, [
                        null
                    ].concat(n87));
                }, i43.prototype.execPreSync = function(t5, e32, r76) {
                    for(var n87 = a49(this._pres, t5, []), o100 = n87.length, i54 = 0; i54 < o100; ++i54)n87[i54].fn.apply(e32, r76 || []);
                }, i43.prototype.execPost = function(t5, r76, n87, o100, i54) {
                    arguments.length < 5 && (i54 = o100, o100 = null);
                    var s43 = a49(this._posts, t5, []), f25 = s43.length, p23 = 0, h21 = null;
                    if (o100 && o100.error && (h21 = o100.error), !f25) return e29.nextTick(function() {
                        i54.apply(null, [
                            h21
                        ].concat(n87));
                    });
                    var y22 = function t8() {
                        for(var e32 = s43[p23].fn, o101 = 0, a56 = n87.length, y23 = [], d21 = 0; d21 < a56; ++d21)o101 += n87[d21] && n87[d21]._kareemIgnore ? 0 : 1, n87[d21] && n87[d21]._kareemIgnore || y23.push(n87[d21]);
                        if (h21) {
                            if (e32.length === o101 + 2) {
                                var _12 = l31(function(e40) {
                                    if (e40 && (h21 = e40), (++p23) >= f25) return i54.call(null, h21);
                                    t8();
                                });
                                u45(e32, r76, [
                                    h21
                                ].concat(y23).concat([
                                    _12
                                ]), _12);
                            } else {
                                if ((++p23) >= f25) return i54.call(null, h21);
                                t8();
                            }
                        } else {
                            var v8 = l31(function(e40) {
                                return e40 ? (h21 = e40, t8()) : (++p23) >= f25 ? i54.apply(null, [
                                    null
                                ].concat(n87)) : void t8();
                            });
                            if (e32.length === o101 + 2) return (++p23) >= f25 ? i54.apply(null, [
                                null
                            ].concat(n87)) : t8();
                            if (e32.length === o101 + 1) u45(e32, r76, y23.concat([
                                v8
                            ]), v8);
                            else {
                                var m6, g8;
                                try {
                                    g8 = e32.apply(r76, y23);
                                } catch (t9) {
                                    m6 = t9, h21 = t9;
                                }
                                if (c33(g8)) return g8.then(function() {
                                    return v8();
                                }, function(t9) {
                                    return v8(t9);
                                });
                                if ((++p23) >= f25) return i54.apply(null, [
                                    m6
                                ].concat(n87));
                                t8();
                            }
                        }
                    };
                    y22();
                }, i43.prototype.execPostSync = function(t5, e32, r76) {
                    for(var n87 = a49(this._posts, t5, []), o100 = n87.length, i54 = 0; i54 < o100; ++i54)n87[i54].fn.apply(e32, r76 || []);
                }, i43.prototype.createWrapperSync = function(t5, e32) {
                    var r76 = this;
                    return function() {
                        r76.execPreSync(t5, this, arguments);
                        var n87 = e32.apply(this, arguments);
                        return r76.execPostSync(t5, this, [
                            n87
                        ]), n87;
                    };
                }, i43.prototype.wrap = function(t5, e32, r76, n87, o100) {
                    var i54 = n87.length > 0 ? n87[n87.length - 1] : null, a56 = ("function" == typeof i54 && n87.slice(0, n87.length - 1), this), u61 = (o100 = o100 || {
                    }).checkForPromise;
                    this.execPre(t5, r76, n87, function(c44) {
                        if (c44) {
                            for(var l32 = o100.numCallbackParams || 0, f25 = o100.contextParameter ? [
                                r76
                            ] : [], p23 = f25.length; p23 < l32; ++p23)f25.push(null);
                            return s36(a56, c44, t5, r76, f25, o100, i54);
                        }
                        var h21 = "function" == typeof i54 ? n87.length - 1 : n87.length, y22 = e32.length, d21 = e32.apply(r76, n87.slice(0, h21).concat(_15));
                        if (u61) {
                            if (null != d21 && "function" == typeof d21.then) return d21.then(function(t8) {
                                return _15(null, t8);
                            }, function(t8) {
                                return _15(t8);
                            });
                            if (y22 < h21 + 1) return _15(null, d21);
                        }
                        function _15() {
                            var e40 = Array.prototype.slice.call(arguments, 1);
                            if (o100.nullResultByDefault && 0 === e40.length && e40.push(null), arguments[0]) return s36(a56, arguments[0], t5, r76, e40, o100, i54);
                            a56.execPost(t5, r76, e40, function() {
                                return arguments[0] ? "function" == typeof i54 ? i54(arguments[0]) : void 0 : "function" == typeof i54 ? i54.apply(r76, arguments) : void 0;
                            });
                        }
                    });
                }, i43.prototype.filter = function(t5) {
                    for(var e32 = this, r76 = this.clone(), n87 = Array.from(r76._pres.keys()), o100 = function() {
                        var n89 = s43[i54], o101 = e32._pres.get(n89).map(function(t8) {
                            return Object.assign({
                            }, t8, {
                                name: n89
                            });
                        }).filter(t5);
                        if (0 === o101.length) return r76._pres.delete(n89), "continue";
                        o101.numAsync = o101.filter(function(t8) {
                            return t8.isAsync;
                        }).length, r76._pres.set(n89, o101);
                    }, i54 = 0, s43 = n87; i54 < s43.length; i54++)o100();
                    for(var a56 = Array.from(r76._posts.keys()), u61 = function() {
                        var n89 = l33[c44], o101 = e32._posts.get(n89).map(function(t8) {
                            return Object.assign({
                            }, t8, {
                                name: n89
                            });
                        }).filter(t5);
                        if (0 === o101.length) return r76._posts.delete(n89), "continue";
                        r76._posts.set(n89, o101);
                    }, c44 = 0, l33 = a56; c44 < l33.length; c44++)u61();
                    return r76;
                }, i43.prototype.hasHooks = function(t5) {
                    return this._pres.has(t5) || this._posts.has(t5);
                }, i43.prototype.createWrapper = function(t5, r76, n87, o100) {
                    var i54 = this;
                    return this.hasHooks(t5) ? function() {
                        var e32 = n87 || this, s43 = Array.prototype.slice.call(arguments);
                        i54.wrap(t5, r76, e32, s43, o100);
                    } : function() {
                        var t8 = arguments, n89 = this;
                        e29.nextTick(function() {
                            return r76.apply(n89, t8);
                        });
                    };
                }, i43.prototype.pre = function(t5, e32, r76, n87, i54) {
                    var s43 = {
                    };
                    "object" === o99(e32) && null != e32 ? e32 = (s43 = e32).isAsync : "boolean" != typeof arguments[1] && (n87 = r76, r76 = e32, e32 = false);
                    var u61 = a49(this._pres, t5, []);
                    if (this._pres.set(t5, u61), e32 && (u61.numAsync = u61.numAsync || 0, ++u61.numAsync), "function" != typeof r76) throw new Error('pre() requires a function, got "' + o99(r76) + '"');
                    return i54 ? u61.unshift(Object.assign({
                    }, s43, {
                        fn: r76,
                        isAsync: e32
                    })) : u61.push(Object.assign({
                    }, s43, {
                        fn: r76,
                        isAsync: e32
                    })), this;
                }, i43.prototype.post = function(t5, e32, r76, n87) {
                    var i54 = a49(this._posts, t5, []);
                    if ("function" == typeof e32 && (n87 = !!r76, r76 = e32, e32 = {
                    }), "function" != typeof r76) throw new Error('post() requires a function, got "' + o99(r76) + '"');
                    return n87 ? i54.unshift(Object.assign({
                    }, e32, {
                        fn: r76
                    })) : i54.push(Object.assign({
                    }, e32, {
                        fn: r76
                    })), this._posts.set(t5, i54), this;
                }, i43.prototype.clone = function() {
                    var t5, e32 = new i43, n87 = r48(this._pres.keys());
                    try {
                        for(n87.s(); !(t5 = n87.n()).done;){
                            var o100 = t5.value, s43 = this._pres.get(o100).slice();
                            s43.numAsync = this._pres.get(o100).numAsync, e32._pres.set(o100, s43);
                        }
                    } catch (t8) {
                        n87.e(t8);
                    } finally{
                        n87.f();
                    }
                    var a56, u61 = r48(this._posts.keys());
                    try {
                        for(u61.s(); !(a56 = u61.n()).done;){
                            var c44 = a56.value;
                            e32._posts.set(c44, this._posts.get(c44).slice());
                        }
                    } catch (t8) {
                        u61.e(t8);
                    } finally{
                        u61.f();
                    }
                    return e32;
                }, i43.prototype.merge = function(t5, e32) {
                    var n87, o101 = (e32 = 1 === arguments.length || e32) ? this.clone() : this, i54 = r48(t5._pres.keys());
                    try {
                        var s58 = function() {
                            var e40 = n87.value, r76 = a49(o101._pres, e40, []), i63 = t5._pres.get(e40).filter(function(t8) {
                                return -1 === r76.map(function(t9) {
                                    return t9.fn;
                                }).indexOf(t8.fn);
                            }), s59 = r76.concat(i63);
                            s59.numAsync = r76.numAsync || 0, s59.numAsync += i63.filter(function(t8) {
                                return t8.isAsync;
                            }).length, o101._pres.set(e40, s59);
                        };
                        for(i54.s(); !(n87 = i54.n()).done;)s58();
                    } catch (t8) {
                        i54.e(t8);
                    } finally{
                        i54.f();
                    }
                    var u61, c45 = r48(t5._posts.keys());
                    try {
                        var l33 = function() {
                            var e40 = u61.value, r76 = a49(o101._posts, e40, []), n89 = t5._posts.get(e40).filter(function(t8) {
                                return -1 === r76.indexOf(t8);
                            });
                            o101._posts.set(e40, r76.concat(n89));
                        };
                        for(c45.s(); !(u61 = c45.n()).done;)l33();
                    } catch (t8) {
                        c45.e(t8);
                    } finally{
                        c45.f();
                    }
                    return o101;
                }, t2.exports = i43;
            }).call(this, r2(7));
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(10), o99 = function t5(e29) {
                (function(t8, e32) {
                    if (!(t8 instanceof e32)) throw new TypeError("Cannot call a class as a function");
                })(this, t5), Object.assign(this, e29), null != e29 && null != e29.options && (this.options = Object.assign({
                }, e29.options));
            };
            Object.defineProperty(o99.prototype, "ref", n64), Object.defineProperty(o99.prototype, "refPath", n64), Object.defineProperty(o99.prototype, "localField", n64), Object.defineProperty(o99.prototype, "foreignField", n64), Object.defineProperty(o99.prototype, "justOne", n64), Object.defineProperty(o99.prototype, "count", n64), Object.defineProperty(o99.prototype, "match", n64), Object.defineProperty(o99.prototype, "options", n64), Object.defineProperty(o99.prototype, "skip", n64), Object.defineProperty(o99.prototype, "limit", n64), Object.defineProperty(o99.prototype, "perDocumentLimit", n64), t2.exports = o99;
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(3), o99 = r2(21);
            /*!
 * Gather all indexes defined in the schema, including single nested,
 * document arrays, and embedded discriminators.
 */ t2.exports = function(t5) {
                var e29 = [], r48 = new WeakMap, i43 = t5.constructor.indexTypes, s36 = new Map;
                return (function t8(a49, u45, c33) {
                    if (r48.has(a49)) return;
                    r48.set(a49, true), u45 = u45 || "";
                    for(var l31 = Object.keys(a49.paths), f31 = 0, p27 = l31; f31 < p27.length; f31++){
                        var h21 = p27[f31], y22 = a49.paths[h21];
                        if (null == c33 || !c33.paths[h21]) {
                            if (y22.$isMongooseDocumentArray || y22.$isSingleNested) {
                                if (true !== n64(y22, "options.excludeIndexes") && true !== n64(y22, "schemaOptions.excludeIndexes") && true !== n64(y22, "schema.options.excludeIndexes") && t8(y22.schema, u45 + h21 + "."), null != y22.schema.discriminators) for(var d21 = y22.schema.discriminators, _15 = Object.keys(d21), v10 = 0, m7 = _15; v10 < m7.length; v10++){
                                    var g9 = m7[v10];
                                    t8(d21[g9], u45 + h21 + ".", y22.schema);
                                }
                                if (y22.$isMongooseDocumentArray) continue;
                            }
                            var b7 = y22._index || y22.caster && y22.caster._index;
                            if (false !== b7 && null != b7) {
                                var w7 = {
                                }, O7 = o99(b7), S6 = O7 ? b7 : {
                                }, A3 = "string" == typeof b7 ? b7 : !!O7 && b7.type;
                                if (A3 && -1 !== i43.indexOf(A3)) w7[u45 + h21] = A3;
                                else if (S6.text) w7[u45 + h21] = "text", delete S6.text;
                                else {
                                    var $3 = -1 === Number(b7);
                                    w7[u45 + h21] = $3 ? -1 : 1;
                                }
                                delete S6.type, "background" in S6 || (S6.background = true), null != a49.options.autoIndex && (S6._autoIndex = a49.options.autoIndex);
                                var E4 = S6 && S6.name;
                                "string" == typeof E4 && s36.has(E4) ? Object.assign(s36.get(E4), w7) : (e29.push([
                                    w7,
                                    S6
                                ]), s36.set(E4, w7));
                            }
                        }
                    }
                    r48.delete(a49), u45 ? /*!
   * Checks for indexes added to subdocs using Schema.index().
   * These indexes need their paths prefixed properly.
   *
   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]
   */ (function(t9, r76) {
                        for(var n87 = t9._indexes, o101 = n87.length, i54 = 0; i54 < o101; ++i54){
                            for(var s58 = n87[i54][0], a56 = n87[i54][1], u61 = Object.keys(s58), c45 = u61.length, l33 = {
                            }, f32 = 0; f32 < c45; ++f32){
                                var p28 = u61[f32];
                                l33[r76 + p28] = s58[p28];
                            }
                            var h23 = Object.assign({
                            }, a56);
                            if (null != a56 && null != a56.partialFilterExpression) {
                                h23.partialFilterExpression = {
                                };
                                for(var y23 = a56.partialFilterExpression, d22 = 0, _16 = Object.keys(y23); d22 < _16.length; d22++){
                                    var v11 = _16[d22];
                                    h23.partialFilterExpression[r76 + v11] = y23[v11];
                                }
                            }
                            e29.push([
                                l33,
                                h23
                            ]);
                        }
                    })(a49, u45) : (a49._indexes.forEach(function(t9) {
                        "background" in t9[1] || (t9[1].background = true);
                    }), e29 = e29.concat(a49._indexes));
                })(t5), e29;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(143), o99 = r2(145), i43 = r2(3), s36 = r2(76), a49 = r2(33);
            t2.exports = function(t5, e29) {
                var r48 = t5.childSchemas.find(function(t8) {
                    return !!t8.schema.options.timestamps;
                });
                if (e29 || r48) {
                    var u45 = s36(e29, "createdAt"), c33 = s36(e29, "updatedAt"), l31 = null != e29 && e29.hasOwnProperty("currentTime") ? e29.currentTime : null, f31 = {
                    };
                    t5.$timestamps = {
                        createdAt: u45,
                        updatedAt: c33
                    }, c33 && !t5.paths[c33] && (f31[c33] = Date), u45 && !t5.paths[u45] && (f31[u45] = Date), t5.add(f31), t5.pre("save", function(t8) {
                        var e32 = i43(this, "$__.saveOptions.timestamps");
                        if (false === e32) return t8();
                        var r76 = null != e32 && false === e32.updatedAt, n87 = null != e32 && false === e32.createdAt, o101 = null != l31 ? l31() : (this.ownerDocument ? this.ownerDocument() : this).constructor.base.now(), s59 = this._id && this._id.auto;
                        if (!n87 && u45 && !this.get(u45) && this.$__isSelected(u45) && this.$set(u45, s59 ? this._id.getTimestamp() : o101), !r76 && c33 && (this.isNew || this.isModified())) {
                            var a57 = o101;
                            this.isNew && (null != u45 ? a57 = this.$__getValue(u45) : s59 && (a57 = this._id.getTimestamp())), this.$set(c33, a57);
                        }
                        t8();
                    }), t5.methods.initializeTimestamps = function() {
                        var t8 = null != l31 ? l31() : this.constructor.base.now();
                        return u45 && !this.get(u45) && this.$set(u45, t8), c33 && !this.get(c33) && this.$set(c33, t8), this;
                    }, h24[a49.builtInMiddleware] = true;
                    var p27 = {
                        query: true,
                        model: false
                    };
                    t5.pre("findOneAndReplace", p27, h24), t5.pre("findOneAndUpdate", p27, h24), t5.pre("replaceOne", p27, h24), t5.pre("update", p27, h24), t5.pre("updateOne", p27, h24), t5.pre("updateMany", p27, h24);
                }
                function h24(t8) {
                    var e32 = null != l31 ? l31() : this.model.base.now();
                    "findOneAndReplace" === this.op && null == this.getUpdate() && this.setUpdate({
                    }), o99(e32, u45, c33, this.getUpdate(), this.options, this.schema), n64(e32, this.getUpdate(), this.model.schema), t8();
                }
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5, e29) {
                var r48 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                if (!r48) {
                    if (Array.isArray(t5) || (r48 = (function(t8, e32) {
                        if (!t8) return;
                        if ("string" == typeof t8) return o99(t8, e32);
                        var r76 = Object.prototype.toString.call(t8).slice(8, -1);
                        "Object" === r76 && t8.constructor && (r76 = t8.constructor.name);
                        if ("Map" === r76 || "Set" === r76) return Array.from(t8);
                        if ("Arguments" === r76 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r76)) return o99(t8, e32);
                    })(t5)) || e29 && t5 && "number" == typeof t5.length) {
                        r48 && (t5 = r48);
                        var n87 = 0, i43 = function() {
                        };
                        return {
                            s: i43,
                            n: function() {
                                return n87 >= t5.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t5[n87++]
                                };
                            },
                            e: function(t8) {
                                throw t8;
                            },
                            f: i43
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s36, a49 = true, u63 = false;
                return {
                    s: function() {
                        r48 = r48.call(t5);
                    },
                    n: function() {
                        var t8 = r48.next();
                        return a49 = t8.done, t8;
                    },
                    e: function(t8) {
                        u63 = true, s36 = t8;
                    },
                    f: function() {
                        try {
                            a49 || null == r48.return || r48.return();
                        } finally{
                            if (u63) throw s36;
                        }
                    }
                };
            }
            function o99(t5, e29) {
                (null == e29 || e29 > t5.length) && (e29 = t5.length);
                for(var r48 = 0, n89 = new Array(e29); r48 < e29; r48++)n89[r48] = t5[r48];
                return n89;
            }
            var i54 = r2(144), s36 = r2(76);
            /*!
 * ignore
 */ function a49(t5, e29, r48) {
                if (null != e29) {
                    if (Object.keys(e29).some(function(t8) {
                        return t8.startsWith("$");
                    })) {
                        if (e29.$push) for(var o101 = 0, i63 = Object.keys(e29.$push); o101 < i63.length; o101++){
                            var a58 = i63[o101], c46 = r48.path(a58);
                            e29.$push[a58] && c46 && c46.$isMongooseDocumentArray && c46.schema.options.timestamps && (function() {
                                var r76 = c46.schema.options.timestamps, n89 = s36(r76, "createdAt"), o102 = s36(r76, "updatedAt");
                                e29.$push[a58].$each ? e29.$push[a58].$each.forEach(function(e32) {
                                    null != o102 && (e32[o102] = t5), null != n89 && (e32[n89] = t5);
                                }) : (null != o102 && (e29.$push[a58][o102] = t5), null != n89 && (e29.$push[a58][n89] = t5));
                            })();
                        }
                        if (null != e29.$set) for(var l34 = 0, f33 = Object.keys(e29.$set); l34 < f33.length; l34++)u63(r48, f33[l34], e29.$set, t5);
                    }
                    var p29, h24 = n64(Object.keys(e29).filter(function(t8) {
                        return !t8.startsWith("$");
                    }));
                    try {
                        for(h24.s(); !(p29 = h24.n()).done;)u63(r48, p29.value, e29, t5);
                    } catch (t8) {
                        h24.e(t8);
                    } finally{
                        h24.f();
                    }
                }
            }
            function u63(t5, e29, r48, o102) {
                var u64 = i54(e29), c47 = t5.path(u64);
                if (c47) {
                    for(var l35 = [], f34 = u64.split("."), p30 = f34.length - 1; p30 > 0; --p30){
                        var h25 = t5.path(f34.slice(0, p30).join("."));
                        null != h25 && (h25.$isMongooseDocumentArray || h25.$isSingleNested) && l35.push({
                            parentPath: e29.split(".").slice(0, p30).join("."),
                            parentSchemaType: h25
                        });
                    }
                    if (Array.isArray(r48[e29]) && c47.$isMongooseDocumentArray) (function(t8, e32, r76) {
                        var n89 = e32.schema.options.timestamps;
                        if (n89) for(var o103 = t8.length, i64 = s36(n89, "createdAt"), u65 = s36(n89, "updatedAt"), c48 = 0; c48 < o103; ++c48)null != u65 && (t8[c48][u65] = r76), null != i64 && (t8[c48][i64] = r76), a49(r76, t8[c48], e32.schema);
                    })(r48[e29], c47, o102);
                    else if (r48[e29] && c47.$isSingleNested) (function(t8, e32, r76) {
                        var n89 = e32.schema.options.timestamps;
                        if (n89) {
                            var o103 = s36(n89, "createdAt"), i64 = s36(n89, "updatedAt");
                            null != i64 && (t8[i64] = r76), null != o103 && (t8[o103] = r76), a49(r76, t8, e32.schema);
                        }
                    })(r48[e29], c47, o102);
                    else if (l35.length > 0) {
                        var y24, d23 = n64(l35);
                        try {
                            for(d23.s(); !(y24 = d23.n()).done;){
                                var _17 = y24.value, v12 = _17.parentPath, m8 = _17.parentSchemaType, g10 = m8.schema.options.timestamps, b8 = s36(g10, "updatedAt");
                                if (g10 && null != b8) {
                                    if (m8.$isSingleNested) r48[v12 + "." + b8] = o102;
                                    else if (m8.$isMongooseDocumentArray) {
                                        var w8 = e29.substr(v12.length + 1);
                                        if (/^\d+$/.test(w8)) {
                                            r48[v12 + "." + w8][b8] = o102;
                                            continue;
                                        }
                                        var O8 = w8.indexOf(".");
                                        r48[v12 + "." + (w8 = -1 !== O8 ? w8.substr(0, O8) : w8) + "." + b8] = o102;
                                    }
                                }
                            }
                        } catch (t8) {
                            d23.e(t8);
                        } finally{
                            d23.f();
                        }
                    } else if (null != c47.schema && c47.schema != t5 && r48[e29]) {
                        var S7 = c47.schema.options.timestamps, A4 = s36(S7, "createdAt"), $4 = s36(S7, "updatedAt");
                        if (!S7) return;
                        null != $4 && (r48[e29][$4] = o102), null != A4 && (r48[e29][A4] = o102);
                    }
                }
            }
            t2.exports = a49;
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = function(t5) {
                return t5.replace(/\.\$(\[[^\]]*\])?(?=\.)/g, ".0").replace(/\.\$(\[[^\]]*\])?$/g, ".0");
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ var n64 = r2(3);
            t2.exports = /*!
 * ignore
 */ function(t5, e29, r48, o99, i54) {
                var s36 = o99, a49 = s36, u63 = n64(i54, "overwrite", false), c47 = n64(i54, "timestamps", true);
                if (!c47 || null == s36) return o99;
                var l36 = null != c47 && false === c47.createdAt, f35 = null != c47 && false === c47.updatedAt;
                if (u63) return o99 && o99.$set && (o99 = o99.$set, s36.$set = {
                }, a49 = s36.$set), f35 || !r48 || o99[r48] || (a49[r48] = t5), l36 || !e29 || o99[e29] || (a49[e29] = t5), s36;
                if (o99 = o99 || {
                }, Array.isArray(s36)) return s36.push({
                    $set: {
                        updatedAt: t5
                    }
                }), s36;
                if (s36.$set = s36.$set || {
                }, !f35 && r48 && (!o99.$currentDate || !o99.$currentDate[r48])) {
                    var p31 = false;
                    if (-1 !== r48.indexOf(".")) for(var h26 = r48.split("."), y25 = 1; y25 < h26.length; ++y25){
                        var d24 = h26.slice(-y25).join("."), _18 = h26.slice(0, -y25).join(".");
                        if (null != o99[_18]) {
                            o99[_18][d24] = t5, p31 = true;
                            break;
                        }
                        if (o99.$set && o99.$set[_18]) {
                            o99.$set[_18][d24] = t5, p31 = true;
                            break;
                        }
                    }
                    p31 || (s36.$set[r48] = t5), s36.hasOwnProperty(r48) && delete s36[r48];
                }
                if (!l36 && e29) {
                    o99[e29] && delete o99[e29], o99.$set && o99.$set[e29] && delete o99.$set[e29];
                    var v13 = false;
                    if (-1 !== e29.indexOf(".")) for(var m9 = e29.split("."), g11 = 1; g11 < m9.length; ++g11){
                        var b9 = m9.slice(-g11).join("."), w9 = m9.slice(0, -g11).join(".");
                        if (null != o99[w9]) {
                            o99[w9][b9] = t5, v13 = true;
                            break;
                        }
                        if (o99.$set && o99.$set[w9]) {
                            o99.$set[w9][b9] = t5, v13 = true;
                            break;
                        }
                    }
                    v13 || (s36.$setOnInsert = s36.$setOnInsert || {
                    }, s36.$setOnInsert[e29] = t5);
                }
                0 === Object.keys(s36.$set).length && delete s36.$set;
                return s36;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(14), o99 = r2(4);
            t2.exports = function(t5, e29) {
                if ("string" == typeof t5) return;
                if ("function" == typeof t5) return;
                throw new n64('Invalid ref at path "' + e29 + '". Got ' + o99.inspect(t5, {
                    depth: 0
                }));
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ /*!
 * Apply query middleware
 *
 * @param {Query} query constructor
 * @param {Model} model
 */ function n64(t5, e29) {
                var r48 = {
                    useErrorHandlers: true,
                    numCallbackParams: 1,
                    nullResultByDefault: true
                }, o99 = e29.hooks.filter(function(t8) {
                    var e32 = function(t9) {
                        var e40 = {
                        };
                        t9.hasOwnProperty("query") && (e40.query = t9.query);
                        t9.hasOwnProperty("document") && (e40.document = t9.document);
                        return e40;
                    }(t8);
                    return "updateOne" === t8.name ? null == e32.query || !!e32.query : "deleteOne" === t8.name ? !!e32.query || 0 === Object.keys(e32).length : "validate" === t8.name || "remove" === t8.name ? !!e32.query : null == t8.query && null == t8.document || !!t8.query;
                });
                t5.prototype._execUpdate = o99.createWrapper("update", t5.prototype._execUpdate, null, r48), t5.prototype.__distinct = o99.createWrapper("distinct", t5.prototype.__distinct, null, r48), t5.prototype.validate = o99.createWrapper("validate", t5.prototype.validate, null, r48), n64.middlewareFunctions.filter(function(t8) {
                    return "update" !== t8 && "distinct" !== t8 && "validate" !== t8;
                }).forEach(function(e32) {
                    t5.prototype["_".concat(e32)] = o99.createWrapper(e32, t5.prototype["_".concat(e32)], null, r48);
                });
            }
            t2.exports = n64, /*!
 * ignore
 */ n64.middlewareFunctions = [
                "count",
                "countDocuments",
                "deleteMany",
                "deleteOne",
                "distinct",
                "estimatedDocumentCount",
                "find",
                "findOne",
                "findOneAndDelete",
                "findOneAndRemove",
                "findOneAndReplace",
                "findOneAndUpdate",
                "remove",
                "replaceOne",
                "update",
                "updateMany",
                "updateOne",
                "validate"
            ];
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5, e29) {
                var r48 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                if (!r48) {
                    if (Array.isArray(t5) || (r48 = (function(t8, e32) {
                        if (!t8) return;
                        if ("string" == typeof t8) return o99(t8, e32);
                        var r76 = Object.prototype.toString.call(t8).slice(8, -1);
                        "Object" === r76 && t8.constructor && (r76 = t8.constructor.name);
                        if ("Map" === r76 || "Set" === r76) return Array.from(t8);
                        if ("Arguments" === r76 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r76)) return o99(t8, e32);
                    })(t5)) || e29 && t5 && "number" == typeof t5.length) {
                        r48 && (t5 = r48);
                        var n89 = 0, i54 = function() {
                        };
                        return {
                            s: i54,
                            n: function() {
                                return n89 >= t5.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t5[n89++]
                                };
                            },
                            e: function(t8) {
                                throw t8;
                            },
                            f: i54
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s36, a49 = true, u63 = false;
                return {
                    s: function() {
                        r48 = r48.call(t5);
                    },
                    n: function() {
                        var t8 = r48.next();
                        return a49 = t8.done, t8;
                    },
                    e: function(t8) {
                        u63 = true, s36 = t8;
                    },
                    f: function() {
                        try {
                            a49 || null == r48.return || r48.return();
                        } finally{
                            if (u63) throw s36;
                        }
                    }
                };
            }
            function o99(t5, e29) {
                (null == e29 || e29 > t5.length) && (e29 = t5.length);
                for(var r48 = 0, n90 = new Array(e29); r48 < e29; r48++)n90[r48] = t5[r48];
                return n90;
            }
            var i65 = r2(6), s36 = r2(5), a49 = r2(149), u63 = r2(78), c47 = r2(1), l36 = i65.CastError;
            function f35(t5, e29) {
                this.enumValues = [], this.regExp = null, i65.call(this, t5, e29, "String");
            }
            /*!
 * ignore
 */ function p32(t5) {
                return this.castForQuery(t5);
            }
            f35.schemaName = "String", f35.defaultOptions = {
            }, /*!
 * Inherits from SchemaType.
 */ f35.prototype = Object.create(i65.prototype), f35.prototype.constructor = f35, Object.defineProperty(f35.prototype, "OptionsConstructor", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: a49
            }), /*!
 * ignore
 */ f35._cast = u63, f35.cast = function(t5) {
                return 0 === arguments.length || (false === t5 && (t5 = this._defaultCaster), this._cast = t5), this._cast;
            }, /*!
 * ignore
 */ f35._defaultCaster = function(t5) {
                if (null != t5 && "string" != typeof t5) throw new Error;
                return t5;
            }, f35.get = i65.get, f35.set = i65.set, /*!
 * ignore
 */ f35._checkRequired = function(t5) {
                return (t5 instanceof String || "string" == typeof t5) && t5.length;
            }, f35.checkRequired = i65.checkRequired, f35.prototype.enum = function() {
                if (this.enumValidator && (this.validators = this.validators.filter(function(t5) {
                    return t5.validator !== this.enumValidator;
                }, this), this.enumValidator = false), (void 0) === arguments[0] || false === arguments[0]) return this;
                var t5, e29;
                c47.isObject(arguments[0]) ? Array.isArray(arguments[0].values) ? (t5 = arguments[0].values, e29 = arguments[0].message) : (t5 = c47.object.vals(arguments[0]), e29 = s36.messages.String.enum) : (t5 = arguments, e29 = s36.messages.String.enum);
                var r48, o102 = n64(t5);
                try {
                    for(o102.s(); !(r48 = o102.n()).done;){
                        var i66 = r48.value;
                        (void 0) !== i66 && this.enumValues.push(this.cast(i66));
                    }
                } catch (t8) {
                    o102.e(t8);
                } finally{
                    o102.f();
                }
                var a59 = this.enumValues;
                return this.enumValidator = function(t8) {
                    return (void 0) === t8 || ~a59.indexOf(t8);
                }, this.validators.push({
                    validator: this.enumValidator,
                    message: e29,
                    type: "enum",
                    enumValues: a59
                }), this;
            }, f35.prototype.lowercase = function(t5) {
                return arguments.length > 0 && !t5 ? this : this.set(function(t8, e29) {
                    return "string" != typeof t8 && (t8 = e29.cast(t8)), t8 ? t8.toLowerCase() : t8;
                });
            }, f35.prototype.uppercase = function(t5) {
                return arguments.length > 0 && !t5 ? this : this.set(function(t8, e29) {
                    return "string" != typeof t8 && (t8 = e29.cast(t8)), t8 ? t8.toUpperCase() : t8;
                });
            }, f35.prototype.trim = function(t5) {
                return arguments.length > 0 && !t5 ? this : this.set(function(t8, e29) {
                    return "string" != typeof t8 && (t8 = e29.cast(t8)), t8 ? t8.trim() : t8;
                });
            }, f35.prototype.minlength = function(t5, e29) {
                if (this.minlengthValidator && (this.validators = this.validators.filter(function(t8) {
                    return t8.validator !== this.minlengthValidator;
                }, this)), null != t5) {
                    var r48 = e29 || s36.messages.String.minlength;
                    r48 = r48.replace(/{MINLENGTH}/, t5), this.validators.push({
                        validator: this.minlengthValidator = function(e32) {
                            return null === e32 || e32.length >= t5;
                        },
                        message: r48,
                        type: "minlength",
                        minlength: t5
                    });
                }
                return this;
            }, f35.prototype.minLength = f35.prototype.minlength, f35.prototype.maxlength = function(t5, e29) {
                if (this.maxlengthValidator && (this.validators = this.validators.filter(function(t8) {
                    return t8.validator !== this.maxlengthValidator;
                }, this)), null != t5) {
                    var r76 = e29 || s36.messages.String.maxlength;
                    r76 = r76.replace(/{MAXLENGTH}/, t5), this.validators.push({
                        validator: this.maxlengthValidator = function(e32) {
                            return null === e32 || e32.length <= t5;
                        },
                        message: r76,
                        type: "maxlength",
                        maxlength: t5
                    });
                }
                return this;
            }, f35.prototype.maxLength = f35.prototype.maxlength, f35.prototype.match = function(t5, e29) {
                var r77 = e29 || s36.messages.String.match;
                return this.validators.push({
                    validator: function(e32) {
                        return !!t5 && (t5.lastIndex = 0, null == e32 || "" === e32 || t5.test(e32));
                    },
                    message: r77,
                    type: "regexp",
                    regexp: t5
                }), this;
            }, f35.prototype.checkRequired = function(t5, e29) {
                return i65._isRef(this, t5, e29, true) ? !!t5 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : f35.checkRequired())(t5);
            }, f35.prototype.cast = function(t5, e29, r77) {
                if (i65._isRef(this, t5, e29, r77)) return "string" == typeof t5 ? t5 : this._castRef(t5, e29, r77);
                var n90;
                n90 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : f35.cast();
                try {
                    return n90(t5);
                } catch (e32) {
                    throw new l36("string", t5, this.path, null, this);
                }
            };
            var h27 = c47.options(i65.prototype.$conditionalHandlers, {
                $all: function(t5) {
                    var e29 = this;
                    return Array.isArray(t5) ? t5.map(function(t8) {
                        return e29.castForQuery(t8);
                    }) : [
                        this.castForQuery(t5)
                    ];
                },
                $gt: p32,
                $gte: p32,
                $lt: p32,
                $lte: p32,
                $options: String,
                $regex: p32,
                $not: p32
            });
            Object.defineProperty(f35.prototype, "$conditionalHandlers", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: Object.freeze(h27)
            }), f35.prototype.castForQuery = function(t5, e29) {
                var r77;
                if (2 === arguments.length) {
                    if (!(r77 = this.$conditionalHandlers[t5])) throw new Error("Can't use " + t5 + " with String.");
                    return r77.call(this, e29);
                }
                return e29 = t5, "[object RegExp]" === Object.prototype.toString.call(e29) ? e29 : this._castForQuery(e29);
            }, /*!
 * Module exports.
 */ t2.exports = f35;
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o99(t5, e29) {
                if (!(t5 instanceof e29)) throw new TypeError("Cannot call a class as a function");
            }
            function i65(t5, e29) {
                return (i65 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function s36(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r77, n90 = u63(t5);
                    if (e29) {
                        var o102 = u63(this).constructor;
                        r77 = Reflect.construct(n90, arguments, o102);
                    } else r77 = n90.apply(this, arguments);
                    return a49(this, r77);
                };
            }
            function a49(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function u63(t5) {
                return (u63 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var c47 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && i65(t8, e29);
                })(r77, t5);
                var e29 = s36(r77);
                function r77() {
                    return o99(this, r77), e29.apply(this, arguments);
                }
                return r77;
            }(r2(9)), l36 = r2(10);
            Object.defineProperty(c47.prototype, "enum", l36), Object.defineProperty(c47.prototype, "match", l36), Object.defineProperty(c47.prototype, "lowercase", l36), Object.defineProperty(c47.prototype, "trim", l36), Object.defineProperty(c47.prototype, "uppercase", l36), Object.defineProperty(c47.prototype, "minLength", l36), Object.defineProperty(c47.prototype, "minlength", l36), Object.defineProperty(c47.prototype, "maxLength", l36), Object.defineProperty(c47.prototype, "maxlength", l36), Object.defineProperty(c47.prototype, "populate", l36), /*!
 * ignore
 */ t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o99(t5, e29) {
                if (!(t5 instanceof e29)) throw new TypeError("Cannot call a class as a function");
            }
            function i65(t5, e29) {
                return (i65 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function s36(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r77, n90 = u63(t5);
                    if (e29) {
                        var o104 = u63(this).constructor;
                        r77 = Reflect.construct(n90, arguments, o104);
                    } else r77 = n90.apply(this, arguments);
                    return a49(this, r77);
                };
            }
            function a49(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function u63(t5) {
                return (u63 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var c47 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && i65(t8, e29);
                })(r77, t5);
                var e29 = s36(r77);
                function r77() {
                    return o99(this, r77), e29.apply(this, arguments);
                }
                return r77;
            }(r2(9)), l36 = r2(10);
            Object.defineProperty(c47.prototype, "min", l36), Object.defineProperty(c47.prototype, "max", l36), Object.defineProperty(c47.prototype, "enum", l36), Object.defineProperty(c47.prototype, "populate", l36), /*!
 * ignore
 */ t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(22);
            /*!
 * Given a value, cast it to a number, or throw a `CastError` if the value
 * cannot be casted. `null` and `undefined` are considered valid.
 *
 * @param {Any} value
 * @param {String} [path] optional the path to set on the CastError
 * @return {Boolean|null|undefined}
 * @throws {Error} if `value` is not one of the allowed values
 * @api private
 */ t2.exports = function(t5) {
                return null == t5 ? t5 : "" === t5 ? null : ("string" != typeof t5 && "boolean" != typeof t5 || (t5 = Number(t5)), n64.ok(!isNaN(t5)), t5 instanceof Number ? t5.valueOf() : "number" == typeof t5 ? t5 : Array.isArray(t5) || "function" != typeof t5.valueOf ? t5.toString && !Array.isArray(t5) && t5.toString() == Number(t5) ? Number(t5) : void n64.ok(false) : Number(t5.valueOf()));
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n64 = r2(13), o99 = r2(6), i65 = r2(51), s36 = r2(1);
            function a49(t5, e29) {
                o99.call(this, t5, e29, "Boolean");
            }
            a49.schemaName = "Boolean", a49.defaultOptions = {
            }, /*!
 * Inherits from SchemaType.
 */ a49.prototype = Object.create(o99.prototype), a49.prototype.constructor = a49, /*!
 * ignore
 */ a49._cast = i65, a49.set = o99.set, a49.cast = function(t5) {
                return 0 === arguments.length || (false === t5 && (t5 = this._defaultCaster), this._cast = t5), this._cast;
            }, /*!
 * ignore
 */ a49._defaultCaster = function(t5) {
                if (null != t5 && "boolean" != typeof t5) throw new Error;
                return t5;
            }, /*!
 * ignore
 */ a49._checkRequired = function(t5) {
                return true === t5 || false === t5;
            }, a49.checkRequired = o99.checkRequired, a49.prototype.checkRequired = function(t5) {
                return this.constructor._checkRequired(t5);
            }, Object.defineProperty(a49, "convertToTrue", {
                get: function() {
                    return i65.convertToTrue;
                },
                set: function(t5) {
                    i65.convertToTrue = t5;
                }
            }), Object.defineProperty(a49, "convertToFalse", {
                get: function() {
                    return i65.convertToFalse;
                },
                set: function(t5) {
                    i65.convertToFalse = t5;
                }
            }), a49.prototype.cast = function(t5) {
                var e29;
                e29 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : a49.cast();
                try {
                    return e29(t5);
                } catch (e32) {
                    throw new n64("Boolean", t5, this.path, e32, this);
                }
            }, a49.$conditionalHandlers = s36.options(o99.prototype.$conditionalHandlers, {
            }), a49.prototype.castForQuery = function(t5, e29) {
                var r77;
                return 2 === arguments.length ? (r77 = a49.$conditionalHandlers[t5]) ? r77.call(this, e29) : this._castForQuery(e29) : this._castForQuery(t5);
            }, a49.prototype._castNullish = function(t5) {
                if ((void 0) === t5 && null != this.$$context && null != this.$$context._mongooseOptions && this.$$context._mongooseOptions.omitUndefined) return t5;
                var e29 = "function" == typeof this.constructor.cast ? this.constructor.cast() : a49.cast();
                return null == e29 ? t5 : !(e29.convertToFalse instanceof Set && e29.convertToFalse.has(t5)) && (!!(e29.convertToTrue instanceof Set && e29.convertToTrue.has(t5)) || t5);
            }, /*!
 * Module exports.
 */ t2.exports = a49;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n64, o99, i65 = r2(56), s36 = r2(13), a49 = r2(19).EventEmitter, u63 = r2(159), c47 = r2(6), l36 = r2(31), f35 = r2(92), p32 = r2(3), h27 = r2(93), y26 = r2(4), d25 = r2(1), _19 = r2(94), v14 = r2(0).arrayAtomicsSymbol, m10 = r2(0).arrayPathSymbol, g12 = r2(0).documentArrayParent;
            function b10(t5, e29, r77, n90) {
                null != n90 && null != n90._id ? e29 = h27(e29, n90) : null != r77 && null != r77._id && (e29 = h27(e29, r77));
                var o105 = w10(e29, r77);
                o105.prototype.$basePath = t5, i65.call(this, t5, o105, r77), this.schema = e29, this.schemaOptions = n90 || {
                }, this.$isMongooseDocumentArray = true, this.Constructor = o105, o105.base = e29.base;
                var s59 = this.defaultValue;
                "defaultValue" in this && (void 0) === s59 || this.default(function() {
                    var t8 = s59.call(this);
                    return Array.isArray(t8) || (t8 = [
                        t8
                    ]), t8;
                });
                var a59 = this;
                this.$embeddedSchemaType = new c47(t5 + ".$", {
                    required: p32(this, "schemaOptions.required", false)
                }), this.$embeddedSchemaType.cast = function(t8, e32, r78) {
                    return a59.cast(t8, e32, r78)[0];
                }, this.$embeddedSchemaType.$isMongooseDocumentArrayElement = true, this.$embeddedSchemaType.caster = this.Constructor, this.$embeddedSchemaType.schema = this.schema;
            }
            /*!
 * Ignore
 */ function w10(t5, e29, n90) {
                function i67() {
                    o99.apply(this, arguments), this.$session(this.ownerDocument().$session());
                }
                o99 || (o99 = r2(26));
                var s59 = null != n90 ? n90.prototype : o99.prototype;
                for(var u64 in i67.prototype = Object.create(s59), i67.prototype.$__setSchema(t5), i67.schema = t5, i67.prototype.constructor = i67, i67.$isArraySubdocument = true, i67.events = new a49, t5.methods)i67.prototype[u64] = t5.methods[u64];
                for(var c48 in t5.statics)i67[c48] = t5.statics[c48];
                for(var l37 in a49.prototype)i67[l37] = a49.prototype[l37];
                return i67.options = e29, i67;
            }
            /*!
 * Scopes paths selected in a query to this array.
 * Necessary for proper default application of subdocument values.
 *
 * @param {DocumentArrayPath} array - the array to scope `fields` paths
 * @param {Object|undefined} fields - the root fields selected in the query
 * @param {Boolean|undefined} init - if we are being created part of a query result
 */ function O9(t5, e29, r77) {
                if (r77 && e29) {
                    for(var n90, o105, i67, s59 = t5.path + ".", a59 = Object.keys(e29), u64 = a59.length, c48 = {
                    }; u64--;)if ((o105 = a59[u64]).startsWith(s59)) {
                        if ("$" === (i67 = o105.substring(s59.length))) continue;
                        i67.startsWith("$.") && (i67 = i67.substr(2)), n90 || (n90 = true), c48[i67] = e29[o105];
                    }
                    return n90 && c48 || void 0;
                }
            }
            b10.schemaName = "DocumentArray", b10.options = {
                castNonArrays: true
            }, /*!
 * Inherits from ArrayType.
 */ b10.prototype = Object.create(i65.prototype), b10.prototype.constructor = b10, b10.prototype.OptionsConstructor = u63, b10.prototype.discriminator = function(t5, e29, r77) {
                "function" == typeof t5 && (t5 = d25.getFunctionName(t5));
                var n91 = w10(e29 = f35(this.casterConstructor, t5, e29, r77), null, this.casterConstructor);
                n91.baseCasterConstructor = this.casterConstructor;
                try {
                    Object.defineProperty(n91, "name", {
                        value: t5
                    });
                } catch (t8) {
                }
                return this.casterConstructor.discriminators[t5] = n91, this.casterConstructor.discriminators[t5];
            }, b10.prototype.doValidate = function(t5, e29, i68, s60) {
                n64 || (n64 = r2(18));
                var a60 = this;
                try {
                    c47.prototype.doValidate.call(this, t5, function(r77) {
                        if (r77) return r77.$isArrayValidatorError = true, e29(r77);
                        var u65, c49 = t5 && t5.length;
                        if (!c49) return e29();
                        if (s60 && s60.updateValidator) return e29();
                        t5.isMongooseDocumentArray || (t5 = new n64(t5, a60.path, i68));
                        function f36(t8) {
                            null != t8 && ((u65 = t8) instanceof l36 || (u65.$isArrayValidatorError = true)), (--c49) || e29(u65);
                        }
                        for(var p33 = 0, h28 = c49; p33 < h28; ++p33){
                            var y27 = t5[p33];
                            if (null != y27) {
                                if (!(y27 instanceof o99)) {
                                    var d26 = _19(a60.casterConstructor, t5[p33]);
                                    y27 = t5[p33] = new d26(y27, t5, void 0, void 0, p33);
                                }
                                null == s60 || !s60.validateModifiedOnly || y27.isModified() ? y27.$__validate(f36) : (--c49) || e29(u65);
                            } else (--c49) || e29(u65);
                        }
                    }, i68);
                } catch (t8) {
                    return t8.$isArrayValidatorError = true, e29(t8);
                }
            }, b10.prototype.doValidateSync = function(t5, e29, r77) {
                var n91 = c47.prototype.doValidateSync.call(this, t5, e29);
                if (null != n91) return n91.$isArrayValidatorError = true, n91;
                var i68 = t5 && t5.length, s60 = null;
                if (i68) {
                    for(var a60 = 0, u65 = i68; a60 < u65; ++a60){
                        var l37 = t5[a60];
                        if (l37) {
                            if (!(l37 instanceof o99)) {
                                var f36 = _19(this.casterConstructor, t5[a60]);
                                l37 = t5[a60] = new f36(l37, t5, void 0, void 0, a60);
                            }
                            if (null == r77 || !r77.validateModifiedOnly || l37.isModified()) {
                                var p33 = l37.validateSync();
                                p33 && null == s60 && (s60 = p33);
                            }
                        }
                    }
                    return s60;
                }
            }, /*!
 * ignore
 */ b10.prototype.getDefault = function(t5) {
                var e29 = "function" == typeof this.defaultValue ? this.defaultValue.call(t5) : this.defaultValue;
                if (null == e29) return e29;
                n64 || (n64 = r2(18)), Array.isArray(e29) || (e29 = [
                    e29
                ]), e29 = new n64(e29, this.path, t5);
                for(var o106 = 0; o106 < e29.length; ++o106){
                    var i68 = new (_19(this.casterConstructor, e29[o106]))({
                    }, e29, void 0, void 0, o106);
                    i68.init(e29[o106]), i68.isNew = true, Object.assign(i68.$__.activePaths.default, i68.$__.activePaths.init), i68.$__.activePaths.init = {
                    }, e29[o106] = i68;
                }
                return e29;
            }, b10.prototype.cast = function(t5, e29, i69, a61, u66) {
                if (n64 || (n64 = r2(18)), null != t5 && null != t5[m10] && t5 === a61) return t5;
                var c49, l38, f37 = {
                    transform: false,
                    virtuals: false
                };
                if (u66 = u66 || {
                }, !Array.isArray(t5)) {
                    if (!i69 && !b10.options.castNonArrays) throw new s36("DocumentArray", y26.inspect(t5), this.path, null, this);
                    return e29 && i69 && e29.markModified(this.path), this.cast([
                        t5
                    ], e29, i69, a61, u66);
                }
                t5 && t5.isMongooseDocumentArray || u66.skipDocumentArrayCast ? t5 && t5.isMongooseDocumentArray && (t5 = new n64(t5, this.path, e29)) : t5 = new n64(t5, this.path, e29), null != a61 && (t5[v14] = a61[v14] || {
                }), null != u66.arrayPathIndex && (t5[m10] = this.path + "." + u66.arrayPathIndex);
                for(var p34 = t5.length, h28 = {
                    skipId: true,
                    willInit: true
                }, w11 = 0; w11 < p34; ++w11)if (t5[w11]) {
                    var S8 = _19(this.casterConstructor, t5[w11]);
                    if (!t5[w11].$__ || t5[w11] instanceof S8 && t5[w11][g12] === e29 || (t5[w11] = t5[w11].toObject({
                        transform: false,
                        virtuals: t5[w11].schema === S8.schema
                    })), t5[w11] instanceof o99) null == t5[w11].__index && t5[w11].$setIndex(w11);
                    else if (null != t5[w11]) {
                        if (i69) e29 ? c49 || (c49 = O9(this, e29.$__.selected, i69)) : c49 = true, l38 = new S8(null, t5, h28, c49, w11), t5[w11] = l38.init(t5[w11]);
                        else if (a61 && "function" == typeof a61.id && (l38 = a61.id(t5[w11]._id)), a61 && l38 && d25.deepEqual(l38.toObject(f37), t5[w11])) l38.set(t5[w11]), t5[w11] = l38;
                        else try {
                            l38 = new S8(t5[w11], t5, void 0, void 0, w11), t5[w11] = l38;
                        } catch (e32) {
                            var A5 = y26.inspect(t5[w11]);
                            throw new s36("embedded", A5, t5[m10], e32, this);
                        }
                    }
                }
                return t5;
            }, /*!
 * ignore
 */ b10.prototype.clone = function() {
                var t5 = Object.assign({
                }, this.options), e29 = new this.constructor(this.path, this.schema, t5, this.schemaOptions);
                return e29.validators = this.validators.slice(), (void 0) !== this.requiredValidator && (e29.requiredValidator = this.requiredValidator), e29.Constructor.discriminators = Object.assign({
                }, this.Constructor.discriminators), e29;
            }, /*!
 * ignore
 */ b10.prototype.applyGetters = function(t5, e29) {
                return c47.prototype.applyGetters.call(this, t5, e29);
            }, b10.defaultOptions = {
            }, b10.set = c47.set, /*!
 * Module exports.
 */ t2.exports = b10;
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o99(t5, e29) {
                if (!(t5 instanceof e29)) throw new TypeError("Cannot call a class as a function");
            }
            function i65(t5, e29) {
                return (i65 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function s36(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r77, n91 = u63(t5);
                    if (e29) {
                        var o106 = u63(this).constructor;
                        r77 = Reflect.construct(n91, arguments, o106);
                    } else r77 = n91.apply(this, arguments);
                    return a49(this, r77);
                };
            }
            function a49(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function u63(t5) {
                return (u63 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var c47 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && i65(t8, e29);
                })(r77, t5);
                var e29 = s36(r77);
                function r77() {
                    return o99(this, r77), e29.apply(this, arguments);
                }
                return r77;
            }(r2(9)), l36 = r2(10);
            Object.defineProperty(c47.prototype, "enum", l36), Object.defineProperty(c47.prototype, "of", l36), /*!
 * ignore
 */ t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = function t5(e29) {
                if (!Array.isArray(e29)) return {
                    min: 0,
                    max: 0,
                    containsNonArrayItem: true
                };
                if (0 === e29.length) return {
                    min: 1,
                    max: 1,
                    containsNonArrayItem: false
                };
                for(var r77 = t5(e29[0]), n64 = 1; n64 < e29.length; ++n64){
                    var o99 = t5(e29[n64]);
                    o99.min < r77.min && (r77.min = o99.min), o99.max > r77.max && (r77.max = o99.max), r77.containsNonArrayItem = r77.containsNonArrayItem || o99.containsNonArrayItem;
                }
                return r77.min = r77.min + 1, r77.max = r77.max + 1, r77;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5, e29) {
                var r77 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                if (!r77) {
                    if (Array.isArray(t5) || (r77 = (function(t8, e32) {
                        if (!t8) return;
                        if ("string" == typeof t8) return o107(t8, e32);
                        var r78 = Object.prototype.toString.call(t8).slice(8, -1);
                        "Object" === r78 && t8.constructor && (r78 = t8.constructor.name);
                        if ("Map" === r78 || "Set" === r78) return Array.from(t8);
                        if ("Arguments" === r78 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r78)) return o107(t8, e32);
                    })(t5)) || e29 && t5 && "number" == typeof t5.length) {
                        r77 && (t5 = r77);
                        var n91 = 0, i65 = function() {
                        };
                        return {
                            s: i65,
                            n: function() {
                                return n91 >= t5.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t5[n91++]
                                };
                            },
                            e: function(t8) {
                                throw t8;
                            },
                            f: i65
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s36, a49 = true, u63 = false;
                return {
                    s: function() {
                        r77 = r77.call(t5);
                    },
                    n: function() {
                        var t8 = r77.next();
                        return a49 = t8.done, t8;
                    },
                    e: function(t8) {
                        u63 = true, s36 = t8;
                    },
                    f: function() {
                        try {
                            a49 || null == r77.return || r77.return();
                        } finally{
                            if (u63) throw s36;
                        }
                    }
                };
            }
            function o107(t5, e29) {
                (null == e29 || e29 > t5.length) && (e29 = t5.length);
                for(var r77 = 0, n92 = new Array(e29); r77 < e29; r77++)n92[r77] = t5[r77];
                return n92;
            }
            function i69(t5) {
                return (i69 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            var s36 = r2(13), a49 = r2(32), u63 = r2(55), c47 = r2(157), l36 = r2(3), f35 = r2(158), p32 = r2(82), h27 = r2(4), y26 = r2(21), d25 = r2(29), _19 = [
                "Polygon",
                "MultiPolygon"
            ];
            function v14(t5, e29, r77) {
                if (Array.isArray(t5)) t5.forEach(function(n92, o108) {
                    if (Array.isArray(n92) || y26(n92)) return v14(n92, e29, r77);
                    t5[o108] = e29.castForQueryWrapper({
                        val: n92,
                        context: r77
                    });
                });
                else for(var n92 = Object.keys(t5), o108 = n92.length; o108--;){
                    var i70 = n92[o108], s60 = t5[i70];
                    Array.isArray(s60) || y26(s60) ? (v14(s60, e29, r77), t5[i70] = s60) : t5[i70] = e29.castForQuery({
                        val: s60,
                        context: r77
                    });
                }
            }
            t2.exports = function t5(e29, r77, o108, m10) {
                if (Array.isArray(r77)) throw new Error("Query filter must be an object, got an array ", h27.inspect(r77));
                if (null == r77) return r77;
                r77.hasOwnProperty("_bsontype") && "ObjectID" !== r77._bsontype && delete r77._bsontype, null != e29 && null != e29.discriminators && null != r77[e29.options.discriminatorKey] && (e29 = f35(e29, r77[e29.options.discriminatorKey]) || e29);
                var g12, b10, w10, O9, S9, A6, $5 = Object.keys(r77), E5 = $5.length;
                for(o108 = o108 || {
                }; E5--;)if (A6 = r77[O9 = $5[E5]], "$or" === O9 || "$nor" === O9 || "$and" === O9) {
                    if (!Array.isArray(A6)) throw new s36("Array", A6, O9);
                    for(var j4 = 0; j4 < A6.length; ++j4){
                        if (null == A6[j4] || "object" !== i69(A6[j4])) throw new s36("Object", A6[j4], O9 + "." + j4);
                        A6[j4] = t5(e29, A6[j4], o108, m10);
                    }
                } else {
                    if ("$where" === O9) {
                        if ("string" !== (S9 = i69(A6)) && "function" !== S9) throw new Error("Must have a string or function for $where");
                        "function" === S9 && (r77[O9] = A6.toString());
                        continue;
                    }
                    if ("$elemMatch" === O9) A6 = t5(e29, A6, o108, m10);
                    else if ("$text" === O9) A6 = c47(A6, O9);
                    else {
                        if (!e29) continue;
                        if (!(b10 = e29.path(O9))) for(var P3 = O9.split("."), x5 = P3.length; x5--;){
                            var T4 = P3.slice(0, x5).join("."), N4 = P3.slice(x5).join("."), k3 = e29.path(T4), B3 = l36(k3, "schema.options.discriminatorKey");
                            if (null != k3 && null != l36(k3, "schema.discriminators") && null != B3 && N4 !== B3) {
                                var R3 = l36(r77, T4 + "." + B3);
                                null != R3 && (b10 = k3.schema.discriminators[R3].path(N4));
                            }
                        }
                        if (b10) {
                            if (null == A6) continue;
                            if ("Object" === A6.constructor.name) {
                                if (Object.keys(A6).some(p32)) for(var C4 = Object.keys(A6), D = void 0, M7 = C4.length; M7--;)if (w10 = A6[D = C4[M7]], "$not" === D) {
                                    if (w10 && b10 && !b10.caster) {
                                        if ((g12 = Object.keys(w10)).length && p32(g12[0])) for(var I in w10)w10[I] = b10.castForQueryWrapper({
                                            $conditional: I,
                                            val: w10[I],
                                            context: m10
                                        });
                                        else A6[D] = b10.castForQueryWrapper({
                                            $conditional: D,
                                            val: w10,
                                            context: m10
                                        });
                                        continue;
                                    }
                                    t5(b10.caster ? b10.caster.schema : e29, w10, o108, m10);
                                } else A6[D] = b10.castForQueryWrapper({
                                    $conditional: D,
                                    val: w10,
                                    context: m10
                                });
                                else r77[O9] = b10.castForQueryWrapper({
                                    val: A6,
                                    context: m10
                                });
                            } else if (Array.isArray(A6) && -1 === [
                                "Buffer",
                                "Array"
                            ].indexOf(b10.instance)) {
                                var F6, L5 = [], U4 = n64(A6);
                                try {
                                    for(U4.s(); !(F6 = U4.n()).done;){
                                        var V5 = F6.value;
                                        L5.push(b10.castForQueryWrapper({
                                            val: V5,
                                            context: m10
                                        }));
                                    }
                                } catch (t8) {
                                    U4.e(t8);
                                } finally{
                                    U4.f();
                                }
                                r77[O9] = {
                                    $in: L5
                                };
                            } else r77[O9] = b10.castForQueryWrapper({
                                val: A6,
                                context: m10
                            });
                        } else {
                            for(var q4 = O9.split("."), W4 = q4.length, H = void 0, Y4 = void 0, K4 = void 0; (W4--) && (H = q4.slice(0, W4).join("."), !(b10 = e29.path(H))););
                            if (b10) {
                                b10.caster && b10.caster.schema ? ((K4 = {
                                })[Y4 = q4.slice(W4).join(".")] = A6, r77[O9] = t5(b10.caster.schema, K4, o108, m10)[Y4]) : r77[O9] = A6;
                                continue;
                            }
                            if (y26(A6)) {
                                var z = "";
                                if (A6.$near ? z = "$near" : A6.$nearSphere ? z = "$nearSphere" : A6.$within ? z = "$within" : A6.$geoIntersects ? z = "$geoIntersects" : A6.$geoWithin && (z = "$geoWithin"), z) {
                                    var Q = new u63.Number("__QueryCasting__"), J = A6[z];
                                    if (null != A6.$maxDistance && (A6.$maxDistance = Q.castForQueryWrapper({
                                        val: A6.$maxDistance,
                                        context: m10
                                    })), null != A6.$minDistance && (A6.$minDistance = Q.castForQueryWrapper({
                                        val: A6.$minDistance,
                                        context: m10
                                    })), "$within" === z) {
                                        var G = J.$center || J.$centerSphere || J.$box || J.$polygon;
                                        if (!G) throw new Error("Bad $within parameter: " + JSON.stringify(A6));
                                        J = G;
                                    } else if ("$near" === z && "string" == typeof J.type && Array.isArray(J.coordinates)) J = J.coordinates;
                                    else if (("$near" === z || "$nearSphere" === z || "$geoIntersects" === z) && J.$geometry && "string" == typeof J.$geometry.type && Array.isArray(J.$geometry.coordinates)) null != J.$maxDistance && (J.$maxDistance = Q.castForQueryWrapper({
                                        val: J.$maxDistance,
                                        context: m10
                                    })), null != J.$minDistance && (J.$minDistance = Q.castForQueryWrapper({
                                        val: J.$minDistance,
                                        context: m10
                                    })), d25(J.$geometry) && (J.$geometry = J.$geometry.toObject({
                                        transform: false,
                                        virtuals: false
                                    })), J = J.$geometry.coordinates;
                                    else if ("$geoWithin" === z) {
                                        if (J.$geometry) {
                                            d25(J.$geometry) && (J.$geometry = J.$geometry.toObject({
                                                virtuals: false
                                            }));
                                            var X3 = J.$geometry.type;
                                            if (-1 === _19.indexOf(X3)) throw new Error('Invalid geoJSON type for $geoWithin "' + X3 + '", must be "Polygon" or "MultiPolygon"');
                                            J = J.$geometry.coordinates;
                                        } else J = J.$box || J.$polygon || J.$center || J.$centerSphere, d25(J) && (J = J.toObject({
                                            virtuals: false
                                        }));
                                    }
                                    v14(J, Q, m10);
                                    continue;
                                }
                            }
                            if (e29.nested[O9]) continue;
                            if (o108.upsert && o108.strict) {
                                if ("throw" === o108.strict) throw new a49(O9);
                                throw new a49(O9, 'Path "' + O9 + '" is not in schema, strict mode is `true`, and upsert is `true`.');
                            }
                            if ("throw" === o108.strictQuery) throw new a49(O9, 'Path "' + O9 + "\" is not in schema and strictQuery is 'throw'.");
                            o108.strictQuery && delete r77[O9];
                        }
                    }
                }
                return r77;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            var o107 = r2(13), i69 = r2(51), s36 = r2(78);
            /*!
 * Casts val to an object suitable for `$text`. Throws an error if the object
 * can't be casted.
 *
 * @param {Any} val value to cast
 * @param {String} [path] path to associate with any errors that occured
 * @return {Object} casted object
 * @see https://docs.mongodb.com/manual/reference/operator/query/text/
 * @api private
 */ t2.exports = function(t5, e29) {
                if (null == t5 || "object" !== n64(t5)) throw new o107("$text", t5, e29);
                return null != t5.$search && (t5.$search = s36(t5.$search, e29 + ".$search")), null != t5.$language && (t5.$language = s36(t5.$language, e29 + ".$language")), null != t5.$caseSensitive && (t5.$caseSensitive = i69(t5.$caseSensitive, e29 + ".$castSensitive")), null != t5.$diacriticSensitive && (t5.$diacriticSensitive = i69(t5.$diacriticSensitive, e29 + ".$diacriticSensitive")), t5;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(81);
            /*!
* returns discriminator by discriminatorMapping.value
*
* @param {Schema} schema
* @param {string} value
*/ t2.exports = function(t5, e29) {
                if (null == t5 || null == t5.discriminators) return null;
                for(var r77 = 0, o107 = Object.keys(t5.discriminators); r77 < o107.length; r77++){
                    var i69 = o107[r77], s36 = t5.discriminators[i69];
                    if (null != s36.discriminatorMapping && n64(s36.discriminatorMapping.value, e29)) return s36;
                }
                return null;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o107(t5, e29) {
                if (!(t5 instanceof e29)) throw new TypeError("Cannot call a class as a function");
            }
            function i71(t5, e29) {
                return (i71 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function s61(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r77, n92 = u63(t5);
                    if (e29) {
                        var o108 = u63(this).constructor;
                        r77 = Reflect.construct(n92, arguments, o108);
                    } else r77 = n92.apply(this, arguments);
                    return a49(this, r77);
                };
            }
            function a49(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function u63(t5) {
                return (u63 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var c47 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && i71(t8, e29);
                })(r77, t5);
                var e29 = s61(r77);
                function r77() {
                    return o107(this, r77), e29.apply(this, arguments);
                }
                return r77;
            }(r2(9)), l36 = r2(10);
            Object.defineProperty(c47.prototype, "excludeIndexes", l36), Object.defineProperty(c47.prototype, "_id", l36), /*!
 * ignore
 */ t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            var o107, i71 = r2(13), s61 = r2(19).EventEmitter, a49 = r2(74), u63 = r2(161), c47 = r2(6), l36 = r2(50), f35 = r2(34).castToNumber, p32 = r2(92), h27 = r2(83), y26 = r2(3), d25 = r2(94), _19 = r2(93), v14 = r2(17).internalToObjectOptions;
            function m10(t5, e29, r77) {
                t5 = _19(t5, r77), this.caster = g12(t5), this.caster.path = e29, this.caster.prototype.$basePath = e29, this.schema = t5, this.$isSingleNested = true, c47.call(this, e29, r77, "Embedded");
            }
            /*!
 * ignore
 */ /*!
 * ignore
 */ function g12(t5, e29) {
                o107 || (o107 = r2(91));
                var n92 = function(t8, e32, r77) {
                    var n93 = this;
                    this.$__parent = r77, o107.apply(this, arguments), this.$session(this.ownerDocument().$session()), r77 && (r77.on("save", function() {
                        n93.emit("save", n93), n93.constructor.emit("save", n93);
                    }), r77.on("isNew", function(t9) {
                        n93.isNew = t9, n93.emit("isNew", t9), n93.constructor.emit("isNew", t9);
                    }));
                }, i72 = null != e29 ? e29.prototype : o107.prototype;
                for(var a61 in (n92.prototype = Object.create(i72)).$__setSchema(t5), n92.prototype.constructor = n92, n92.schema = t5, n92.$isSingleNested = true, n92.events = new s61, n92.prototype.toBSON = function() {
                    return this.toObject(v14);
                }, t5.methods)n92.prototype[a61] = t5.methods[a61];
                for(var u66 in t5.statics)n92[u66] = t5.statics[u66];
                for(var c49 in s61.prototype)n92[c49] = s61.prototype[c49];
                return n92;
            }
            /*!
 * Special case for when users use a common location schema to represent
 * locations for use with $geoWithin.
 * https://docs.mongodb.org/manual/reference/operator/query/geoWithin/
 *
 * @param {Object} val
 * @api private
 */ t2.exports = m10, m10.prototype = Object.create(c47.prototype), m10.prototype.constructor = m10, m10.prototype.OptionsConstructor = u63, m10.prototype.$conditionalHandlers.$geoWithin = function(t5) {
                return {
                    $geometry: this.castForQuery(t5.$geometry)
                };
            }, /*!
 * ignore
 */ m10.prototype.$conditionalHandlers.$near = m10.prototype.$conditionalHandlers.$nearSphere = h27.cast$near, m10.prototype.$conditionalHandlers.$within = m10.prototype.$conditionalHandlers.$geoWithin = h27.cast$within, m10.prototype.$conditionalHandlers.$geoIntersects = h27.cast$geoIntersects, m10.prototype.$conditionalHandlers.$minDistance = f35, m10.prototype.$conditionalHandlers.$maxDistance = f35, m10.prototype.$conditionalHandlers.$exists = l36, m10.prototype.cast = function(t5, e29, r77, o109, i72) {
                if (t5 && t5.$isSingleNested && t5.parent === e29) return t5;
                if (null != t5 && ("object" !== n64(t5) || Array.isArray(t5))) throw new a49(this.path, t5);
                var s62, u66 = d25(this.caster, t5), c49 = y26(e29, "$__.selected", {
                }), l38 = this.path, f37 = Object.keys(c49).reduce(function(t8, e32) {
                    return e32.startsWith(l38 + ".") && (t8[e32.substr(l38.length + 1)] = c49[e32]), t8;
                }, {
                });
                return i72 = Object.assign({
                }, i72, {
                    priorDoc: o109
                }), r77 ? ((s62 = new u66(void 0, f37, e29)).init(t5), s62) : 0 === Object.keys(t5).length ? new u66({
                }, f37, e29, void 0, i72) : new u66(t5, f37, e29, void 0, i72);
            }, m10.prototype.castForQuery = function(t5, e29, r77) {
                var n92;
                if (2 === arguments.length) {
                    if (!(n92 = this.$conditionalHandlers[t5])) throw new Error("Can't use " + t5);
                    return n92.call(this, e29);
                }
                if (null == (e29 = t5)) return e29;
                this.options.runSetters && (e29 = this._applySetters(e29));
                var o109 = d25(this.caster, e29), s62 = null != r77 && null != r77.strict ? r77.strict : void 0;
                try {
                    e29 = new o109(e29, s62);
                } catch (t8) {
                    if (!(t8 instanceof i71)) throw new i71("Embedded", e29, this.path, t8, this);
                    throw t8;
                }
                return e29;
            }, m10.prototype.doValidate = function(t5, e29, r77, n92) {
                var o109 = d25(this.caster, t5);
                if (n92 && n92.skipSchemaValidators) return t5 instanceof o109 || (t5 = new o109(t5, null, r77)), t5.validate(e29);
                c47.prototype.doValidate.call(this, t5, function(r78) {
                    return r78 ? e29(r78) : t5 ? void t5.validate(e29) : e29(null);
                }, r77, n92);
            }, m10.prototype.doValidateSync = function(t5, e29, r77) {
                if (!r77 || !r77.skipSchemaValidators) {
                    var n92 = c47.prototype.doValidateSync.call(this, t5, e29);
                    if (n92) return n92;
                }
                if (t5) return t5.validateSync();
            }, m10.prototype.discriminator = function(t5, e29, r77) {
                return e29 = p32(this.caster, t5, e29, r77), this.caster.discriminators[t5] = g12(e29, this.caster), this.caster.discriminators[t5];
            }, m10.defaultOptions = {
            }, m10.set = c47.set, /*!
 * ignore
 */ m10.prototype.clone = function() {
                var t5 = Object.assign({
                }, this.options), e29 = new this.constructor(this.schema, this.path, t5);
                return e29.validators = this.validators.slice(), (void 0) !== this.requiredValidator && (e29.requiredValidator = this.requiredValidator), e29.caster.discriminators = Object.assign({
                }, this.caster.discriminators), e29;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o107(t5, e29) {
                if (!(t5 instanceof e29)) throw new TypeError("Cannot call a class as a function");
            }
            function i71(t5, e29) {
                return (i71 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function s61(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r77, n93 = u63(t5);
                    if (e29) {
                        var o109 = u63(this).constructor;
                        r77 = Reflect.construct(n93, arguments, o109);
                    } else r77 = n93.apply(this, arguments);
                    return a49(this, r77);
                };
            }
            function a49(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function u63(t5) {
                return (u63 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var c47 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && i71(t8, e29);
                })(r77, t5);
                var e29 = s61(r77);
                function r77() {
                    return o107(this, r77), e29.apply(this, arguments);
                }
                return r77;
            }(r2(9)), l36 = r2(10);
            Object.defineProperty(c47.prototype, "_id", l36), t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e29) {
                /*!
 * Module dependencies.
 */ function n64(t5) {
                    return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                        return typeof t8;
                    } : function(t8) {
                        return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                    })(t5);
                }
                var o107 = r2(87), i71 = r2(163), s61 = r2(6), a49 = r2(80), u63 = r2(1), c47 = o107.Binary, l36 = s61.CastError;
                function f35(t5, e32) {
                    s61.call(this, t5, e32, "Buffer");
                }
                /*!
 * ignore
 */ function p32(t5) {
                    return this.castForQuery(t5);
                }
                f35.schemaName = "Buffer", f35.defaultOptions = {
                }, /*!
 * Inherits from SchemaType.
 */ f35.prototype = Object.create(s61.prototype), f35.prototype.constructor = f35, f35.prototype.OptionsConstructor = i71, /*!
 * ignore
 */ f35._checkRequired = function(t5) {
                    return !(!t5 || !t5.length);
                }, f35.set = s61.set, f35.checkRequired = s61.checkRequired, f35.prototype.checkRequired = function(t5, e32) {
                    return s61._isRef(this, t5, e32, true) ? !!t5 : this.constructor._checkRequired(t5);
                }, f35.prototype.cast = function(t5, r77, i72) {
                    var a61;
                    if (s61._isRef(this, t5, r77, i72)) {
                        if (t5 && t5.isMongooseBuffer) return t5;
                        if (e29.isBuffer(t5)) return t5 && t5.isMongooseBuffer || (t5 = new o107(t5, [
                            this.path,
                            r77
                        ]), null != this.options.subtype && (t5._subtype = this.options.subtype)), t5;
                        if (t5 instanceof c47) {
                            if (a61 = new o107(t5.value(true), [
                                this.path,
                                r77
                            ]), "number" != typeof t5.sub_type) throw new l36("Buffer", t5, this.path, null, this);
                            return a61._subtype = t5.sub_type, a61;
                        }
                        return this._castRef(t5, r77, i72);
                    }
                    if (t5 && t5._id && (t5 = t5._id), t5 && t5.isMongooseBuffer) return t5;
                    if (e29.isBuffer(t5)) return t5 && t5.isMongooseBuffer || (t5 = new o107(t5, [
                        this.path,
                        r77
                    ]), null != this.options.subtype && (t5._subtype = this.options.subtype)), t5;
                    if (t5 instanceof c47) {
                        if (a61 = new o107(t5.value(true), [
                            this.path,
                            r77
                        ]), "number" != typeof t5.sub_type) throw new l36("Buffer", t5, this.path, null, this);
                        return a61._subtype = t5.sub_type, a61;
                    }
                    if (null === t5) return t5;
                    var u66 = n64(t5);
                    if ("string" === u66 || "number" === u66 || Array.isArray(t5) || "object" === u66 && "Buffer" === t5.type && Array.isArray(t5.data)) return "number" === u66 && (t5 = [
                        t5
                    ]), a61 = new o107(t5, [
                        this.path,
                        r77
                    ]), null != this.options.subtype && (a61._subtype = this.options.subtype), a61;
                    throw new l36("Buffer", t5, this.path, null, this);
                }, f35.prototype.subtype = function(t5) {
                    return this.options.subtype = t5, this;
                }, f35.prototype.$conditionalHandlers = u63.options(s61.prototype.$conditionalHandlers, {
                    $bitsAllClear: a49,
                    $bitsAnyClear: a49,
                    $bitsAllSet: a49,
                    $bitsAnySet: a49,
                    $gt: p32,
                    $gte: p32,
                    $lt: p32,
                    $lte: p32
                }), f35.prototype.castForQuery = function(t5, e32) {
                    var r77;
                    if (2 === arguments.length) {
                        if (!(r77 = this.$conditionalHandlers[t5])) throw new Error("Can't use " + t5 + " with Buffer.");
                        return r77.call(this, e32);
                    }
                    e32 = t5;
                    var n93 = this._castForQuery(e32);
                    return n93 ? n93.toObject({
                        transform: false,
                        virtuals: false
                    }) : n93;
                }, /*!
 * Module exports.
 */ t2.exports = f35;
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o107(t5, e29) {
                if (!(t5 instanceof e29)) throw new TypeError("Cannot call a class as a function");
            }
            function i71(t5, e29) {
                return (i71 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function s61(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r77, n93 = u63(t5);
                    if (e29) {
                        var o110 = u63(this).constructor;
                        r77 = Reflect.construct(n93, arguments, o110);
                    } else r77 = n93.apply(this, arguments);
                    return a49(this, r77);
                };
            }
            function a49(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function u63(t5) {
                return (u63 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var c47 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && i71(t8, e29);
                })(r77, t5);
                var e29 = s61(r77);
                function r77() {
                    return o107(this, r77), e29.apply(this, arguments);
                }
                return r77;
            }(r2(9)), l36 = r2(10);
            Object.defineProperty(c47.prototype, "subtype", l36), /*!
 * ignore
 */ t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module requirements.
 */ var n64 = r2(5), o107 = r2(165), i71 = r2(6), s61 = r2(166), a49 = r2(1), u63 = i71.CastError;
            function c47(t5, e29) {
                i71.call(this, t5, e29, "Date");
            }
            /*!
 * Date Query casting.
 *
 * @api private
 */ function l36(t5) {
                return this.cast(t5);
            }
            c47.schemaName = "Date", c47.defaultOptions = {
            }, /*!
 * Inherits from SchemaType.
 */ c47.prototype = Object.create(i71.prototype), c47.prototype.constructor = c47, c47.prototype.OptionsConstructor = o107, /*!
 * ignore
 */ c47._cast = s61, c47.set = i71.set, c47.cast = function(t5) {
                return 0 === arguments.length || (false === t5 && (t5 = this._defaultCaster), this._cast = t5), this._cast;
            }, /*!
 * ignore
 */ c47._defaultCaster = function(t5) {
                if (null != t5 && !(t5 instanceof Date)) throw new Error;
                return t5;
            }, c47.prototype.expires = function(t5) {
                return this._index && "Object" === this._index.constructor.name || (this._index = {
                }), this._index.expires = t5, a49.expires(this._index), this;
            }, /*!
 * ignore
 */ c47._checkRequired = function(t5) {
                return t5 instanceof Date;
            }, c47.checkRequired = i71.checkRequired, c47.prototype.checkRequired = function(t5, e29) {
                return i71._isRef(this, t5, e29, true) ? !!t5 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : c47.checkRequired())(t5);
            }, c47.prototype.min = function(t5, e29) {
                if (this.minValidator && (this.validators = this.validators.filter(function(t8) {
                    return t8.validator !== this.minValidator;
                }, this)), t5) {
                    var r77 = e29 || n64.messages.Date.min;
                    "string" == typeof r77 && (r77 = r77.replace(/{MIN}/, t5 === Date.now ? "Date.now()" : t5.toString()));
                    var o111 = this;
                    this.validators.push({
                        validator: this.minValidator = function(e32) {
                            var r78 = t5;
                            "function" == typeof t5 && t5 !== Date.now && (r78 = r78.call(this));
                            var n93 = r78 === Date.now ? r78() : o111.cast(r78);
                            return null === e32 || e32.valueOf() >= n93.valueOf();
                        },
                        message: r77,
                        type: "min",
                        min: t5
                    });
                }
                return this;
            }, c47.prototype.max = function(t5, e29) {
                if (this.maxValidator && (this.validators = this.validators.filter(function(t8) {
                    return t8.validator !== this.maxValidator;
                }, this)), t5) {
                    var r78 = e29 || n64.messages.Date.max;
                    "string" == typeof r78 && (r78 = r78.replace(/{MAX}/, t5 === Date.now ? "Date.now()" : t5.toString()));
                    var o112 = this;
                    this.validators.push({
                        validator: this.maxValidator = function(e32) {
                            var r79 = t5;
                            "function" == typeof r79 && r79 !== Date.now && (r79 = r79.call(this));
                            var n93 = r79 === Date.now ? r79() : o112.cast(r79);
                            return null === e32 || e32.valueOf() <= n93.valueOf();
                        },
                        message: r78,
                        type: "max",
                        max: t5
                    });
                }
                return this;
            }, c47.prototype.cast = function(t5) {
                var e29;
                e29 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : c47.cast();
                try {
                    return e29(t5);
                } catch (e32) {
                    throw new u63("date", t5, this.path, e32, this);
                }
            }, c47.prototype.$conditionalHandlers = a49.options(i71.prototype.$conditionalHandlers, {
                $gt: l36,
                $gte: l36,
                $lt: l36,
                $lte: l36
            }), c47.prototype.castForQuery = function(t5, e29) {
                if (2 !== arguments.length) return this._castForQuery(t5);
                var r79 = this.$conditionalHandlers[t5];
                if (!r79) throw new Error("Can't use " + t5 + " with Date.");
                return r79.call(this, e29);
            }, /*!
 * Module exports.
 */ t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o107(t5, e29) {
                if (!(t5 instanceof e29)) throw new TypeError("Cannot call a class as a function");
            }
            function i71(t5, e29) {
                return (i71 = Object.setPrototypeOf || function(t8, e32) {
                    return t8.__proto__ = e32, t8;
                })(t5, e29);
            }
            function s61(t5) {
                var e29 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r79, n93 = u63(t5);
                    if (e29) {
                        var o113 = u63(this).constructor;
                        r79 = Reflect.construct(n93, arguments, o113);
                    } else r79 = n93.apply(this, arguments);
                    return a49(this, r79);
                };
            }
            function a49(t5, e29) {
                return !e29 || "object" !== n64(e29) && "function" != typeof e29 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e29;
            }
            function u63(t5) {
                return (u63 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var c47 = function(t5) {
                (function(t8, e29) {
                    if ("function" != typeof e29 && null !== e29) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e29 && e29.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e29 && i71(t8, e29);
                })(r79, t5);
                var e29 = s61(r79);
                function r79() {
                    return o107(this, r79), e29.apply(this, arguments);
                }
                return r79;
            }(r2(9)), l36 = r2(10);
            Object.defineProperty(c47.prototype, "min", l36), Object.defineProperty(c47.prototype, "max", l36), Object.defineProperty(c47.prototype, "expires", l36), /*!
 * ignore
 */ t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(22);
            t2.exports = function(t5) {
                var e29;
                return null == t5 || "" === t5 ? null : t5 instanceof Date ? (n64.ok(!isNaN(t5.valueOf())), t5) : (n64.ok("boolean" != typeof t5), e29 = t5 instanceof Number || "number" == typeof t5 ? new Date(t5) : "string" == typeof t5 && !isNaN(Number(t5)) && (Number(t5) >= 275761 || Number(t5) < -271820) ? new Date(Number(t5)) : "function" == typeof t5.valueOf ? new Date(t5.valueOf()) : new Date(t5), isNaN(e29.valueOf()) ? void n64.ok(false) : e29);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n64, o107 = r2(168), i71 = r2(6), s61 = r2(88), a49 = r2(8), u63 = r2(1), c47 = i71.CastError;
            function l36(t5, e29) {
                var r79 = "string" == typeof t5 && 24 === t5.length && /^[a-f0-9]+$/i.test(t5), n93 = e29 && e29.suppressWarning;
                !r79 && (void 0) !== t5 || n93 || (console.warn("mongoose: To create a new ObjectId please try `Mongoose.Types.ObjectId` instead of using `Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if you're trying to create a hex char path in your schema."), console.trace()), i71.call(this, t5, e29, "ObjectID");
            }
            /*!
 * ignore
 */ function f35(t5) {
                return this.cast(t5);
            }
            /*!
 * ignore
 */ function p32() {
                return new a49;
            }
            function h27(t5) {
                if (n64 || (n64 = r2(12)), this instanceof n64) {
                    if ((void 0) === t5) {
                        var e29 = new a49;
                        return this.$__._id = e29, e29;
                    }
                    this.$__._id = t5;
                }
                return t5;
            }
            /*!
 * Module exports.
 */ l36.schemaName = "ObjectId", l36.defaultOptions = {
            }, /*!
 * Inherits from SchemaType.
 */ l36.prototype = Object.create(i71.prototype), l36.prototype.constructor = l36, l36.prototype.OptionsConstructor = o107, l36.get = i71.get, l36.set = i71.set, l36.prototype.auto = function(t5) {
                return t5 && (this.default(p32), this.set(h27)), this;
            }, /*!
 * ignore
 */ l36._checkRequired = function(t5) {
                return t5 instanceof a49;
            }, /*!
 * ignore
 */ l36._cast = s61, l36.cast = function(t5) {
                return 0 === arguments.length || (false === t5 && (t5 = this._defaultCaster), this._cast = t5), this._cast;
            }, /*!
 * ignore
 */ l36._defaultCaster = function(t5) {
                if (!(t5 instanceof a49)) throw new Error(t5 + " is not an instance of ObjectId");
                return t5;
            }, l36.checkRequired = i71.checkRequired, l36.prototype.checkRequired = function(t5, e32) {
                return i71._isRef(this, t5, e32, true) ? !!t5 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : l36.checkRequired())(t5);
            }, l36.prototype.cast = function(t5, e32, r79) {
                if (i71._isRef(this, t5, e32, r79)) return t5 instanceof a49 ? t5 : null != t5 && "objectid" === (t5.constructor.name || "").toLowerCase() ? new a49(t5.toHexString()) : this._castRef(t5, e32, r79);
                var n93;
                n93 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : l36.cast();
                try {
                    return n93(t5);
                } catch (e40) {
                    throw new c47("ObjectId", t5, this.path, e40, this);
                }
            }, l36.prototype.$conditionalHandlers = u63.options(i71.prototype.$conditionalHandlers, {
                $gt: f35,
                $gte: f35,
                $lt: f35,
                $lte: f35
            }), p32.$runBeforeSetters = true, t2.exports = l36;
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o107(t5, e32) {
                if (!(t5 instanceof e32)) throw new TypeError("Cannot call a class as a function");
            }
            function i71(t5, e32) {
                return (i71 = Object.setPrototypeOf || function(t8, e40) {
                    return t8.__proto__ = e40, t8;
                })(t5, e32);
            }
            function s61(t5) {
                var e32 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r79, n93 = u63(t5);
                    if (e32) {
                        var o114 = u63(this).constructor;
                        r79 = Reflect.construct(n93, arguments, o114);
                    } else r79 = n93.apply(this, arguments);
                    return a49(this, r79);
                };
            }
            function a49(t5, e32) {
                return !e32 || "object" !== n64(e32) && "function" != typeof e32 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e32;
            }
            function u63(t5) {
                return (u63 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var c47 = function(t5) {
                (function(t8, e32) {
                    if ("function" != typeof e32 && null !== e32) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e32 && e32.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e32 && i71(t8, e32);
                })(r79, t5);
                var e32 = s61(r79);
                function r79() {
                    return o107(this, r79), e32.apply(this, arguments);
                }
                return r79;
            }(r2(9)), l36 = r2(10);
            Object.defineProperty(c47.prototype, "auto", l36), Object.defineProperty(c47.prototype, "populate", l36), /*!
 * ignore
 */ t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n64 = r2(6), o107 = n64.CastError, i71 = r2(20), s61 = r2(170), a49 = r2(1);
            function u63(t5, e32) {
                n64.call(this, t5, e32, "Decimal128");
            }
            /*!
 * ignore
 */ function c47(t5) {
                return this.cast(t5);
            }
            u63.schemaName = "Decimal128", u63.defaultOptions = {
            }, /*!
 * Inherits from SchemaType.
 */ u63.prototype = Object.create(n64.prototype), u63.prototype.constructor = u63, /*!
 * ignore
 */ u63._cast = s61, u63.set = n64.set, u63.cast = function(t5) {
                return 0 === arguments.length || (false === t5 && (t5 = this._defaultCaster), this._cast = t5), this._cast;
            }, /*!
 * ignore
 */ u63._defaultCaster = function(t5) {
                if (null != t5 && !(t5 instanceof i71)) throw new Error;
                return t5;
            }, /*!
 * ignore
 */ u63._checkRequired = function(t5) {
                return t5 instanceof i71;
            }, u63.checkRequired = n64.checkRequired, u63.prototype.checkRequired = function(t5, e32) {
                return n64._isRef(this, t5, e32, true) ? !!t5 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : u63.checkRequired())(t5);
            }, u63.prototype.cast = function(t5, e32, r79) {
                if (n64._isRef(this, t5, e32, r79)) return t5 instanceof i71 ? t5 : this._castRef(t5, e32, r79);
                var s62;
                s62 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : u63.cast();
                try {
                    return s62(t5);
                } catch (e40) {
                    throw new o107("Decimal128", t5, this.path, e40, this);
                }
            }, u63.prototype.$conditionalHandlers = a49.options(n64.prototype.$conditionalHandlers, {
                $gt: c47,
                $gte: c47,
                $lt: c47,
                $lte: c47
            }), /*!
 * Module exports.
 */ t2.exports = u63;
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e32) {
                function n64(t5) {
                    return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                        return typeof t8;
                    } : function(t8) {
                        return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                    })(t5);
                }
                var o107 = r2(20), i71 = r2(22);
                t2.exports = function(t5) {
                    return null == t5 ? t5 : "object" === n64(t5) && "string" == typeof t5.$numberDecimal ? o107.fromString(t5.$numberDecimal) : t5 instanceof o107 ? t5 : "string" == typeof t5 ? o107.fromString(t5) : e32.isBuffer(t5) ? new o107(t5) : "number" == typeof t5 ? o107.fromString(String(t5)) : "function" == typeof t5.valueOf && "string" == typeof t5.valueOf() ? o107.fromString(t5.valueOf()) : void i71.ok(false);
                };
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            (function(e32) {
                /*!
 * ignore
 */ function n64(t5) {
                    return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                        return typeof t8;
                    } : function(t8) {
                        return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                    })(t5);
                }
                function o107(t5, e40) {
                    var r79 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                    if (!r79) {
                        if (Array.isArray(t5) || (r79 = (function(t8, e41) {
                            if (!t8) return;
                            if ("string" == typeof t8) return i71(t8, e41);
                            var r80 = Object.prototype.toString.call(t8).slice(8, -1);
                            "Object" === r80 && t8.constructor && (r80 = t8.constructor.name);
                            if ("Map" === r80 || "Set" === r80) return Array.from(t8);
                            if ("Arguments" === r80 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r80)) return i71(t8, e41);
                        })(t5)) || e40 && t5 && "number" == typeof t5.length) {
                            r79 && (t5 = r79);
                            var n93 = 0, o115 = function() {
                            };
                            return {
                                s: o115,
                                n: function() {
                                    return n93 >= t5.length ? {
                                        done: true
                                    } : {
                                        done: false,
                                        value: t5[n93++]
                                    };
                                },
                                e: function(t8) {
                                    throw t8;
                                },
                                f: o115
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var s61, a49 = true, u63 = false;
                    return {
                        s: function() {
                            r79 = r79.call(t5);
                        },
                        n: function() {
                            var t8 = r79.next();
                            return a49 = t8.done, t8;
                        },
                        e: function(t8) {
                            u63 = true, s61 = t8;
                        },
                        f: function() {
                            try {
                                a49 || null == r79.return || r79.return();
                            } finally{
                                if (u63) throw s61;
                            }
                        }
                    };
                }
                function i71(t5, e40) {
                    (null == e40 || e40 > t5.length) && (e40 = t5.length);
                    for(var r79 = 0, n94 = new Array(e40); r79 < e40; r79++)n94[r79] = t5[r79];
                    return n94;
                }
                function s61(t5, e40) {
                    for(var r79 = 0; r79 < e40.length; r79++){
                        var n94 = e40[r79];
                        n94.enumerable = n94.enumerable || false, n94.configurable = true, "value" in n94 && (n94.writable = true), Object.defineProperty(t5, n94.key, n94);
                    }
                }
                function a49(t5, e40, r79) {
                    return (a49 = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t8, e41, r80) {
                        var n95 = function(t9, e42) {
                            for(; !Object.prototype.hasOwnProperty.call(t9, e42) && null !== (t9 = f35(t9)););
                            return t9;
                        }(t8, e41);
                        if (n95) {
                            var o116 = Object.getOwnPropertyDescriptor(n95, e41);
                            return o116.get ? o116.get.call(r80) : o116.value;
                        }
                    })(t5, e40, r79 || t5);
                }
                function u63(t5, e40) {
                    return (u63 = Object.setPrototypeOf || function(t8, e41) {
                        return t8.__proto__ = e41, t8;
                    })(t5, e40);
                }
                function c47(t5) {
                    var e40 = function() {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                        if (Reflect.construct.sham) return false;
                        if ("function" == typeof Proxy) return true;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                            })), true;
                        } catch (t8) {
                            return false;
                        }
                    }();
                    return function() {
                        var r79, n95 = f35(t5);
                        if (e40) {
                            var o117 = f35(this).constructor;
                            r79 = Reflect.construct(n95, arguments, o117);
                        } else r79 = n95.apply(this, arguments);
                        return l36(this, r79);
                    };
                }
                function l36(t5, e40) {
                    return !e40 || "object" !== n64(e40) && "function" != typeof e40 ? (function(t8) {
                        if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t8;
                    })(t5) : e40;
                }
                function f35(t5) {
                    return (f35 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                        return t8.__proto__ || Object.getPrototypeOf(t8);
                    })(t5);
                }
                var p32 = r2(89), h27 = r2(172), y26 = r2(6), d25 = function(t5) {
                    (function(t8, e40) {
                        if ("function" != typeof e40 && null !== e40) throw new TypeError("Super expression must either be null or a function");
                        t8.prototype = Object.create(e40 && e40.prototype, {
                            constructor: {
                                value: t8,
                                writable: true,
                                configurable: true
                            }
                        }), e40 && u63(t8, e40);
                    })(h28, t5);
                    var r79, n95, i72, l38 = c47(h28);
                    function h28(t8, e40) {
                        var r80;
                        return (function(t9, e41) {
                            if (!(t9 instanceof e41)) throw new TypeError("Cannot call a class as a function");
                        })(this, h28), (r80 = l38.call(this, t8, e40, "Map")).$isSchemaMap = true, r80;
                    }
                    return r79 = h28, n95 = [
                        {
                            key: "set",
                            value: function(t8, e40) {
                                return y26.set(t8, e40);
                            }
                        },
                        {
                            key: "cast",
                            value: function(t8, r80, n96) {
                                if (t8 instanceof p32) return t8;
                                var i73 = this.path;
                                if (n96) {
                                    var s62 = new p32({
                                    }, i73, r80, this.$__schemaType);
                                    if (t8 instanceof e32.Map) {
                                        var a61, u66 = o107(t8.keys());
                                        try {
                                            for(u66.s(); !(a61 = u66.n()).done;){
                                                var c49 = a61.value, l39 = t8.get(c49);
                                                l39 = null == l39 ? s62.$__schemaType._castNullish(l39) : s62.$__schemaType.cast(l39, r80, true, null, {
                                                    path: i73 + "." + c49
                                                }), s62.$init(c49, l39);
                                            }
                                        } catch (t9) {
                                            u66.e(t9);
                                        } finally{
                                            u66.f();
                                        }
                                    } else for(var f37 = 0, h29 = Object.keys(t8); f37 < h29.length; f37++){
                                        var y28 = h29[f37], d27 = t8[y28];
                                        d27 = null == d27 ? s62.$__schemaType._castNullish(d27) : s62.$__schemaType.cast(d27, r80, true, null, {
                                            path: i73 + "." + y28
                                        }), s62.$init(y28, d27);
                                    }
                                    return s62;
                                }
                                return new p32(t8, i73, r80, this.$__schemaType);
                            }
                        },
                        {
                            key: "clone",
                            value: function() {
                                var t8 = a49(f35(h28.prototype), "clone", this).call(this);
                                return null != this.$__schemaType && (t8.$__schemaType = this.$__schemaType.clone()), t8;
                            }
                        }
                    ], s61(r79.prototype, n95), i72 && s61(r79, i72), h28;
                }(y26);
                d25.prototype.OptionsConstructor = h27, d25.defaultOptions = {
                }, t2.exports = d25;
            }).call(this, r2(11));
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o107(t5, e32) {
                if (!(t5 instanceof e32)) throw new TypeError("Cannot call a class as a function");
            }
            function i71(t5, e32) {
                return (i71 = Object.setPrototypeOf || function(t8, e40) {
                    return t8.__proto__ = e40, t8;
                })(t5, e32);
            }
            function s61(t5) {
                var e32 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if ("function" == typeof Proxy) return true;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), true;
                    } catch (t8) {
                        return false;
                    }
                }();
                return function() {
                    var r79, n95 = u63(t5);
                    if (e32) {
                        var o118 = u63(this).constructor;
                        r79 = Reflect.construct(n95, arguments, o118);
                    } else r79 = n95.apply(this, arguments);
                    return a49(this, r79);
                };
            }
            function a49(t5, e32) {
                return !e32 || "object" !== n64(e32) && "function" != typeof e32 ? (function(t8) {
                    if ((void 0) === t8) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t8;
                })(t5) : e32;
            }
            function u63(t5) {
                return (u63 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t8) {
                    return t8.__proto__ || Object.getPrototypeOf(t8);
                })(t5);
            }
            var c47 = function(t5) {
                (function(t8, e32) {
                    if ("function" != typeof e32 && null !== e32) throw new TypeError("Super expression must either be null or a function");
                    t8.prototype = Object.create(e32 && e32.prototype, {
                        constructor: {
                            value: t8,
                            writable: true,
                            configurable: true
                        }
                    }), e32 && i71(t8, e32);
                })(r79, t5);
                var e32 = s61(r79);
                function r79() {
                    return o107(this, r79), e32.apply(this, arguments);
                }
                return r79;
            }(r2(9)), l36 = r2(10);
            Object.defineProperty(c47.prototype, "of", l36), t2.exports = c47;
        },
        function(t2, e3, r2) {
            "use strict";
            (function(t5) {
                /*!
 * Module dependencies.
 */ function n64(t8) {
                    return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t9) {
                        return typeof t9;
                    } : function(t9) {
                        return t9 && "function" == typeof Symbol && t9.constructor === Symbol && t9 !== Symbol.prototype ? "symbol" : typeof t9;
                    })(t8);
                }
                var o107 = r2(15).get().Binary, i71 = r2(20), s61 = r2(8), a49 = r2(29);
                /*!
 * ignore
 */ function u63(e32) {
                    return e32 && "object" === n64(e32) && !(e32 instanceof Date) && !(e32 instanceof s61) && (!Array.isArray(e32) || e32.length > 0) && !(e32 instanceof t5) && !(e32 instanceof i71) && !(e32 instanceof o107);
                }
                e3.flatten = /*!
 * ignore
 */ function e32(r79, n95, o119, i72) {
                    var s63;
                    s63 = r79 && a49(r79) && !t5.isBuffer(r79) ? Object.keys(r79.toObject({
                        transform: false,
                        virtuals: false
                    })) : Object.keys(r79 || {
                    });
                    var c47 = s63.length, l36 = {
                    };
                    n95 = n95 ? n95 + "." : "";
                    for(var f35 = 0; f35 < c47; ++f35){
                        var p32 = s63[f35], h27 = r79[p32];
                        l36[n95 + p32] = h27;
                        var y26 = i72 && i72.path && i72.path(n95 + p32), d25 = i72 && i72.nested && i72.nested[n95 + p32];
                        if (!y26 || "Mixed" !== y26.instance) {
                            if (u63(h27)) {
                                if (o119 && o119.skipArrays && Array.isArray(h27)) continue;
                                var _19 = e32(h27, n95 + p32, o119, i72);
                                for(var v14 in _19)l36[v14] = _19[v14];
                                Array.isArray(h27) && (l36[n95 + p32] = h27);
                            }
                            if (d25) for(var m10 = Object.keys(i72.paths), g12 = 0, b10 = m10; g12 < b10.length; g12++){
                                var w10 = b10[g12];
                                w10.startsWith(n95 + p32 + ".") && !l36.hasOwnProperty(w10) && (l36[w10] = void 0);
                            }
                        }
                    }
                    return l36;
                }, e3.modifiedPaths = function e40(r79, n95, o119) {
                    var i72 = Object.keys(r79 || {
                    }), s63 = i72.length;
                    o119 = o119 || {
                    }, n95 = n95 ? n95 + "." : "";
                    for(var c47 = 0; c47 < s63; ++c47){
                        var l36 = i72[c47], f35 = r79[l36];
                        o119[n95 + l36] = true, a49(f35) && !t5.isBuffer(f35) && (f35 = f35.toObject({
                            transform: false,
                            virtuals: false
                        })), u63(f35) && e40(f35, n95 + l36, o119);
                    }
                    return o119;
                };
            }).call(this, r2(2).Buffer);
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(3);
            /*!
 * Like `schema.path()`, except with a document, because impossible to
 * determine path type without knowing the embedded discriminator key.
 */ t2.exports = function t5(e32, r79, o107) {
                for(var i71 = (o107 = o107 || {
                }).typeOnly, s61 = r79.split("."), a49 = null, u63 = "adhocOrUndefined", c47 = 0; c47 < s61.length; ++c47){
                    var l38 = s61.slice(0, c47 + 1).join(".");
                    if (null != (a49 = e32.schema.path(l38))) {
                        if ("Mixed" === a49.instance) return i71 ? "real" : a49;
                        if (u63 = e32.schema.pathType(l38), (a49.$isSingleNested || a49.$isMongooseDocumentArrayElement) && null != a49.schema.discriminators) {
                            var f38 = a49.schema.discriminators, p34 = e32.get(l38 + "." + n64(a49, "schema.options.discriminatorKey"));
                            if (null == p34 || null == f38[p34]) continue;
                            var h28 = s61.slice(c47 + 1).join(".");
                            return t5(e32.get(l38), h28, o107);
                        }
                    } else u63 = "adhocOrUndefined";
                }
                return i71 ? u63 : a49;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * ignore
 */ /*!
 * Returns this documents _id cast to a string.
 */ function n64() {
                return null != this._id ? String(this._id) : null;
            }
            t2.exports = function(t5) {
                !t5.paths.id && !t5.options.noVirtualId && t5.options.id && t5.virtual("id").get(n64);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            var n64 = r2(58);
            /*!
 * ignore
 */ t2.exports = function(t5) {
                if (null == t5) return null;
                var e32 = Object.keys(t5), r79 = e32.length, o107 = null;
                if (1 === r79 && "_id" === e32[0]) o107 = !!t5[e32[r79]];
                else for(; r79--;)if ("_id" !== e32[r79] && n64(t5[e32[r79]])) {
                    o107 = !t5[e32[r79]];
                    break;
                }
                return o107;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies
 */ function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            function o107(t5, e32) {
                var r79 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                if (!r79) {
                    if (Array.isArray(t5) || (r79 = (function(t8, e40) {
                        if (!t8) return;
                        if ("string" == typeof t8) return i71(t8, e40);
                        var r80 = Object.prototype.toString.call(t8).slice(8, -1);
                        "Object" === r80 && t8.constructor && (r80 = t8.constructor.name);
                        if ("Map" === r80 || "Set" === r80) return Array.from(t8);
                        if ("Arguments" === r80 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r80)) return i71(t8, e40);
                    })(t5)) || e32 && t5 && "number" == typeof t5.length) {
                        r79 && (t5 = r79);
                        var n95 = 0, o119 = function() {
                        };
                        return {
                            s: o119,
                            n: function() {
                                return n95 >= t5.length ? {
                                    done: true
                                } : {
                                    done: false,
                                    value: t5[n95++]
                                };
                            },
                            e: function(t8) {
                                throw t8;
                            },
                            f: o119
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var s61, a49 = true, u63 = false;
                return {
                    s: function() {
                        r79 = r79.call(t5);
                    },
                    n: function() {
                        var t8 = r79.next();
                        return a49 = t8.done, t8;
                    },
                    e: function(t8) {
                        u63 = true, s61 = t8;
                    },
                    f: function() {
                        try {
                            a49 || null == r79.return || r79.return();
                        } finally{
                            if (u63) throw s61;
                        }
                    }
                };
            }
            function i71(t5, e32) {
                (null == e32 || e32 > t5.length) && (e32 = t5.length);
                for(var r79 = 0, n96 = new Array(e32); r79 < e32; r79++)n96[r79] = t5[r79];
                return n96;
            }
            var s61 = r2(178), a49 = r2(3), u63 = r2(35), c47 = r2(58), l40 = r2(28);
            /*!
 * Set each path query option to lean
 *
 * @param {Object} option
 */ function f39(t5) {
                return function(e32) {
                    e32.options || (e32.options = {
                    }), null != t5 && Array.isArray(t5.virtuals) && ((t5 = Object.assign({
                    }, t5)).virtuals = t5.virtuals.filter(function(t8) {
                        return "string" == typeof t8 && t8.startsWith(e32.path + ".");
                    }).map(function(t8) {
                        return t8.slice(e32.path.length + 1);
                    })), e32.options.lean = t5;
                };
            }
            /*!
 * Handle the `WriteOpResult` from the server
 */ /*!
 * Prepare a set of path options for query population.
 *
 * @param {Query} query
 * @param {Object} options
 * @return {Array}
 */ e3.preparePopulationOptions = function(t5, e32) {
                var r79 = t5.options.populate, n96 = Object.keys(r79).reduce(function(t8, e40) {
                    return t8.concat([
                        r79[e40]
                    ]);
                }, []);
                return null != e32.lean && n96.filter(function(t8) {
                    return null == a49(t8, "options.lean");
                }).forEach(f39(e32.lean)), n96;
            }, /*!
 * Prepare a set of path options for query population. This is the MongooseQuery
 * version
 *
 * @param {Query} query
 * @param {Object} options
 * @return {Array}
 */ e3.preparePopulationOptionsMQ = function(t5, e32) {
                var r79 = t5._mongooseOptions.populate, n96 = Object.keys(r79).reduce(function(t8, e40) {
                    return t8.concat([
                        r79[e40]
                    ]);
                }, []);
                null != e32.lean && n96.filter(function(t8) {
                    return null == a49(t8, "options.lean");
                }).forEach(f39(e32.lean));
                var o120 = a49(t5, "options.session", null);
                null != o120 && n96.forEach(function(t8) {
                    null != t8.options ? "session" in t8.options || (t8.options.session = o120) : t8.options = {
                        session: o120
                    };
                });
                var i72 = t5._fieldsForExec();
                return n96.forEach(function(t8) {
                    t8._queryProjection = i72;
                }), n96;
            }, /*!
 * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,
 * it returns an instance of the given model.
 *
 * @param {Model}  model
 * @param {Object} doc
 * @param {Object} fields
 *
 * @return {Document}
 */ e3.createModel = function(t5, r79, n96, o120, i72) {
                t5.hooks.execPreSync("createModel", r79);
                var s63 = t5.schema ? t5.schema.discriminatorMapping : null, a62 = s63 && s63.isRoot ? s63.key : null, c50 = r79[a62];
                if (a62 && c50 && t5.discriminators) {
                    var f40 = t5.discriminators[c50] || u63(t5.discriminators, c50);
                    if (f40) {
                        var p35 = l40(o120);
                        return e3.applyPaths(p35, f40.schema), new f40(void 0, p35, true);
                    }
                }
                return (void 0) === i72 && ((i72 = {
                }).defaults = true), new t5(void 0, n96, {
                    skipId: true,
                    isNew: false,
                    willInit: true,
                    defaults: i72.defaults
                });
            }, /*!
 * ignore
 */ e3.applyPaths = function(t5, e32) {
                var r79, i72, u67;
                if (t5) for(u67 = (i72 = Object.keys(t5)).length; u67--;)if ("+" !== i72[u67][0]) {
                    var l41 = t5[i72[u67]];
                    if (c47(l41)) {
                        r79 = !l41;
                        break;
                    }
                }
                var f41 = [], p36 = [], h30 = [];
                switch((function e40(n96, o120) {
                    if (o120 || (o120 = ""), -1 !== h30.indexOf(n96)) return [];
                    h30.push(n96);
                    var i73 = [];
                    return n96.eachPath(function(n97, a62) {
                        o120 && (n97 = o120 + "." + n97);
                        var u68 = E5(n97, a62);
                        if (null == u68 && a62.$isMongooseArray && !a62.$isMongooseDocumentArray && (u68 = E5(n97, a62.caster)), null != u68 && i73.push(u68), a62.schema) {
                            var c50 = e40(a62.schema, n97);
                            false === r79 && s61(t5, n97, a62.schema, f41, c50);
                        }
                    }), h30.pop(), i73;
                })(e32), r79){
                    case true:
                        var y29, d28 = o107(p36);
                        try {
                            for(d28.s(); !(y29 = d28.n()).done;){
                                var _20 = y29.value;
                                t5[_20] = 0;
                            }
                        } catch (t8) {
                            d28.e(t8);
                        } finally{
                            d28.f();
                        }
                        break;
                    case false:
                        e32 && e32.paths._id && e32.paths._id.options && false === e32.paths._id.options.select && (t5._id = 0);
                        var v15, m11 = o107(f41);
                        try {
                            for(m11.s(); !(v15 = m11.n()).done;){
                                var g13 = v15.value;
                                t5[g13] = t5[g13] || 1;
                            }
                        } catch (t8) {
                            m11.e(t8);
                        } finally{
                            m11.f();
                        }
                        break;
                    case void 0:
                        if (null == t5) break;
                        for(var b11 = 0, w11 = Object.keys(t5 || {
                        }); b11 < w11.length; b11++){
                            var O9 = w11[b11];
                            O9.startsWith("+") && delete t5[O9];
                        }
                        var S9, A6 = o107(p36);
                        try {
                            for(A6.s(); !(S9 = A6.n()).done;){
                                var $5 = S9.value;
                                t5[$5] = 0;
                            }
                        } catch (t8) {
                            A6.e(t8);
                        } finally{
                            A6.f();
                        }
                }
                function E5(e41, o120) {
                    var s63 = "+" + e41, u68 = t5 && s63 in t5;
                    if (u68 && delete t5[s63], "boolean" == typeof o120.selected) {
                        if (u68) return delete t5[s63], void (false === r79 && i72.length > 1 && !~i72.indexOf(e41) && (t5[e41] = 1));
                        for(var c51 = e41.split("."), l42 = "", h31 = 0; h31 < c51.length; ++h31)if (l42 += l42.length ? "." + c51[h31] : c51[h31], -1 !== p36.indexOf(l42)) return;
                        if (!r79 && a49(o120, "options.$skipDiscriminatorCheck", false)) for(var y30 = "", d29 = 0; d29 < c51.length; ++d29){
                            y30 += (0 === y30.length ? "" : ".") + c51[d29];
                            var _21 = a49(t5, y30, false) || a49(t5, y30 + ".$", false);
                            if (_21 && "object" !== n64(_21)) return;
                        }
                        return (o120.selected ? f41 : p36).push(e41), e41;
                    }
                }
            }, e3.handleDeleteWriteOpResult = function(t5) {
                return function(e32, r79) {
                    if (e32) return t5(e32);
                    var n96 = Object.assign({
                    }, r79.result);
                    return null != a49(r79, "result.n", null) && (n96.deletedCount = r79.result.n), null != r79.deletedCount && (n96.deletedCount = r79.deletedCount), t5(null, n96);
                };
            };
        },
        function(t2, e3, r2) {
            "use strict";
            t2.exports = function(t5, e32, r79, n64, o107) {
                var i71 = Object.keys(t5).reduce(function(t8, r80) {
                    return t8 || r80.startsWith(e32 + ".");
                }, false), s61 = e32 + "." + r79.options.discriminatorKey;
                i71 || 1 !== o107.length || o107[0] !== s61 || n64.splice(n64.indexOf(s61), 1);
            };
        },
        function(t2, e3, r2) {
            "use strict";
            function n64(t5) {
                return (n64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t8) {
                    return typeof t8;
                } : function(t8) {
                    return t8 && "function" == typeof Symbol && t8.constructor === Symbol && t8 !== Symbol.prototype ? "symbol" : typeof t8;
                })(t5);
            }
            t2.exports = function(t5) {
                return !!t5 && ("object" === n64(t5) || "function" == typeof t5) && "function" == typeof t5.then;
            };
        },
        function(t2, e3, r2) {
            "use strict";
            /*!
 * Module dependencies.
 */ var n64 = r2(12), o107 = r2(19).EventEmitter, i71 = r2(5), s61 = r2(53), a49 = r2(8), u63 = i71.ValidationError, c47 = r2(77), l40 = r2(21);
            function f39(t5, e32, r79, o120, u67) {
                if (!(this instanceof f39)) return new f39(t5, e32, r79, o120, u67);
                if (l40(e32) && !e32.instanceOfSchema && (e32 = new s61(e32)), e32 = this.schema || e32, !this.schema && e32.options._id && (void 0) === (t5 = t5 || {
                })._id && (t5._id = new a49), !e32) throw new i71.MissingSchemaError;
                for(var p36 in this.$__setSchema(e32), n64.call(this, t5, r79, o120, u67), c47(this, e32, {
                    decorateDoc: true
                }), e32.methods)this[p36] = e32.methods[p36];
                for(var h30 in e32.statics)this[h30] = e32.statics[h30];
            }
            /*!
 * Inherit from the NodeJS document
 */ f39.prototype = Object.create(n64.prototype), f39.prototype.constructor = f39, /*!
 * ignore
 */ f39.events = new o107, /*!
 * Browser doc exposes the event emitter API
 */ f39.$emitter = new o107, [
                "on",
                "once",
                "emit",
                "listeners",
                "removeListener",
                "setMaxListeners",
                "removeAllListeners",
                "addListener"
            ].forEach(function(t5) {
                f39[t5] = function() {
                    return f39.$emitter[t5].apply(f39.$emitter, arguments);
                };
            }), /*!
 * Module exports.
 */ f39.ValidationError = u63, t2.exports = f39;
        }
    ]);
});

},{}],"1pxxd":[function() {},{}]},["1j6wU","1pEn3","17RhE"], "17RhE", "parcelRequire0de8")

//# sourceMappingURL=index.HASH_REF_6c6d401bcb92263055c9932278d3e8ff.js.map
